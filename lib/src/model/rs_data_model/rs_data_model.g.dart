// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'rs_data_model.dart';

// **************************************************************************
// IsarCollectionGenerator
// **************************************************************************

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters

extension GetRSDataModelCollection on Isar {
  IsarCollection<RSDataModel> get rSDataModels => this.collection();
}

const RSDataModelSchema = CollectionSchema(
  name: r'RSDataModel',
  id: 7197545735907489390,
  properties: {
    r'accommodationContract': PropertySchema(
      id: 0,
      name: r'accommodationContract',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'activated': PropertySchema(
      id: 1,
      name: r'activated',
      type: IsarType.bool,
    ),
    r'activity': PropertySchema(
      id: 2,
      name: r'activity',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'address': PropertySchema(
      id: 3,
      name: r'address',
      type: IsarType.string,
    ),
    r'amenities': PropertySchema(
      id: 4,
      name: r'amenities',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'apiAddress': PropertySchema(
      id: 5,
      name: r'apiAddress',
      type: IsarType.string,
    ),
    r'appStoreLink': PropertySchema(
      id: 6,
      name: r'appStoreLink',
      type: IsarType.string,
    ),
    r'autoCreateProfile': PropertySchema(
      id: 7,
      name: r'autoCreateProfile',
      type: IsarType.bool,
    ),
    r'autoSendWelcomeMail': PropertySchema(
      id: 8,
      name: r'autoSendWelcomeMail',
      type: IsarType.bool,
    ),
    r'avm': PropertySchema(
      id: 9,
      name: r'avm',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'babyAgeRange': PropertySchema(
      id: 10,
      name: r'babyAgeRange',
      type: IsarType.string,
    ),
    r'banner': PropertySchema(
      id: 11,
      name: r'banner',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'bars': PropertySchema(
      id: 12,
      name: r'bars',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'bingLink': PropertySchema(
      id: 13,
      name: r'bingLink',
      type: IsarType.string,
    ),
    r'cafes': PropertySchema(
      id: 14,
      name: r'cafes',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'callCenter': PropertySchema(
      id: 15,
      name: r'callCenter',
      type: IsarType.string,
    ),
    r'callForRequests': PropertySchema(
      id: 16,
      name: r'callForRequests',
      type: IsarType.bool,
    ),
    r'checkInPostMessage': PropertySchema(
      id: 17,
      name: r'checkInPostMessage',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'checkInSurveyId': PropertySchema(
      id: 18,
      name: r'checkInSurveyId',
      type: IsarType.long,
    ),
    r'checkOutSurveyId': PropertySchema(
      id: 19,
      name: r'checkOutSurveyId',
      type: IsarType.long,
    ),
    r'childAgeRange': PropertySchema(
      id: 20,
      name: r'childAgeRange',
      type: IsarType.string,
    ),
    r'cinema': PropertySchema(
      id: 21,
      name: r'cinema',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'city': PropertySchema(
      id: 22,
      name: r'city',
      type: IsarType.string,
    ),
    r'claimTrackingManager': PropertySchema(
      id: 23,
      name: r'claimTrackingManager',
      type: IsarType.bool,
    ),
    r'clientId': PropertySchema(
      id: 24,
      name: r'clientId',
      type: IsarType.long,
    ),
    r'closeDate': PropertySchema(
      id: 25,
      name: r'closeDate',
      type: IsarType.dateTime,
    ),
    r'closeRequest': PropertySchema(
      id: 26,
      name: r'closeRequest',
      type: IsarType.bool,
    ),
    r'complaint': PropertySchema(
      id: 27,
      name: r'complaint',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'contactEmail': PropertySchema(
      id: 28,
      name: r'contactEmail',
      type: IsarType.string,
    ),
    r'contactName': PropertySchema(
      id: 29,
      name: r'contactName',
      type: IsarType.string,
    ),
    r'contactPhone': PropertySchema(
      id: 30,
      name: r'contactPhone',
      type: IsarType.string,
    ),
    r'country': PropertySchema(
      id: 31,
      name: r'country',
      type: IsarType.string,
    ),
    r'createPowerBIdata': PropertySchema(
      id: 32,
      name: r'createPowerBIdata',
      type: IsarType.bool,
    ),
    r'createdAt': PropertySchema(
      id: 33,
      name: r'createdAt',
      type: IsarType.dateTime,
    ),
    r'currencyCode': PropertySchema(
      id: 34,
      name: r'currencyCode',
      type: IsarType.string,
    ),
    r'dailyAnimations': PropertySchema(
      id: 35,
      name: r'dailyAnimations',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'deliveryDistanceType': PropertySchema(
      id: 36,
      name: r'deliveryDistanceType',
      type: IsarType.string,
    ),
    r'deliveryTimeOfDay': PropertySchema(
      id: 37,
      name: r'deliveryTimeOfDay',
      type: IsarType.string,
    ),
    r'description': PropertySchema(
      id: 38,
      name: r'description',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'directReservation': PropertySchema(
      id: 39,
      name: r'directReservation',
      type: IsarType.bool,
    ),
    r'email': PropertySchema(
      id: 40,
      name: r'email',
      type: IsarType.string,
    ),
    r'entryDate': PropertySchema(
      id: 41,
      name: r'entryDate',
      type: IsarType.dateTime,
    ),
    r'events': PropertySchema(
      id: 42,
      name: r'events',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'facebookId': PropertySchema(
      id: 43,
      name: r'facebookId',
      type: IsarType.long,
    ),
    r'faq': PropertySchema(
      id: 44,
      name: r'faq',
      type: IsarType.objectList,
      target: r'RSDataMenuItemTitleAndDescriptionModel',
    ),
    r'featured': PropertySchema(
      id: 45,
      name: r'featured',
      type: IsarType.objectList,
      target: r'RSDataMenuItemsModel',
    ),
    r'firebaseLink': PropertySchema(
      id: 46,
      name: r'firebaseLink',
      type: IsarType.string,
    ),
    r'firstLevelAlertList': PropertySchema(
      id: 47,
      name: r'firstLevelAlertList',
      type: IsarType.string,
    ),
    r'fourthLevelAlertList': PropertySchema(
      id: 48,
      name: r'fourthLevelAlertList',
      type: IsarType.string,
    ),
    r'frontOffice': PropertySchema(
      id: 49,
      name: r'frontOffice',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'giftCard': PropertySchema(
      id: 50,
      name: r'giftCard',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'golfClub': PropertySchema(
      id: 51,
      name: r'golfClub',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'googleAnalyticsLink': PropertySchema(
      id: 52,
      name: r'googleAnalyticsLink',
      type: IsarType.string,
    ),
    r'googleMapAddress': PropertySchema(
      id: 53,
      name: r'googleMapAddress',
      type: IsarType.string,
    ),
    r'googlePlayLink': PropertySchema(
      id: 54,
      name: r'googlePlayLink',
      type: IsarType.string,
    ),
    r'groupHotels': PropertySchema(
      id: 55,
      name: r'groupHotels',
      type: IsarType.string,
    ),
    r'guestny': PropertySchema(
      id: 56,
      name: r'guestny',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'homePageDesigner': PropertySchema(
      id: 57,
      name: r'homePageDesigner',
      type: IsarType.objectList,
      target: r'RsDataHomePageDesignerModel',
    ),
    r'hotelChain': PropertySchema(
      id: 58,
      name: r'hotelChain',
      type: IsarType.string,
    ),
    r'hotelInformationAr': PropertySchema(
      id: 59,
      name: r'hotelInformationAr',
      type: IsarType.string,
    ),
    r'hotelInformationDe': PropertySchema(
      id: 60,
      name: r'hotelInformationDe',
      type: IsarType.string,
    ),
    r'hotelInformationEn': PropertySchema(
      id: 61,
      name: r'hotelInformationEn',
      type: IsarType.string,
    ),
    r'hotelInformationEs': PropertySchema(
      id: 62,
      name: r'hotelInformationEs',
      type: IsarType.string,
    ),
    r'hotelInformationFr': PropertySchema(
      id: 63,
      name: r'hotelInformationFr',
      type: IsarType.string,
    ),
    r'hotelInformationIr': PropertySchema(
      id: 64,
      name: r'hotelInformationIr',
      type: IsarType.string,
    ),
    r'hotelInformationRu': PropertySchema(
      id: 65,
      name: r'hotelInformationRu',
      type: IsarType.string,
    ),
    r'hotelInformationTr': PropertySchema(
      id: 66,
      name: r'hotelInformationTr',
      type: IsarType.string,
    ),
    r'hotelLanguage': PropertySchema(
      id: 67,
      name: r'hotelLanguage',
      type: IsarType.string,
    ),
    r'hotelToken': PropertySchema(
      id: 68,
      name: r'hotelToken',
      type: IsarType.string,
    ),
    r'hotelTokenExpiredTime': PropertySchema(
      id: 69,
      name: r'hotelTokenExpiredTime',
      type: IsarType.dateTime,
    ),
    r'hotelType': PropertySchema(
      id: 70,
      name: r'hotelType',
      type: IsarType.string,
    ),
    r'houseKeepingPhone': PropertySchema(
      id: 71,
      name: r'houseKeepingPhone',
      type: IsarType.string,
    ),
    r'housekeeping': PropertySchema(
      id: 72,
      name: r'housekeeping',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'icibotId': PropertySchema(
      id: 73,
      name: r'icibotId',
      type: IsarType.long,
    ),
    r'imageUrl': PropertySchema(
      id: 74,
      name: r'imageUrl',
      type: IsarType.string,
    ),
    r'inHouseListLoginType': PropertySchema(
      id: 75,
      name: r'inHouseListLoginType',
      type: IsarType.string,
    ),
    r'inHouseListMatchingCondition': PropertySchema(
      id: 76,
      name: r'inHouseListMatchingCondition',
      type: IsarType.string,
    ),
    r'isAccountVerifyNecessaryForRequest': PropertySchema(
      id: 77,
      name: r'isAccountVerifyNecessaryForRequest',
      type: IsarType.bool,
    ),
    r'isClosedStaffChat': PropertySchema(
      id: 78,
      name: r'isClosedStaffChat',
      type: IsarType.bool,
    ),
    r'isGiftCard': PropertySchema(
      id: 79,
      name: r'isGiftCard',
      type: IsarType.bool,
    ),
    r'isTaskDescriptionMandatory': PropertySchema(
      id: 80,
      name: r'isTaskDescriptionMandatory',
      type: IsarType.bool,
    ),
    r'isTaskSolutionNoteMandatory': PropertySchema(
      id: 81,
      name: r'isTaskSolutionNoteMandatory',
      type: IsarType.bool,
    ),
    r'issues': PropertySchema(
      id: 82,
      name: r'issues',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'kidsClub': PropertySchema(
      id: 83,
      name: r'kidsClub',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'kvkkLink': PropertySchema(
      id: 84,
      name: r'kvkkLink',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'languages': PropertySchema(
      id: 85,
      name: r'languages',
      type: IsarType.stringList,
    ),
    r'latLng': PropertySchema(
      id: 86,
      name: r'latLng',
      type: IsarType.string,
    ),
    r'life': PropertySchema(
      id: 87,
      name: r'life',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'loyalityManagement': PropertySchema(
      id: 88,
      name: r'loyalityManagement',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'loyaltyManagement': PropertySchema(
      id: 89,
      name: r'loyaltyManagement',
      type: IsarType.bool,
    ),
    r'mailVerificationForGuests': PropertySchema(
      id: 90,
      name: r'mailVerificationForGuests',
      type: IsarType.bool,
    ),
    r'malls': PropertySchema(
      id: 91,
      name: r'malls',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'manuelGuestVisitConfirmation': PropertySchema(
      id: 92,
      name: r'manuelGuestVisitConfirmation',
      type: IsarType.bool,
    ),
    r'manuelRequestOwnerType': PropertySchema(
      id: 93,
      name: r'manuelRequestOwnerType',
      type: IsarType.string,
    ),
    r'massage': PropertySchema(
      id: 94,
      name: r'massage',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'masterColor': PropertySchema(
      id: 95,
      name: r'masterColor',
      type: IsarType.string,
    ),
    r'meetingRoom': PropertySchema(
      id: 96,
      name: r'meetingRoom',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'messengerAddress': PropertySchema(
      id: 97,
      name: r'messengerAddress',
      type: IsarType.string,
    ),
    r'mice': PropertySchema(
      id: 98,
      name: r'mice',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'mobilePayment': PropertySchema(
      id: 99,
      name: r'mobilePayment',
      type: IsarType.bool,
    ),
    r'mobilePublishBy': PropertySchema(
      id: 100,
      name: r'mobilePublishBy',
      type: IsarType.string,
    ),
    r'mobileVersion': PropertySchema(
      id: 101,
      name: r'mobileVersion',
      type: IsarType.long,
    ),
    r'mobileVersionPublishDate': PropertySchema(
      id: 102,
      name: r'mobileVersionPublishDate',
      type: IsarType.dateTime,
    ),
    r'name': PropertySchema(
      id: 103,
      name: r'name',
      type: IsarType.string,
    ),
    r'negativeSurveyAlertList': PropertySchema(
      id: 104,
      name: r'negativeSurveyAlertList',
      type: IsarType.string,
    ),
    r'news': PropertySchema(
      id: 105,
      name: r'news',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'notificationPoint': PropertySchema(
      id: 106,
      name: r'notificationPoint',
      type: IsarType.long,
    ),
    r'oldAgeRange': PropertySchema(
      id: 107,
      name: r'oldAgeRange',
      type: IsarType.string,
    ),
    r'oneSignalAppId': PropertySchema(
      id: 108,
      name: r'oneSignalAppId',
      type: IsarType.string,
    ),
    r'oneSignalAppKey': PropertySchema(
      id: 109,
      name: r'oneSignalAppKey',
      type: IsarType.string,
    ),
    r'oneSignalUserKey': PropertySchema(
      id: 110,
      name: r'oneSignalUserKey',
      type: IsarType.string,
    ),
    r'onetimeInformation': PropertySchema(
      id: 111,
      name: r'onetimeInformation',
      type: IsarType.string,
    ),
    r'onlineCheckIn': PropertySchema(
      id: 112,
      name: r'onlineCheckIn',
      type: IsarType.bool,
    ),
    r'onlineCheckInImage': PropertySchema(
      id: 113,
      name: r'onlineCheckInImage',
      type: IsarType.bool,
    ),
    r'onlineCheckInSignature': PropertySchema(
      id: 114,
      name: r'onlineCheckInSignature',
      type: IsarType.bool,
    ),
    r'onlineReservationUrl': PropertySchema(
      id: 115,
      name: r'onlineReservationUrl',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'openDate': PropertySchema(
      id: 116,
      name: r'openDate',
      type: IsarType.dateTime,
    ),
    r'openForYear': PropertySchema(
      id: 117,
      name: r'openForYear',
      type: IsarType.bool,
    ),
    r'operationSystem': PropertySchema(
      id: 118,
      name: r'operationSystem',
      type: IsarType.bool,
    ),
    r'opportunities': PropertySchema(
      id: 119,
      name: r'opportunities',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'other1': PropertySchema(
      id: 120,
      name: r'other1',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'other2': PropertySchema(
      id: 121,
      name: r'other2',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'other3': PropertySchema(
      id: 122,
      name: r'other3',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'other4': PropertySchema(
      id: 123,
      name: r'other4',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'other5': PropertySchema(
      id: 124,
      name: r'other5',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'other6': PropertySchema(
      id: 125,
      name: r'other6',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'other7': PropertySchema(
      id: 126,
      name: r'other7',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'other8': PropertySchema(
      id: 127,
      name: r'other8',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'otherFacilities': PropertySchema(
      id: 128,
      name: r'otherFacilities',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'otherServices': PropertySchema(
      id: 129,
      name: r'otherServices',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'password': PropertySchema(
      id: 130,
      name: r'password',
      type: IsarType.string,
    ),
    r'phone': PropertySchema(
      id: 131,
      name: r'phone',
      type: IsarType.string,
    ),
    r'photos': PropertySchema(
      id: 132,
      name: r'photos',
      type: IsarType.string,
    ),
    r'placeId': PropertySchema(
      id: 133,
      name: r'placeId',
      type: IsarType.string,
    ),
    r'planImageUrl': PropertySchema(
      id: 134,
      name: r'planImageUrl',
      type: IsarType.string,
    ),
    r'pmsApplication': PropertySchema(
      id: 135,
      name: r'pmsApplication',
      type: IsarType.string,
    ),
    r'poIs': PropertySchema(
      id: 136,
      name: r'poIs',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'pools': PropertySchema(
      id: 137,
      name: r'pools',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'postCode': PropertySchema(
      id: 138,
      name: r'postCode',
      type: IsarType.string,
    ),
    r'privacyPolicyLink': PropertySchema(
      id: 139,
      name: r'privacyPolicyLink',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'productType': PropertySchema(
      id: 140,
      name: r'productType',
      type: IsarType.string,
    ),
    r'qrReader': PropertySchema(
      id: 141,
      name: r'qrReader',
      type: IsarType.bool,
    ),
    r'rating': PropertySchema(
      id: 142,
      name: r'rating',
      type: IsarType.double,
    ),
    r'releaseDate': PropertySchema(
      id: 143,
      name: r'releaseDate',
      type: IsarType.dateTime,
    ),
    r'reportDbScheme': PropertySchema(
      id: 144,
      name: r'reportDbScheme',
      type: IsarType.string,
    ),
    r'reservationMailAddress': PropertySchema(
      id: 145,
      name: r'reservationMailAddress',
      type: IsarType.string,
    ),
    r'restaurants': PropertySchema(
      id: 146,
      name: r'restaurants',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'rewardCalculationType': PropertySchema(
      id: 147,
      name: r'rewardCalculationType',
      type: IsarType.string,
    ),
    r'rewardMinPoint': PropertySchema(
      id: 148,
      name: r'rewardMinPoint',
      type: IsarType.long,
    ),
    r'rewardValue': PropertySchema(
      id: 149,
      name: r'rewardValue',
      type: IsarType.long,
    ),
    r'roomGuide': PropertySchema(
      id: 150,
      name: r'roomGuide',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'roomNumberValidationCode': PropertySchema(
      id: 151,
      name: r'roomNumberValidationCode',
      type: IsarType.string,
    ),
    r'roomServices': PropertySchema(
      id: 152,
      name: r'roomServices',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'rooms': PropertySchema(
      id: 153,
      name: r'rooms',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'secondLevelAlertList': PropertySchema(
      id: 154,
      name: r'secondLevelAlertList',
      type: IsarType.string,
    ),
    r'services': PropertySchema(
      id: 155,
      name: r'services',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'showChat': PropertySchema(
      id: 156,
      name: r'showChat',
      type: IsarType.bool,
    ),
    r'showWelcome': PropertySchema(
      id: 157,
      name: r'showWelcome',
      type: IsarType.bool,
    ),
    r'shows': PropertySchema(
      id: 158,
      name: r'shows',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'smFacebookUrl': PropertySchema(
      id: 159,
      name: r'smFacebookUrl',
      type: IsarType.string,
    ),
    r'smInstagramUrl': PropertySchema(
      id: 160,
      name: r'smInstagramUrl',
      type: IsarType.string,
    ),
    r'smTwitterUrl': PropertySchema(
      id: 161,
      name: r'smTwitterUrl',
      type: IsarType.string,
    ),
    r'smVkontakteUrl': PropertySchema(
      id: 162,
      name: r'smVkontakteUrl',
      type: IsarType.string,
    ),
    r'smYoutubeUrl': PropertySchema(
      id: 163,
      name: r'smYoutubeUrl',
      type: IsarType.string,
    ),
    r'spCustomerRelation': PropertySchema(
      id: 164,
      name: r'spCustomerRelation',
      type: IsarType.string,
    ),
    r'spDoctor': PropertySchema(
      id: 165,
      name: r'spDoctor',
      type: IsarType.string,
    ),
    r'spManagement': PropertySchema(
      id: 166,
      name: r'spManagement',
      type: IsarType.string,
    ),
    r'spReception': PropertySchema(
      id: 167,
      name: r'spReception',
      type: IsarType.string,
    ),
    r'spRoomService': PropertySchema(
      id: 168,
      name: r'spRoomService',
      type: IsarType.string,
    ),
    r'spSpa': PropertySchema(
      id: 169,
      name: r'spSpa',
      type: IsarType.string,
    ),
    r'spTechnicalService': PropertySchema(
      id: 170,
      name: r'spTechnicalService',
      type: IsarType.string,
    ),
    r'spa': PropertySchema(
      id: 171,
      name: r'spa',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'sport': PropertySchema(
      id: 172,
      name: r'sport',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'staffTracking': PropertySchema(
      id: 173,
      name: r'staffTracking',
      type: IsarType.bool,
    ),
    r'subColor': PropertySchema(
      id: 174,
      name: r'subColor',
      type: IsarType.string,
    ),
    r'subDomainName': PropertySchema(
      id: 175,
      name: r'subDomainName',
      type: IsarType.string,
    ),
    r'subscriptionEndDate': PropertySchema(
      id: 176,
      name: r'subscriptionEndDate',
      type: IsarType.dateTime,
    ),
    r'subscriptionStartDate': PropertySchema(
      id: 177,
      name: r'subscriptionStartDate',
      type: IsarType.dateTime,
    ),
    r'surveyAddress': PropertySchema(
      id: 178,
      name: r'surveyAddress',
      type: IsarType.string,
    ),
    r'surveyDescription': PropertySchema(
      id: 179,
      name: r'surveyDescription',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'surveyHeader': PropertySchema(
      id: 180,
      name: r'surveyHeader',
      type: IsarType.object,
      target: r'RSDataSurveyHeaderModel',
    ),
    r'surveyHeaderId': PropertySchema(
      id: 181,
      name: r'surveyHeaderId',
      type: IsarType.long,
    ),
    r'surveyPoint': PropertySchema(
      id: 182,
      name: r'surveyPoint',
      type: IsarType.long,
    ),
    r'surveyTitle': PropertySchema(
      id: 183,
      name: r'surveyTitle',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'surveyUrl': PropertySchema(
      id: 184,
      name: r'surveyUrl',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'telegramNo': PropertySchema(
      id: 185,
      name: r'telegramNo',
      type: IsarType.string,
    ),
    r'thirdLevelAlertList': PropertySchema(
      id: 186,
      name: r'thirdLevelAlertList',
      type: IsarType.string,
    ),
    r'timeZone': PropertySchema(
      id: 187,
      name: r'timeZone',
      type: IsarType.string,
    ),
    r'title': PropertySchema(
      id: 188,
      name: r'title',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'titleAndDescriptions': PropertySchema(
      id: 189,
      name: r'titleAndDescriptions',
      type: IsarType.objectList,
      target: r'RSDataMenuItemTitleAndDescriptionModel',
    ),
    r'tokenExpireSeconds': PropertySchema(
      id: 190,
      name: r'tokenExpireSeconds',
      type: IsarType.long,
    ),
    r'tours': PropertySchema(
      id: 191,
      name: r'tours',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'tripAdvisorLink': PropertySchema(
      id: 192,
      name: r'tripAdvisorLink',
      type: IsarType.string,
    ),
    r'updatedAt': PropertySchema(
      id: 193,
      name: r'updatedAt',
      type: IsarType.dateTime,
    ),
    r'upsell': PropertySchema(
      id: 194,
      name: r'upsell',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'upsellItemId': PropertySchema(
      id: 195,
      name: r'upsellItemId',
      type: IsarType.long,
    ),
    r'viberNo': PropertySchema(
      id: 196,
      name: r'viberNo',
      type: IsarType.string,
    ),
    r'video': PropertySchema(
      id: 197,
      name: r'video',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'virtualTourUrl': PropertySchema(
      id: 198,
      name: r'virtualTourUrl',
      type: IsarType.string,
    ),
    r'webSiteUrl': PropertySchema(
      id: 199,
      name: r'webSiteUrl',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'wedding': PropertySchema(
      id: 200,
      name: r'wedding',
      type: IsarType.object,
      target: r'RsDataMenuSectionModel',
    ),
    r'welcomeMessage': PropertySchema(
      id: 201,
      name: r'welcomeMessage',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'whatsappNo': PropertySchema(
      id: 202,
      name: r'whatsappNo',
      type: IsarType.string,
    ),
    r'wifiName': PropertySchema(
      id: 203,
      name: r'wifiName',
      type: IsarType.string,
    ),
    r'wifiPassword': PropertySchema(
      id: 204,
      name: r'wifiPassword',
      type: IsarType.string,
    ),
    r'yandexMetricaLink': PropertySchema(
      id: 205,
      name: r'yandexMetricaLink',
      type: IsarType.string,
    )
  },
  estimateSize: _rSDataModelEstimateSize,
  serialize: _rSDataModelSerialize,
  deserialize: _rSDataModelDeserialize,
  deserializeProp: _rSDataModelDeserializeProp,
  idName: r'id',
  indexes: {},
  links: {},
  embeddedSchemas: {
    r'RSDataTitleLanguageModel': RSDataTitleLanguageModelSchema,
    r'RSDataSurveyHeaderModel': RSDataSurveyHeaderModelSchema,
    r'RsDataHomePageDesignerModel': RsDataHomePageDesignerModelSchema,
    r'RSDataMenuItemTitleAndDescriptionModel':
        RSDataMenuItemTitleAndDescriptionModelSchema,
    r'RSDataMenuItemsModel': RSDataMenuItemsModelSchema,
    r'RSDataMenuItemCatalogGroupsModel': RSDataMenuItemCatalogGroupsModelSchema,
    r'RSDataImagesModel': RSDataImagesModelSchema,
    r'RSDataMenuItemCatalogsModel': RSDataMenuItemCatalogsModelSchema,
    r'RSDataMenuItemCatalogPricesModel': RSDataMenuItemCatalogPricesModelSchema,
    r'MenuItemCatalogModifierGroup': MenuItemCatalogModifierGroupSchema,
    r'RSDataTagsModel': RSDataTagsModelSchema,
    r'RSDataMenuItemBulletListModel': RSDataMenuItemBulletListModelSchema,
    r'RSDataMenuItemBooksModel': RSDataMenuItemBooksModelSchema,
    r'RsDataMenuSectionModel': RsDataMenuSectionModelSchema,
    r'RSDataMenuCategoriesModel': RSDataMenuCategoriesModelSchema,
    r'RSDataSurveyModel': RSDataSurveyModelSchema
  },
  getId: _rSDataModelGetId,
  getLinks: _rSDataModelGetLinks,
  attach: _rSDataModelAttach,
  version: '3.0.5',
);

int _rSDataModelEstimateSize(
  RSDataModel object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final list = object.accommodationContract;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.activity;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.address;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.amenities;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.apiAddress;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.appStoreLink;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.avm;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.babyAgeRange;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.banner;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.bars;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.bingLink;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.cafes;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.callCenter;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.checkInPostMessage;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.childAgeRange;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.cinema;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.city;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.complaint;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.contactEmail;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.contactName;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.contactPhone;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.country;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.currencyCode;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.dailyAnimations;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.deliveryDistanceType;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.deliveryTimeOfDay;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.description;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.email;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.events;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final list = object.faq;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataMenuItemTitleAndDescriptionModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount +=
              RSDataMenuItemTitleAndDescriptionModelSchema.estimateSize(
                  value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.featured;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataMenuItemsModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataMenuItemsModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.firebaseLink;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.firstLevelAlertList;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.fourthLevelAlertList;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.frontOffice;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.giftCard;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.golfClub;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.googleAnalyticsLink;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.googleMapAddress;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.googlePlayLink;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.groupHotels;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.guestny;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final list = object.homePageDesigner;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RsDataHomePageDesignerModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RsDataHomePageDesignerModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.hotelChain;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.hotelInformationAr;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.hotelInformationDe;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.hotelInformationEn;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.hotelInformationEs;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.hotelInformationFr;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.hotelInformationIr;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.hotelInformationRu;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.hotelInformationTr;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.hotelLanguage;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.hotelToken;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.hotelType;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.houseKeepingPhone;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.housekeeping;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.imageUrl;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.inHouseListLoginType;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.inHouseListMatchingCondition;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.issues;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.kidsClub;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final list = object.kvkkLink;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.languages;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += value.length * 3;
        }
      }
    }
  }
  {
    final value = object.latLng;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.life;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.loyalityManagement;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.malls;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.manuelRequestOwnerType;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.massage;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.masterColor;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.meetingRoom;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.messengerAddress;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.mice;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.mobilePublishBy;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.name;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.negativeSurveyAlertList;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.news;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.oldAgeRange;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.oneSignalAppId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.oneSignalAppKey;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.oneSignalUserKey;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.onetimeInformation;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.onlineReservationUrl;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.opportunities;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.other1;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.other2;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.other3;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.other4;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.other5;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.other6;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.other7;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.other8;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.otherFacilities;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.otherServices;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.password;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.phone;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.photos;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.placeId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.planImageUrl;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.pmsApplication;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.poIs;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.pools;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.postCode;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.privacyPolicyLink;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.productType;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.reportDbScheme;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.reservationMailAddress;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.restaurants;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.rewardCalculationType;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.roomGuide;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.roomNumberValidationCode;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.roomServices;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.rooms;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.secondLevelAlertList;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.services;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.shows;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.smFacebookUrl;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.smInstagramUrl;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.smTwitterUrl;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.smVkontakteUrl;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.smYoutubeUrl;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.spCustomerRelation;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.spDoctor;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.spManagement;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.spReception;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.spRoomService;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.spSpa;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.spTechnicalService;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.spa;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.sport;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.subColor;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.subDomainName;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.surveyAddress;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.surveyDescription;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.surveyHeader;
    if (value != null) {
      bytesCount += 3 +
          RSDataSurveyHeaderModelSchema.estimateSize(
              value, allOffsets[RSDataSurveyHeaderModel]!, allOffsets);
    }
  }
  {
    final list = object.surveyTitle;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.surveyUrl;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.telegramNo;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.thirdLevelAlertList;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.timeZone;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.title;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.titleAndDescriptions;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataMenuItemTitleAndDescriptionModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount +=
              RSDataMenuItemTitleAndDescriptionModelSchema.estimateSize(
                  value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.tours;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.tripAdvisorLink;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.upsell;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.viberNo;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.video;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final value = object.virtualTourUrl;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.webSiteUrl;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.wedding;
    if (value != null) {
      bytesCount += 3 +
          RsDataMenuSectionModelSchema.estimateSize(
              value, allOffsets[RsDataMenuSectionModel]!, allOffsets);
    }
  }
  {
    final list = object.welcomeMessage;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.whatsappNo;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.wifiName;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.wifiPassword;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.yandexMetricaLink;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  return bytesCount;
}

void _rSDataModelSerialize(
  RSDataModel object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[0],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.accommodationContract,
  );
  writer.writeBool(offsets[1], object.activated);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[2],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.activity,
  );
  writer.writeString(offsets[3], object.address);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[4],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.amenities,
  );
  writer.writeString(offsets[5], object.apiAddress);
  writer.writeString(offsets[6], object.appStoreLink);
  writer.writeBool(offsets[7], object.autoCreateProfile);
  writer.writeBool(offsets[8], object.autoSendWelcomeMail);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[9],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.avm,
  );
  writer.writeString(offsets[10], object.babyAgeRange);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[11],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.banner,
  );
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[12],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.bars,
  );
  writer.writeString(offsets[13], object.bingLink);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[14],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.cafes,
  );
  writer.writeString(offsets[15], object.callCenter);
  writer.writeBool(offsets[16], object.callForRequests);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[17],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.checkInPostMessage,
  );
  writer.writeLong(offsets[18], object.checkInSurveyId);
  writer.writeLong(offsets[19], object.checkOutSurveyId);
  writer.writeString(offsets[20], object.childAgeRange);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[21],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.cinema,
  );
  writer.writeString(offsets[22], object.city);
  writer.writeBool(offsets[23], object.claimTrackingManager);
  writer.writeLong(offsets[24], object.clientId);
  writer.writeDateTime(offsets[25], object.closeDate);
  writer.writeBool(offsets[26], object.closeRequest);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[27],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.complaint,
  );
  writer.writeString(offsets[28], object.contactEmail);
  writer.writeString(offsets[29], object.contactName);
  writer.writeString(offsets[30], object.contactPhone);
  writer.writeString(offsets[31], object.country);
  writer.writeBool(offsets[32], object.createPowerBIdata);
  writer.writeDateTime(offsets[33], object.createdAt);
  writer.writeString(offsets[34], object.currencyCode);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[35],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.dailyAnimations,
  );
  writer.writeString(offsets[36], object.deliveryDistanceType);
  writer.writeString(offsets[37], object.deliveryTimeOfDay);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[38],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.description,
  );
  writer.writeBool(offsets[39], object.directReservation);
  writer.writeString(offsets[40], object.email);
  writer.writeDateTime(offsets[41], object.entryDate);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[42],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.events,
  );
  writer.writeLong(offsets[43], object.facebookId);
  writer.writeObjectList<RSDataMenuItemTitleAndDescriptionModel>(
    offsets[44],
    allOffsets,
    RSDataMenuItemTitleAndDescriptionModelSchema.serialize,
    object.faq,
  );
  writer.writeObjectList<RSDataMenuItemsModel>(
    offsets[45],
    allOffsets,
    RSDataMenuItemsModelSchema.serialize,
    object.featured,
  );
  writer.writeString(offsets[46], object.firebaseLink);
  writer.writeString(offsets[47], object.firstLevelAlertList);
  writer.writeString(offsets[48], object.fourthLevelAlertList);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[49],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.frontOffice,
  );
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[50],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.giftCard,
  );
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[51],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.golfClub,
  );
  writer.writeString(offsets[52], object.googleAnalyticsLink);
  writer.writeString(offsets[53], object.googleMapAddress);
  writer.writeString(offsets[54], object.googlePlayLink);
  writer.writeString(offsets[55], object.groupHotels);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[56],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.guestny,
  );
  writer.writeObjectList<RsDataHomePageDesignerModel>(
    offsets[57],
    allOffsets,
    RsDataHomePageDesignerModelSchema.serialize,
    object.homePageDesigner,
  );
  writer.writeString(offsets[58], object.hotelChain);
  writer.writeString(offsets[59], object.hotelInformationAr);
  writer.writeString(offsets[60], object.hotelInformationDe);
  writer.writeString(offsets[61], object.hotelInformationEn);
  writer.writeString(offsets[62], object.hotelInformationEs);
  writer.writeString(offsets[63], object.hotelInformationFr);
  writer.writeString(offsets[64], object.hotelInformationIr);
  writer.writeString(offsets[65], object.hotelInformationRu);
  writer.writeString(offsets[66], object.hotelInformationTr);
  writer.writeString(offsets[67], object.hotelLanguage);
  writer.writeString(offsets[68], object.hotelToken);
  writer.writeDateTime(offsets[69], object.hotelTokenExpiredTime);
  writer.writeString(offsets[70], object.hotelType);
  writer.writeString(offsets[71], object.houseKeepingPhone);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[72],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.housekeeping,
  );
  writer.writeLong(offsets[73], object.icibotId);
  writer.writeString(offsets[74], object.imageUrl);
  writer.writeString(offsets[75], object.inHouseListLoginType);
  writer.writeString(offsets[76], object.inHouseListMatchingCondition);
  writer.writeBool(offsets[77], object.isAccountVerifyNecessaryForRequest);
  writer.writeBool(offsets[78], object.isClosedStaffChat);
  writer.writeBool(offsets[79], object.isGiftCard);
  writer.writeBool(offsets[80], object.isTaskDescriptionMandatory);
  writer.writeBool(offsets[81], object.isTaskSolutionNoteMandatory);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[82],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.issues,
  );
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[83],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.kidsClub,
  );
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[84],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.kvkkLink,
  );
  writer.writeStringList(offsets[85], object.languages);
  writer.writeString(offsets[86], object.latLng);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[87],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.life,
  );
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[88],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.loyalityManagement,
  );
  writer.writeBool(offsets[89], object.loyaltyManagement);
  writer.writeBool(offsets[90], object.mailVerificationForGuests);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[91],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.malls,
  );
  writer.writeBool(offsets[92], object.manuelGuestVisitConfirmation);
  writer.writeString(offsets[93], object.manuelRequestOwnerType);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[94],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.massage,
  );
  writer.writeString(offsets[95], object.masterColor);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[96],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.meetingRoom,
  );
  writer.writeString(offsets[97], object.messengerAddress);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[98],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.mice,
  );
  writer.writeBool(offsets[99], object.mobilePayment);
  writer.writeString(offsets[100], object.mobilePublishBy);
  writer.writeLong(offsets[101], object.mobileVersion);
  writer.writeDateTime(offsets[102], object.mobileVersionPublishDate);
  writer.writeString(offsets[103], object.name);
  writer.writeString(offsets[104], object.negativeSurveyAlertList);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[105],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.news,
  );
  writer.writeLong(offsets[106], object.notificationPoint);
  writer.writeString(offsets[107], object.oldAgeRange);
  writer.writeString(offsets[108], object.oneSignalAppId);
  writer.writeString(offsets[109], object.oneSignalAppKey);
  writer.writeString(offsets[110], object.oneSignalUserKey);
  writer.writeString(offsets[111], object.onetimeInformation);
  writer.writeBool(offsets[112], object.onlineCheckIn);
  writer.writeBool(offsets[113], object.onlineCheckInImage);
  writer.writeBool(offsets[114], object.onlineCheckInSignature);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[115],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.onlineReservationUrl,
  );
  writer.writeDateTime(offsets[116], object.openDate);
  writer.writeBool(offsets[117], object.openForYear);
  writer.writeBool(offsets[118], object.operationSystem);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[119],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.opportunities,
  );
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[120],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.other1,
  );
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[121],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.other2,
  );
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[122],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.other3,
  );
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[123],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.other4,
  );
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[124],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.other5,
  );
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[125],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.other6,
  );
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[126],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.other7,
  );
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[127],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.other8,
  );
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[128],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.otherFacilities,
  );
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[129],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.otherServices,
  );
  writer.writeString(offsets[130], object.password);
  writer.writeString(offsets[131], object.phone);
  writer.writeString(offsets[132], object.photos);
  writer.writeString(offsets[133], object.placeId);
  writer.writeString(offsets[134], object.planImageUrl);
  writer.writeString(offsets[135], object.pmsApplication);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[136],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.poIs,
  );
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[137],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.pools,
  );
  writer.writeString(offsets[138], object.postCode);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[139],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.privacyPolicyLink,
  );
  writer.writeString(offsets[140], object.productType);
  writer.writeBool(offsets[141], object.qrReader);
  writer.writeDouble(offsets[142], object.rating);
  writer.writeDateTime(offsets[143], object.releaseDate);
  writer.writeString(offsets[144], object.reportDbScheme);
  writer.writeString(offsets[145], object.reservationMailAddress);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[146],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.restaurants,
  );
  writer.writeString(offsets[147], object.rewardCalculationType);
  writer.writeLong(offsets[148], object.rewardMinPoint);
  writer.writeLong(offsets[149], object.rewardValue);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[150],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.roomGuide,
  );
  writer.writeString(offsets[151], object.roomNumberValidationCode);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[152],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.roomServices,
  );
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[153],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.rooms,
  );
  writer.writeString(offsets[154], object.secondLevelAlertList);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[155],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.services,
  );
  writer.writeBool(offsets[156], object.showChat);
  writer.writeBool(offsets[157], object.showWelcome);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[158],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.shows,
  );
  writer.writeString(offsets[159], object.smFacebookUrl);
  writer.writeString(offsets[160], object.smInstagramUrl);
  writer.writeString(offsets[161], object.smTwitterUrl);
  writer.writeString(offsets[162], object.smVkontakteUrl);
  writer.writeString(offsets[163], object.smYoutubeUrl);
  writer.writeString(offsets[164], object.spCustomerRelation);
  writer.writeString(offsets[165], object.spDoctor);
  writer.writeString(offsets[166], object.spManagement);
  writer.writeString(offsets[167], object.spReception);
  writer.writeString(offsets[168], object.spRoomService);
  writer.writeString(offsets[169], object.spSpa);
  writer.writeString(offsets[170], object.spTechnicalService);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[171],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.spa,
  );
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[172],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.sport,
  );
  writer.writeBool(offsets[173], object.staffTracking);
  writer.writeString(offsets[174], object.subColor);
  writer.writeString(offsets[175], object.subDomainName);
  writer.writeDateTime(offsets[176], object.subscriptionEndDate);
  writer.writeDateTime(offsets[177], object.subscriptionStartDate);
  writer.writeString(offsets[178], object.surveyAddress);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[179],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.surveyDescription,
  );
  writer.writeObject<RSDataSurveyHeaderModel>(
    offsets[180],
    allOffsets,
    RSDataSurveyHeaderModelSchema.serialize,
    object.surveyHeader,
  );
  writer.writeLong(offsets[181], object.surveyHeaderId);
  writer.writeLong(offsets[182], object.surveyPoint);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[183],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.surveyTitle,
  );
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[184],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.surveyUrl,
  );
  writer.writeString(offsets[185], object.telegramNo);
  writer.writeString(offsets[186], object.thirdLevelAlertList);
  writer.writeString(offsets[187], object.timeZone);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[188],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.title,
  );
  writer.writeObjectList<RSDataMenuItemTitleAndDescriptionModel>(
    offsets[189],
    allOffsets,
    RSDataMenuItemTitleAndDescriptionModelSchema.serialize,
    object.titleAndDescriptions,
  );
  writer.writeLong(offsets[190], object.tokenExpireSeconds);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[191],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.tours,
  );
  writer.writeString(offsets[192], object.tripAdvisorLink);
  writer.writeDateTime(offsets[193], object.updatedAt);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[194],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.upsell,
  );
  writer.writeLong(offsets[195], object.upsellItemId);
  writer.writeString(offsets[196], object.viberNo);
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[197],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.video,
  );
  writer.writeString(offsets[198], object.virtualTourUrl);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[199],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.webSiteUrl,
  );
  writer.writeObject<RsDataMenuSectionModel>(
    offsets[200],
    allOffsets,
    RsDataMenuSectionModelSchema.serialize,
    object.wedding,
  );
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[201],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.welcomeMessage,
  );
  writer.writeString(offsets[202], object.whatsappNo);
  writer.writeString(offsets[203], object.wifiName);
  writer.writeString(offsets[204], object.wifiPassword);
  writer.writeString(offsets[205], object.yandexMetricaLink);
}

RSDataModel _rSDataModelDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = RSDataModel(
    accommodationContract: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[0],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    activated: reader.readBoolOrNull(offsets[1]),
    activity: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[2],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    address: reader.readStringOrNull(offsets[3]),
    amenities: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[4],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    apiAddress: reader.readStringOrNull(offsets[5]),
    appStoreLink: reader.readStringOrNull(offsets[6]),
    autoCreateProfile: reader.readBoolOrNull(offsets[7]),
    autoSendWelcomeMail: reader.readBoolOrNull(offsets[8]),
    avm: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[9],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    babyAgeRange: reader.readStringOrNull(offsets[10]),
    banner: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[11],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    bars: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[12],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    bingLink: reader.readStringOrNull(offsets[13]),
    cafes: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[14],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    callCenter: reader.readStringOrNull(offsets[15]),
    callForRequests: reader.readBoolOrNull(offsets[16]),
    checkInPostMessage: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[17],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    checkInSurveyId: reader.readLongOrNull(offsets[18]),
    checkOutSurveyId: reader.readLongOrNull(offsets[19]),
    childAgeRange: reader.readStringOrNull(offsets[20]),
    cinema: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[21],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    city: reader.readStringOrNull(offsets[22]),
    claimTrackingManager: reader.readBoolOrNull(offsets[23]),
    clientId: reader.readLongOrNull(offsets[24]),
    closeDate: reader.readDateTimeOrNull(offsets[25]),
    closeRequest: reader.readBoolOrNull(offsets[26]),
    complaint: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[27],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    contactEmail: reader.readStringOrNull(offsets[28]),
    contactName: reader.readStringOrNull(offsets[29]),
    contactPhone: reader.readStringOrNull(offsets[30]),
    country: reader.readStringOrNull(offsets[31]),
    createPowerBIdata: reader.readBoolOrNull(offsets[32]),
    createdAt: reader.readDateTimeOrNull(offsets[33]),
    currencyCode: reader.readStringOrNull(offsets[34]),
    dailyAnimations: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[35],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    deliveryDistanceType: reader.readStringOrNull(offsets[36]),
    deliveryTimeOfDay: reader.readStringOrNull(offsets[37]),
    description: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[38],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    directReservation: reader.readBoolOrNull(offsets[39]),
    email: reader.readStringOrNull(offsets[40]),
    entryDate: reader.readDateTimeOrNull(offsets[41]),
    events: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[42],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    facebookId: reader.readLongOrNull(offsets[43]),
    faq: reader.readObjectList<RSDataMenuItemTitleAndDescriptionModel>(
      offsets[44],
      RSDataMenuItemTitleAndDescriptionModelSchema.deserialize,
      allOffsets,
      RSDataMenuItemTitleAndDescriptionModel(),
    ),
    featured: reader.readObjectList<RSDataMenuItemsModel>(
      offsets[45],
      RSDataMenuItemsModelSchema.deserialize,
      allOffsets,
      RSDataMenuItemsModel(),
    ),
    firebaseLink: reader.readStringOrNull(offsets[46]),
    firstLevelAlertList: reader.readStringOrNull(offsets[47]),
    fourthLevelAlertList: reader.readStringOrNull(offsets[48]),
    frontOffice: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[49],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    giftCard: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[50],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    golfClub: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[51],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    googleAnalyticsLink: reader.readStringOrNull(offsets[52]),
    googleMapAddress: reader.readStringOrNull(offsets[53]),
    googlePlayLink: reader.readStringOrNull(offsets[54]),
    groupHotels: reader.readStringOrNull(offsets[55]),
    guestny: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[56],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    homePageDesigner: reader.readObjectList<RsDataHomePageDesignerModel>(
      offsets[57],
      RsDataHomePageDesignerModelSchema.deserialize,
      allOffsets,
      RsDataHomePageDesignerModel(),
    ),
    hotelChain: reader.readStringOrNull(offsets[58]),
    hotelInformationAr: reader.readStringOrNull(offsets[59]),
    hotelInformationDe: reader.readStringOrNull(offsets[60]),
    hotelInformationEn: reader.readStringOrNull(offsets[61]),
    hotelInformationEs: reader.readStringOrNull(offsets[62]),
    hotelInformationFr: reader.readStringOrNull(offsets[63]),
    hotelInformationIr: reader.readStringOrNull(offsets[64]),
    hotelInformationRu: reader.readStringOrNull(offsets[65]),
    hotelInformationTr: reader.readStringOrNull(offsets[66]),
    hotelLanguage: reader.readStringOrNull(offsets[67]),
    hotelToken: reader.readStringOrNull(offsets[68]),
    hotelTokenExpiredTime: reader.readDateTimeOrNull(offsets[69]),
    hotelType: reader.readStringOrNull(offsets[70]),
    houseKeepingPhone: reader.readStringOrNull(offsets[71]),
    housekeeping: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[72],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    icibotId: reader.readLongOrNull(offsets[73]),
    imageUrl: reader.readStringOrNull(offsets[74]),
    inHouseListLoginType: reader.readStringOrNull(offsets[75]),
    inHouseListMatchingCondition: reader.readStringOrNull(offsets[76]),
    isAccountVerifyNecessaryForRequest: reader.readBoolOrNull(offsets[77]),
    isClosedStaffChat: reader.readBoolOrNull(offsets[78]),
    isGiftCard: reader.readBoolOrNull(offsets[79]),
    isTaskDescriptionMandatory: reader.readBoolOrNull(offsets[80]),
    isTaskSolutionNoteMandatory: reader.readBoolOrNull(offsets[81]),
    issues: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[82],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    kidsClub: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[83],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    kvkkLink: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[84],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    languages: reader.readStringList(offsets[85]),
    latLng: reader.readStringOrNull(offsets[86]),
    life: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[87],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    loyalityManagement: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[88],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    loyaltyManagement: reader.readBoolOrNull(offsets[89]),
    mailVerificationForGuests: reader.readBoolOrNull(offsets[90]),
    malls: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[91],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    manuelGuestVisitConfirmation: reader.readBoolOrNull(offsets[92]),
    manuelRequestOwnerType: reader.readStringOrNull(offsets[93]),
    massage: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[94],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    masterColor: reader.readStringOrNull(offsets[95]),
    meetingRoom: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[96],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    messengerAddress: reader.readStringOrNull(offsets[97]),
    mice: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[98],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    mobilePayment: reader.readBoolOrNull(offsets[99]),
    mobilePublishBy: reader.readStringOrNull(offsets[100]),
    mobileVersion: reader.readLongOrNull(offsets[101]),
    mobileVersionPublishDate: reader.readDateTimeOrNull(offsets[102]),
    name: reader.readStringOrNull(offsets[103]),
    negativeSurveyAlertList: reader.readStringOrNull(offsets[104]),
    news: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[105],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    notificationPoint: reader.readLongOrNull(offsets[106]),
    oldAgeRange: reader.readStringOrNull(offsets[107]),
    oneSignalAppId: reader.readStringOrNull(offsets[108]),
    oneSignalAppKey: reader.readStringOrNull(offsets[109]),
    oneSignalUserKey: reader.readStringOrNull(offsets[110]),
    onetimeInformation: reader.readStringOrNull(offsets[111]),
    onlineCheckIn: reader.readBoolOrNull(offsets[112]),
    onlineCheckInImage: reader.readBoolOrNull(offsets[113]),
    onlineCheckInSignature: reader.readBoolOrNull(offsets[114]),
    onlineReservationUrl: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[115],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    openDate: reader.readDateTimeOrNull(offsets[116]),
    openForYear: reader.readBoolOrNull(offsets[117]),
    operationSystem: reader.readBoolOrNull(offsets[118]),
    opportunities: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[119],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    other1: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[120],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    other2: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[121],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    other3: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[122],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    other4: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[123],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    other5: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[124],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    other6: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[125],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    other7: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[126],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    other8: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[127],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    otherServices: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[129],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    password: reader.readStringOrNull(offsets[130]),
    phone: reader.readStringOrNull(offsets[131]),
    photos: reader.readStringOrNull(offsets[132]),
    placeId: reader.readStringOrNull(offsets[133]),
    planImageUrl: reader.readStringOrNull(offsets[134]),
    pmsApplication: reader.readStringOrNull(offsets[135]),
    poIs: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[136],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    pools: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[137],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    postCode: reader.readStringOrNull(offsets[138]),
    privacyPolicyLink: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[139],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    productType: reader.readStringOrNull(offsets[140]),
    qrReader: reader.readBoolOrNull(offsets[141]),
    rating: reader.readDoubleOrNull(offsets[142]),
    releaseDate: reader.readDateTimeOrNull(offsets[143]),
    reportDbScheme: reader.readStringOrNull(offsets[144]),
    reservationMailAddress: reader.readStringOrNull(offsets[145]),
    restaurants: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[146],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    rewardCalculationType: reader.readStringOrNull(offsets[147]),
    rewardMinPoint: reader.readLongOrNull(offsets[148]),
    rewardValue: reader.readLongOrNull(offsets[149]),
    roomGuide: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[150],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    roomNumberValidationCode: reader.readStringOrNull(offsets[151]),
    roomServices: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[152],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    rooms: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[153],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    secondLevelAlertList: reader.readStringOrNull(offsets[154]),
    services: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[155],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    showChat: reader.readBoolOrNull(offsets[156]),
    showWelcome: reader.readBoolOrNull(offsets[157]),
    shows: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[158],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    smFacebookUrl: reader.readStringOrNull(offsets[159]),
    smInstagramUrl: reader.readStringOrNull(offsets[160]),
    smTwitterUrl: reader.readStringOrNull(offsets[161]),
    smVkontakteUrl: reader.readStringOrNull(offsets[162]),
    smYoutubeUrl: reader.readStringOrNull(offsets[163]),
    spCustomerRelation: reader.readStringOrNull(offsets[164]),
    spDoctor: reader.readStringOrNull(offsets[165]),
    spManagement: reader.readStringOrNull(offsets[166]),
    spReception: reader.readStringOrNull(offsets[167]),
    spRoomService: reader.readStringOrNull(offsets[168]),
    spSpa: reader.readStringOrNull(offsets[169]),
    spTechnicalService: reader.readStringOrNull(offsets[170]),
    spa: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[171],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    sport: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[172],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    staffTracking: reader.readBoolOrNull(offsets[173]),
    subColor: reader.readStringOrNull(offsets[174]),
    subDomainName: reader.readStringOrNull(offsets[175]),
    subscriptionEndDate: reader.readDateTimeOrNull(offsets[176]),
    subscriptionStartDate: reader.readDateTimeOrNull(offsets[177]),
    surveyAddress: reader.readStringOrNull(offsets[178]),
    surveyDescription: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[179],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    surveyHeader: reader.readObjectOrNull<RSDataSurveyHeaderModel>(
      offsets[180],
      RSDataSurveyHeaderModelSchema.deserialize,
      allOffsets,
    ),
    surveyHeaderId: reader.readLongOrNull(offsets[181]),
    surveyPoint: reader.readLongOrNull(offsets[182]),
    surveyTitle: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[183],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    surveyUrl: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[184],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    telegramNo: reader.readStringOrNull(offsets[185]),
    thirdLevelAlertList: reader.readStringOrNull(offsets[186]),
    timeZone: reader.readStringOrNull(offsets[187]),
    title: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[188],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    titleAndDescriptions:
        reader.readObjectList<RSDataMenuItemTitleAndDescriptionModel>(
      offsets[189],
      RSDataMenuItemTitleAndDescriptionModelSchema.deserialize,
      allOffsets,
      RSDataMenuItemTitleAndDescriptionModel(),
    ),
    tokenExpireSeconds: reader.readLongOrNull(offsets[190]),
    tours: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[191],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    tripAdvisorLink: reader.readStringOrNull(offsets[192]),
    updatedAt: reader.readDateTimeOrNull(offsets[193]),
    upsell: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[194],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    upsellItemId: reader.readLongOrNull(offsets[195]),
    viberNo: reader.readStringOrNull(offsets[196]),
    video: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[197],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    virtualTourUrl: reader.readStringOrNull(offsets[198]),
    webSiteUrl: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[199],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    wedding: reader.readObjectOrNull<RsDataMenuSectionModel>(
      offsets[200],
      RsDataMenuSectionModelSchema.deserialize,
      allOffsets,
    ),
    welcomeMessage: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[201],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    whatsappNo: reader.readStringOrNull(offsets[202]),
    wifiName: reader.readStringOrNull(offsets[203]),
    wifiPassword: reader.readStringOrNull(offsets[204]),
    yandexMetricaLink: reader.readStringOrNull(offsets[205]),
  );
  object.id = id;
  object.otherFacilities = reader.readObjectOrNull<RsDataMenuSectionModel>(
    offsets[128],
    RsDataMenuSectionModelSchema.deserialize,
    allOffsets,
  );
  return object;
}

P _rSDataModelDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 1:
      return (reader.readBoolOrNull(offset)) as P;
    case 2:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 3:
      return (reader.readStringOrNull(offset)) as P;
    case 4:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 5:
      return (reader.readStringOrNull(offset)) as P;
    case 6:
      return (reader.readStringOrNull(offset)) as P;
    case 7:
      return (reader.readBoolOrNull(offset)) as P;
    case 8:
      return (reader.readBoolOrNull(offset)) as P;
    case 9:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 10:
      return (reader.readStringOrNull(offset)) as P;
    case 11:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 12:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 13:
      return (reader.readStringOrNull(offset)) as P;
    case 14:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 15:
      return (reader.readStringOrNull(offset)) as P;
    case 16:
      return (reader.readBoolOrNull(offset)) as P;
    case 17:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 18:
      return (reader.readLongOrNull(offset)) as P;
    case 19:
      return (reader.readLongOrNull(offset)) as P;
    case 20:
      return (reader.readStringOrNull(offset)) as P;
    case 21:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 22:
      return (reader.readStringOrNull(offset)) as P;
    case 23:
      return (reader.readBoolOrNull(offset)) as P;
    case 24:
      return (reader.readLongOrNull(offset)) as P;
    case 25:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 26:
      return (reader.readBoolOrNull(offset)) as P;
    case 27:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 28:
      return (reader.readStringOrNull(offset)) as P;
    case 29:
      return (reader.readStringOrNull(offset)) as P;
    case 30:
      return (reader.readStringOrNull(offset)) as P;
    case 31:
      return (reader.readStringOrNull(offset)) as P;
    case 32:
      return (reader.readBoolOrNull(offset)) as P;
    case 33:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 34:
      return (reader.readStringOrNull(offset)) as P;
    case 35:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 36:
      return (reader.readStringOrNull(offset)) as P;
    case 37:
      return (reader.readStringOrNull(offset)) as P;
    case 38:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 39:
      return (reader.readBoolOrNull(offset)) as P;
    case 40:
      return (reader.readStringOrNull(offset)) as P;
    case 41:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 42:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 43:
      return (reader.readLongOrNull(offset)) as P;
    case 44:
      return (reader.readObjectList<RSDataMenuItemTitleAndDescriptionModel>(
        offset,
        RSDataMenuItemTitleAndDescriptionModelSchema.deserialize,
        allOffsets,
        RSDataMenuItemTitleAndDescriptionModel(),
      )) as P;
    case 45:
      return (reader.readObjectList<RSDataMenuItemsModel>(
        offset,
        RSDataMenuItemsModelSchema.deserialize,
        allOffsets,
        RSDataMenuItemsModel(),
      )) as P;
    case 46:
      return (reader.readStringOrNull(offset)) as P;
    case 47:
      return (reader.readStringOrNull(offset)) as P;
    case 48:
      return (reader.readStringOrNull(offset)) as P;
    case 49:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 50:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 51:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 52:
      return (reader.readStringOrNull(offset)) as P;
    case 53:
      return (reader.readStringOrNull(offset)) as P;
    case 54:
      return (reader.readStringOrNull(offset)) as P;
    case 55:
      return (reader.readStringOrNull(offset)) as P;
    case 56:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 57:
      return (reader.readObjectList<RsDataHomePageDesignerModel>(
        offset,
        RsDataHomePageDesignerModelSchema.deserialize,
        allOffsets,
        RsDataHomePageDesignerModel(),
      )) as P;
    case 58:
      return (reader.readStringOrNull(offset)) as P;
    case 59:
      return (reader.readStringOrNull(offset)) as P;
    case 60:
      return (reader.readStringOrNull(offset)) as P;
    case 61:
      return (reader.readStringOrNull(offset)) as P;
    case 62:
      return (reader.readStringOrNull(offset)) as P;
    case 63:
      return (reader.readStringOrNull(offset)) as P;
    case 64:
      return (reader.readStringOrNull(offset)) as P;
    case 65:
      return (reader.readStringOrNull(offset)) as P;
    case 66:
      return (reader.readStringOrNull(offset)) as P;
    case 67:
      return (reader.readStringOrNull(offset)) as P;
    case 68:
      return (reader.readStringOrNull(offset)) as P;
    case 69:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 70:
      return (reader.readStringOrNull(offset)) as P;
    case 71:
      return (reader.readStringOrNull(offset)) as P;
    case 72:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 73:
      return (reader.readLongOrNull(offset)) as P;
    case 74:
      return (reader.readStringOrNull(offset)) as P;
    case 75:
      return (reader.readStringOrNull(offset)) as P;
    case 76:
      return (reader.readStringOrNull(offset)) as P;
    case 77:
      return (reader.readBoolOrNull(offset)) as P;
    case 78:
      return (reader.readBoolOrNull(offset)) as P;
    case 79:
      return (reader.readBoolOrNull(offset)) as P;
    case 80:
      return (reader.readBoolOrNull(offset)) as P;
    case 81:
      return (reader.readBoolOrNull(offset)) as P;
    case 82:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 83:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 84:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 85:
      return (reader.readStringList(offset)) as P;
    case 86:
      return (reader.readStringOrNull(offset)) as P;
    case 87:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 88:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 89:
      return (reader.readBoolOrNull(offset)) as P;
    case 90:
      return (reader.readBoolOrNull(offset)) as P;
    case 91:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 92:
      return (reader.readBoolOrNull(offset)) as P;
    case 93:
      return (reader.readStringOrNull(offset)) as P;
    case 94:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 95:
      return (reader.readStringOrNull(offset)) as P;
    case 96:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 97:
      return (reader.readStringOrNull(offset)) as P;
    case 98:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 99:
      return (reader.readBoolOrNull(offset)) as P;
    case 100:
      return (reader.readStringOrNull(offset)) as P;
    case 101:
      return (reader.readLongOrNull(offset)) as P;
    case 102:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 103:
      return (reader.readStringOrNull(offset)) as P;
    case 104:
      return (reader.readStringOrNull(offset)) as P;
    case 105:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 106:
      return (reader.readLongOrNull(offset)) as P;
    case 107:
      return (reader.readStringOrNull(offset)) as P;
    case 108:
      return (reader.readStringOrNull(offset)) as P;
    case 109:
      return (reader.readStringOrNull(offset)) as P;
    case 110:
      return (reader.readStringOrNull(offset)) as P;
    case 111:
      return (reader.readStringOrNull(offset)) as P;
    case 112:
      return (reader.readBoolOrNull(offset)) as P;
    case 113:
      return (reader.readBoolOrNull(offset)) as P;
    case 114:
      return (reader.readBoolOrNull(offset)) as P;
    case 115:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 116:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 117:
      return (reader.readBoolOrNull(offset)) as P;
    case 118:
      return (reader.readBoolOrNull(offset)) as P;
    case 119:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 120:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 121:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 122:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 123:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 124:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 125:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 126:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 127:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 128:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 129:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 130:
      return (reader.readStringOrNull(offset)) as P;
    case 131:
      return (reader.readStringOrNull(offset)) as P;
    case 132:
      return (reader.readStringOrNull(offset)) as P;
    case 133:
      return (reader.readStringOrNull(offset)) as P;
    case 134:
      return (reader.readStringOrNull(offset)) as P;
    case 135:
      return (reader.readStringOrNull(offset)) as P;
    case 136:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 137:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 138:
      return (reader.readStringOrNull(offset)) as P;
    case 139:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 140:
      return (reader.readStringOrNull(offset)) as P;
    case 141:
      return (reader.readBoolOrNull(offset)) as P;
    case 142:
      return (reader.readDoubleOrNull(offset)) as P;
    case 143:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 144:
      return (reader.readStringOrNull(offset)) as P;
    case 145:
      return (reader.readStringOrNull(offset)) as P;
    case 146:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 147:
      return (reader.readStringOrNull(offset)) as P;
    case 148:
      return (reader.readLongOrNull(offset)) as P;
    case 149:
      return (reader.readLongOrNull(offset)) as P;
    case 150:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 151:
      return (reader.readStringOrNull(offset)) as P;
    case 152:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 153:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 154:
      return (reader.readStringOrNull(offset)) as P;
    case 155:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 156:
      return (reader.readBoolOrNull(offset)) as P;
    case 157:
      return (reader.readBoolOrNull(offset)) as P;
    case 158:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 159:
      return (reader.readStringOrNull(offset)) as P;
    case 160:
      return (reader.readStringOrNull(offset)) as P;
    case 161:
      return (reader.readStringOrNull(offset)) as P;
    case 162:
      return (reader.readStringOrNull(offset)) as P;
    case 163:
      return (reader.readStringOrNull(offset)) as P;
    case 164:
      return (reader.readStringOrNull(offset)) as P;
    case 165:
      return (reader.readStringOrNull(offset)) as P;
    case 166:
      return (reader.readStringOrNull(offset)) as P;
    case 167:
      return (reader.readStringOrNull(offset)) as P;
    case 168:
      return (reader.readStringOrNull(offset)) as P;
    case 169:
      return (reader.readStringOrNull(offset)) as P;
    case 170:
      return (reader.readStringOrNull(offset)) as P;
    case 171:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 172:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 173:
      return (reader.readBoolOrNull(offset)) as P;
    case 174:
      return (reader.readStringOrNull(offset)) as P;
    case 175:
      return (reader.readStringOrNull(offset)) as P;
    case 176:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 177:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 178:
      return (reader.readStringOrNull(offset)) as P;
    case 179:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 180:
      return (reader.readObjectOrNull<RSDataSurveyHeaderModel>(
        offset,
        RSDataSurveyHeaderModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 181:
      return (reader.readLongOrNull(offset)) as P;
    case 182:
      return (reader.readLongOrNull(offset)) as P;
    case 183:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 184:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 185:
      return (reader.readStringOrNull(offset)) as P;
    case 186:
      return (reader.readStringOrNull(offset)) as P;
    case 187:
      return (reader.readStringOrNull(offset)) as P;
    case 188:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 189:
      return (reader.readObjectList<RSDataMenuItemTitleAndDescriptionModel>(
        offset,
        RSDataMenuItemTitleAndDescriptionModelSchema.deserialize,
        allOffsets,
        RSDataMenuItemTitleAndDescriptionModel(),
      )) as P;
    case 190:
      return (reader.readLongOrNull(offset)) as P;
    case 191:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 192:
      return (reader.readStringOrNull(offset)) as P;
    case 193:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 194:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 195:
      return (reader.readLongOrNull(offset)) as P;
    case 196:
      return (reader.readStringOrNull(offset)) as P;
    case 197:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 198:
      return (reader.readStringOrNull(offset)) as P;
    case 199:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 200:
      return (reader.readObjectOrNull<RsDataMenuSectionModel>(
        offset,
        RsDataMenuSectionModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 201:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 202:
      return (reader.readStringOrNull(offset)) as P;
    case 203:
      return (reader.readStringOrNull(offset)) as P;
    case 204:
      return (reader.readStringOrNull(offset)) as P;
    case 205:
      return (reader.readStringOrNull(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

Id _rSDataModelGetId(RSDataModel object) {
  return object.id;
}

List<IsarLinkBase<dynamic>> _rSDataModelGetLinks(RSDataModel object) {
  return [];
}

void _rSDataModelAttach(
    IsarCollection<dynamic> col, Id id, RSDataModel object) {
  object.id = id;
}

extension RSDataModelQueryWhereSort
    on QueryBuilder<RSDataModel, RSDataModel, QWhere> {
  QueryBuilder<RSDataModel, RSDataModel, QAfterWhere> anyId() {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(const IdWhereClause.any());
    });
  }
}

extension RSDataModelQueryWhere
    on QueryBuilder<RSDataModel, RSDataModel, QWhereClause> {
  QueryBuilder<RSDataModel, RSDataModel, QAfterWhereClause> idEqualTo(Id id) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(IdWhereClause.between(
        lower: id,
        upper: id,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterWhereClause> idNotEqualTo(
      Id id) {
    return QueryBuilder.apply(this, (query) {
      if (query.whereSort == Sort.asc) {
        return query
            .addWhereClause(
              IdWhereClause.lessThan(upper: id, includeUpper: false),
            )
            .addWhereClause(
              IdWhereClause.greaterThan(lower: id, includeLower: false),
            );
      } else {
        return query
            .addWhereClause(
              IdWhereClause.greaterThan(lower: id, includeLower: false),
            )
            .addWhereClause(
              IdWhereClause.lessThan(upper: id, includeUpper: false),
            );
      }
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterWhereClause> idGreaterThan(Id id,
      {bool include = false}) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(
        IdWhereClause.greaterThan(lower: id, includeLower: include),
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterWhereClause> idLessThan(Id id,
      {bool include = false}) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(
        IdWhereClause.lessThan(upper: id, includeUpper: include),
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterWhereClause> idBetween(
    Id lowerId,
    Id upperId, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(IdWhereClause.between(
        lower: lowerId,
        includeLower: includeLower,
        upper: upperId,
        includeUpper: includeUpper,
      ));
    });
  }
}

extension RSDataModelQueryFilter
    on QueryBuilder<RSDataModel, RSDataModel, QFilterCondition> {
  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      accommodationContractIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'accommodationContract',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      accommodationContractIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'accommodationContract',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      accommodationContractLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'accommodationContract',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      accommodationContractIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'accommodationContract',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      accommodationContractIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'accommodationContract',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      accommodationContractLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'accommodationContract',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      accommodationContractLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'accommodationContract',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      accommodationContractLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'accommodationContract',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      activatedIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'activated',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      activatedIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'activated',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      activatedEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'activated',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      activityIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'activity',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      activityIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'activity',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      addressIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'address',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      addressIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'address',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> addressEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'address',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      addressGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'address',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> addressLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'address',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> addressBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'address',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      addressStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'address',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> addressEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'address',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> addressContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'address',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> addressMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'address',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      addressIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'address',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      addressIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'address',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      amenitiesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'amenities',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      amenitiesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'amenities',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      apiAddressIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'apiAddress',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      apiAddressIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'apiAddress',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      apiAddressEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'apiAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      apiAddressGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'apiAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      apiAddressLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'apiAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      apiAddressBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'apiAddress',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      apiAddressStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'apiAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      apiAddressEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'apiAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      apiAddressContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'apiAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      apiAddressMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'apiAddress',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      apiAddressIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'apiAddress',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      apiAddressIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'apiAddress',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      appStoreLinkIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'appStoreLink',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      appStoreLinkIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'appStoreLink',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      appStoreLinkEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'appStoreLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      appStoreLinkGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'appStoreLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      appStoreLinkLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'appStoreLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      appStoreLinkBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'appStoreLink',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      appStoreLinkStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'appStoreLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      appStoreLinkEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'appStoreLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      appStoreLinkContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'appStoreLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      appStoreLinkMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'appStoreLink',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      appStoreLinkIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'appStoreLink',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      appStoreLinkIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'appStoreLink',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      autoCreateProfileIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'autoCreateProfile',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      autoCreateProfileIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'autoCreateProfile',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      autoCreateProfileEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'autoCreateProfile',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      autoSendWelcomeMailIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'autoSendWelcomeMail',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      autoSendWelcomeMailIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'autoSendWelcomeMail',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      autoSendWelcomeMailEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'autoSendWelcomeMail',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> avmIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'avm',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> avmIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'avm',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      babyAgeRangeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'babyAgeRange',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      babyAgeRangeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'babyAgeRange',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      babyAgeRangeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'babyAgeRange',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      babyAgeRangeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'babyAgeRange',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      babyAgeRangeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'babyAgeRange',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      babyAgeRangeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'babyAgeRange',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      babyAgeRangeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'babyAgeRange',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      babyAgeRangeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'babyAgeRange',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      babyAgeRangeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'babyAgeRange',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      babyAgeRangeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'babyAgeRange',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      babyAgeRangeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'babyAgeRange',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      babyAgeRangeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'babyAgeRange',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> bannerIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'banner',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      bannerIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'banner',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> barsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'bars',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      barsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'bars',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      bingLinkIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'bingLink',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      bingLinkIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'bingLink',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> bingLinkEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'bingLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      bingLinkGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'bingLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      bingLinkLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'bingLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> bingLinkBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'bingLink',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      bingLinkStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'bingLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      bingLinkEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'bingLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      bingLinkContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'bingLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> bingLinkMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'bingLink',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      bingLinkIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'bingLink',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      bingLinkIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'bingLink',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> cafesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'cafes',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      cafesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'cafes',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      callCenterIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'callCenter',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      callCenterIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'callCenter',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      callCenterEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'callCenter',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      callCenterGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'callCenter',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      callCenterLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'callCenter',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      callCenterBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'callCenter',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      callCenterStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'callCenter',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      callCenterEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'callCenter',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      callCenterContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'callCenter',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      callCenterMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'callCenter',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      callCenterIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'callCenter',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      callCenterIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'callCenter',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      callForRequestsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'callForRequests',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      callForRequestsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'callForRequests',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      callForRequestsEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'callForRequests',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkInPostMessageIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'checkInPostMessage',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkInPostMessageIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'checkInPostMessage',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkInPostMessageLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'checkInPostMessage',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkInPostMessageIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'checkInPostMessage',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkInPostMessageIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'checkInPostMessage',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkInPostMessageLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'checkInPostMessage',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkInPostMessageLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'checkInPostMessage',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkInPostMessageLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'checkInPostMessage',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkInSurveyIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'checkInSurveyId',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkInSurveyIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'checkInSurveyId',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkInSurveyIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'checkInSurveyId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkInSurveyIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'checkInSurveyId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkInSurveyIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'checkInSurveyId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkInSurveyIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'checkInSurveyId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkOutSurveyIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'checkOutSurveyId',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkOutSurveyIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'checkOutSurveyId',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkOutSurveyIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'checkOutSurveyId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkOutSurveyIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'checkOutSurveyId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkOutSurveyIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'checkOutSurveyId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkOutSurveyIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'checkOutSurveyId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      childAgeRangeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'childAgeRange',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      childAgeRangeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'childAgeRange',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      childAgeRangeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'childAgeRange',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      childAgeRangeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'childAgeRange',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      childAgeRangeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'childAgeRange',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      childAgeRangeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'childAgeRange',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      childAgeRangeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'childAgeRange',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      childAgeRangeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'childAgeRange',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      childAgeRangeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'childAgeRange',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      childAgeRangeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'childAgeRange',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      childAgeRangeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'childAgeRange',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      childAgeRangeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'childAgeRange',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> cinemaIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'cinema',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      cinemaIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'cinema',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> cityIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'city',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      cityIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'city',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> cityEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'city',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> cityGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'city',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> cityLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'city',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> cityBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'city',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> cityStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'city',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> cityEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'city',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> cityContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'city',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> cityMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'city',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> cityIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'city',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      cityIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'city',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      claimTrackingManagerIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'claimTrackingManager',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      claimTrackingManagerIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'claimTrackingManager',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      claimTrackingManagerEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'claimTrackingManager',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      clientIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'clientId',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      clientIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'clientId',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> clientIdEqualTo(
      int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'clientId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      clientIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'clientId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      clientIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'clientId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> clientIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'clientId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      closeDateIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'closeDate',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      closeDateIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'closeDate',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      closeDateEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'closeDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      closeDateGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'closeDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      closeDateLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'closeDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      closeDateBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'closeDate',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      closeRequestIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'closeRequest',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      closeRequestIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'closeRequest',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      closeRequestEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'closeRequest',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      complaintIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'complaint',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      complaintIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'complaint',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactEmailIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'contactEmail',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactEmailIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'contactEmail',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactEmailEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'contactEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactEmailGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'contactEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactEmailLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'contactEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactEmailBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'contactEmail',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactEmailStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'contactEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactEmailEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'contactEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactEmailContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'contactEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactEmailMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'contactEmail',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactEmailIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'contactEmail',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactEmailIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'contactEmail',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactNameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'contactName',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactNameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'contactName',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactNameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'contactName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactNameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'contactName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactNameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'contactName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactNameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'contactName',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactNameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'contactName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactNameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'contactName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactNameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'contactName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactNameMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'contactName',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactNameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'contactName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactNameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'contactName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactPhoneIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'contactPhone',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactPhoneIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'contactPhone',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactPhoneEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'contactPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactPhoneGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'contactPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactPhoneLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'contactPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactPhoneBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'contactPhone',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactPhoneStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'contactPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactPhoneEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'contactPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactPhoneContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'contactPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactPhoneMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'contactPhone',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactPhoneIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'contactPhone',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      contactPhoneIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'contactPhone',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      countryIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'country',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      countryIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'country',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> countryEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'country',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      countryGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'country',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> countryLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'country',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> countryBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'country',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      countryStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'country',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> countryEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'country',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> countryContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'country',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> countryMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'country',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      countryIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'country',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      countryIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'country',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      createPowerBIdataIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'createPowerBIdata',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      createPowerBIdataIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'createPowerBIdata',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      createPowerBIdataEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'createPowerBIdata',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      createdAtIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'createdAt',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      createdAtIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'createdAt',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      createdAtEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      createdAtGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      createdAtLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      createdAtBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'createdAt',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      currencyCodeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'currencyCode',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      currencyCodeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'currencyCode',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      currencyCodeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'currencyCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      currencyCodeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'currencyCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      currencyCodeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'currencyCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      currencyCodeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'currencyCode',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      currencyCodeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'currencyCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      currencyCodeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'currencyCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      currencyCodeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'currencyCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      currencyCodeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'currencyCode',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      currencyCodeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'currencyCode',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      currencyCodeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'currencyCode',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      dailyAnimationsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'dailyAnimations',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      dailyAnimationsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'dailyAnimations',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryDistanceTypeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'deliveryDistanceType',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryDistanceTypeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'deliveryDistanceType',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryDistanceTypeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deliveryDistanceType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryDistanceTypeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'deliveryDistanceType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryDistanceTypeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'deliveryDistanceType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryDistanceTypeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'deliveryDistanceType',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryDistanceTypeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'deliveryDistanceType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryDistanceTypeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'deliveryDistanceType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryDistanceTypeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'deliveryDistanceType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryDistanceTypeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'deliveryDistanceType',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryDistanceTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deliveryDistanceType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryDistanceTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'deliveryDistanceType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryTimeOfDayIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'deliveryTimeOfDay',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryTimeOfDayIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'deliveryTimeOfDay',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryTimeOfDayEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deliveryTimeOfDay',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryTimeOfDayGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'deliveryTimeOfDay',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryTimeOfDayLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'deliveryTimeOfDay',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryTimeOfDayBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'deliveryTimeOfDay',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryTimeOfDayStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'deliveryTimeOfDay',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryTimeOfDayEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'deliveryTimeOfDay',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryTimeOfDayContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'deliveryTimeOfDay',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryTimeOfDayMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'deliveryTimeOfDay',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryTimeOfDayIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deliveryTimeOfDay',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      deliveryTimeOfDayIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'deliveryTimeOfDay',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      descriptionIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'description',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      descriptionIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'description',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      descriptionLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      descriptionIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      descriptionIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      descriptionLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      descriptionLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      descriptionLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      directReservationIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'directReservation',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      directReservationIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'directReservation',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      directReservationEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'directReservation',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> emailIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'email',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      emailIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'email',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> emailEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      emailGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> emailLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> emailBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'email',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> emailStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> emailEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> emailContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> emailMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'email',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> emailIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'email',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      emailIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'email',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      entryDateIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'entryDate',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      entryDateIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'entryDate',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      entryDateEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'entryDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      entryDateGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'entryDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      entryDateLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'entryDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      entryDateBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'entryDate',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> eventsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'events',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      eventsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'events',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      facebookIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'facebookId',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      facebookIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'facebookId',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      facebookIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'facebookId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      facebookIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'facebookId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      facebookIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'facebookId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      facebookIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'facebookId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> faqIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'faq',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> faqIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'faq',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      faqLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'faq',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> faqIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'faq',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      faqIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'faq',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      faqLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'faq',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      faqLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'faq',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      faqLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'faq',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      featuredIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'featured',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      featuredIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'featured',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      featuredLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'featured',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      featuredIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'featured',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      featuredIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'featured',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      featuredLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'featured',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      featuredLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'featured',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      featuredLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'featured',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firebaseLinkIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'firebaseLink',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firebaseLinkIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'firebaseLink',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firebaseLinkEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'firebaseLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firebaseLinkGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'firebaseLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firebaseLinkLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'firebaseLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firebaseLinkBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'firebaseLink',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firebaseLinkStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'firebaseLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firebaseLinkEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'firebaseLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firebaseLinkContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'firebaseLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firebaseLinkMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'firebaseLink',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firebaseLinkIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'firebaseLink',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firebaseLinkIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'firebaseLink',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firstLevelAlertListIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'firstLevelAlertList',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firstLevelAlertListIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'firstLevelAlertList',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firstLevelAlertListEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'firstLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firstLevelAlertListGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'firstLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firstLevelAlertListLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'firstLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firstLevelAlertListBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'firstLevelAlertList',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firstLevelAlertListStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'firstLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firstLevelAlertListEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'firstLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firstLevelAlertListContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'firstLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firstLevelAlertListMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'firstLevelAlertList',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firstLevelAlertListIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'firstLevelAlertList',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      firstLevelAlertListIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'firstLevelAlertList',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      fourthLevelAlertListIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'fourthLevelAlertList',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      fourthLevelAlertListIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'fourthLevelAlertList',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      fourthLevelAlertListEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'fourthLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      fourthLevelAlertListGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'fourthLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      fourthLevelAlertListLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'fourthLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      fourthLevelAlertListBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'fourthLevelAlertList',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      fourthLevelAlertListStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'fourthLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      fourthLevelAlertListEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'fourthLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      fourthLevelAlertListContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'fourthLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      fourthLevelAlertListMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'fourthLevelAlertList',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      fourthLevelAlertListIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'fourthLevelAlertList',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      fourthLevelAlertListIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'fourthLevelAlertList',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      frontOfficeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'frontOffice',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      frontOfficeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'frontOffice',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      giftCardIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'giftCard',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      giftCardIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'giftCard',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      golfClubIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'golfClub',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      golfClubIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'golfClub',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleAnalyticsLinkIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'googleAnalyticsLink',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleAnalyticsLinkIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'googleAnalyticsLink',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleAnalyticsLinkEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'googleAnalyticsLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleAnalyticsLinkGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'googleAnalyticsLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleAnalyticsLinkLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'googleAnalyticsLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleAnalyticsLinkBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'googleAnalyticsLink',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleAnalyticsLinkStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'googleAnalyticsLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleAnalyticsLinkEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'googleAnalyticsLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleAnalyticsLinkContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'googleAnalyticsLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleAnalyticsLinkMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'googleAnalyticsLink',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleAnalyticsLinkIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'googleAnalyticsLink',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleAnalyticsLinkIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'googleAnalyticsLink',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleMapAddressIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'googleMapAddress',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleMapAddressIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'googleMapAddress',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleMapAddressEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'googleMapAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleMapAddressGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'googleMapAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleMapAddressLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'googleMapAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleMapAddressBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'googleMapAddress',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleMapAddressStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'googleMapAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleMapAddressEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'googleMapAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleMapAddressContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'googleMapAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleMapAddressMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'googleMapAddress',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleMapAddressIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'googleMapAddress',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googleMapAddressIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'googleMapAddress',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googlePlayLinkIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'googlePlayLink',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googlePlayLinkIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'googlePlayLink',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googlePlayLinkEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'googlePlayLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googlePlayLinkGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'googlePlayLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googlePlayLinkLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'googlePlayLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googlePlayLinkBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'googlePlayLink',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googlePlayLinkStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'googlePlayLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googlePlayLinkEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'googlePlayLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googlePlayLinkContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'googlePlayLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googlePlayLinkMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'googlePlayLink',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googlePlayLinkIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'googlePlayLink',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      googlePlayLinkIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'googlePlayLink',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      groupHotelsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'groupHotels',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      groupHotelsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'groupHotels',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      groupHotelsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'groupHotels',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      groupHotelsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'groupHotels',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      groupHotelsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'groupHotels',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      groupHotelsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'groupHotels',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      groupHotelsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'groupHotels',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      groupHotelsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'groupHotels',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      groupHotelsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'groupHotels',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      groupHotelsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'groupHotels',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      groupHotelsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'groupHotels',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      groupHotelsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'groupHotels',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      guestnyIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'guestny',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      guestnyIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'guestny',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      homePageDesignerIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'homePageDesigner',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      homePageDesignerIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'homePageDesigner',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      homePageDesignerLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'homePageDesigner',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      homePageDesignerIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'homePageDesigner',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      homePageDesignerIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'homePageDesigner',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      homePageDesignerLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'homePageDesigner',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      homePageDesignerLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'homePageDesigner',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      homePageDesignerLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'homePageDesigner',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelChainIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelChain',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelChainIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelChain',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelChainEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelChain',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelChainGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelChain',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelChainLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelChain',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelChainBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelChain',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelChainStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'hotelChain',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelChainEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'hotelChain',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelChainContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'hotelChain',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelChainMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'hotelChain',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelChainIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelChain',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelChainIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'hotelChain',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationArIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelInformationAr',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationArIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelInformationAr',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationArEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelInformationAr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationArGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelInformationAr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationArLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelInformationAr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationArBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelInformationAr',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationArStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'hotelInformationAr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationArEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'hotelInformationAr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationArContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'hotelInformationAr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationArMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'hotelInformationAr',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationArIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelInformationAr',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationArIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'hotelInformationAr',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationDeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelInformationDe',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationDeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelInformationDe',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationDeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelInformationDe',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationDeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelInformationDe',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationDeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelInformationDe',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationDeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelInformationDe',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationDeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'hotelInformationDe',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationDeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'hotelInformationDe',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationDeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'hotelInformationDe',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationDeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'hotelInformationDe',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationDeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelInformationDe',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationDeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'hotelInformationDe',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEnIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelInformationEn',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEnIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelInformationEn',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEnEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelInformationEn',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEnGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelInformationEn',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEnLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelInformationEn',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEnBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelInformationEn',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEnStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'hotelInformationEn',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEnEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'hotelInformationEn',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEnContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'hotelInformationEn',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEnMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'hotelInformationEn',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEnIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelInformationEn',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEnIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'hotelInformationEn',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelInformationEs',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelInformationEs',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelInformationEs',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelInformationEs',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelInformationEs',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelInformationEs',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'hotelInformationEs',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'hotelInformationEs',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'hotelInformationEs',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'hotelInformationEs',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelInformationEs',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationEsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'hotelInformationEs',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationFrIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelInformationFr',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationFrIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelInformationFr',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationFrEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelInformationFr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationFrGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelInformationFr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationFrLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelInformationFr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationFrBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelInformationFr',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationFrStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'hotelInformationFr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationFrEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'hotelInformationFr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationFrContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'hotelInformationFr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationFrMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'hotelInformationFr',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationFrIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelInformationFr',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationFrIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'hotelInformationFr',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationIrIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelInformationIr',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationIrIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelInformationIr',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationIrEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelInformationIr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationIrGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelInformationIr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationIrLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelInformationIr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationIrBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelInformationIr',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationIrStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'hotelInformationIr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationIrEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'hotelInformationIr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationIrContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'hotelInformationIr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationIrMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'hotelInformationIr',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationIrIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelInformationIr',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationIrIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'hotelInformationIr',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationRuIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelInformationRu',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationRuIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelInformationRu',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationRuEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelInformationRu',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationRuGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelInformationRu',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationRuLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelInformationRu',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationRuBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelInformationRu',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationRuStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'hotelInformationRu',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationRuEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'hotelInformationRu',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationRuContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'hotelInformationRu',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationRuMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'hotelInformationRu',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationRuIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelInformationRu',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationRuIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'hotelInformationRu',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationTrIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelInformationTr',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationTrIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelInformationTr',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationTrEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelInformationTr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationTrGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelInformationTr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationTrLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelInformationTr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationTrBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelInformationTr',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationTrStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'hotelInformationTr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationTrEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'hotelInformationTr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationTrContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'hotelInformationTr',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationTrMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'hotelInformationTr',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationTrIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelInformationTr',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelInformationTrIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'hotelInformationTr',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelLanguageIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelLanguage',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelLanguageIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelLanguage',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelLanguageEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelLanguage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelLanguageGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelLanguage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelLanguageLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelLanguage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelLanguageBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelLanguage',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelLanguageStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'hotelLanguage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelLanguageEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'hotelLanguage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelLanguageContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'hotelLanguage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelLanguageMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'hotelLanguage',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelLanguageIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelLanguage',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelLanguageIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'hotelLanguage',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTokenIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelToken',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTokenIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelToken',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTokenEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelToken',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTokenGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelToken',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTokenLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelToken',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTokenBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelToken',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTokenStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'hotelToken',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTokenEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'hotelToken',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTokenContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'hotelToken',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTokenMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'hotelToken',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTokenIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelToken',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTokenIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'hotelToken',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTokenExpiredTimeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelTokenExpiredTime',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTokenExpiredTimeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelTokenExpiredTime',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTokenExpiredTimeEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelTokenExpiredTime',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTokenExpiredTimeGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelTokenExpiredTime',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTokenExpiredTimeLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelTokenExpiredTime',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTokenExpiredTimeBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelTokenExpiredTime',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTypeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelType',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTypeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelType',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTypeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTypeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTypeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTypeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelType',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTypeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'hotelType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTypeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'hotelType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTypeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'hotelType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTypeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'hotelType',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      hotelTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'hotelType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      houseKeepingPhoneIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'houseKeepingPhone',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      houseKeepingPhoneIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'houseKeepingPhone',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      houseKeepingPhoneEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'houseKeepingPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      houseKeepingPhoneGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'houseKeepingPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      houseKeepingPhoneLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'houseKeepingPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      houseKeepingPhoneBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'houseKeepingPhone',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      houseKeepingPhoneStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'houseKeepingPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      houseKeepingPhoneEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'houseKeepingPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      houseKeepingPhoneContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'houseKeepingPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      houseKeepingPhoneMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'houseKeepingPhone',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      houseKeepingPhoneIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'houseKeepingPhone',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      houseKeepingPhoneIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'houseKeepingPhone',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      housekeepingIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'housekeeping',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      housekeepingIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'housekeeping',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      icibotIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'icibotId',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      icibotIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'icibotId',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> icibotIdEqualTo(
      int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      icibotIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      icibotIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> icibotIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'icibotId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> idEqualTo(
      Id value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> idGreaterThan(
    Id value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> idLessThan(
    Id value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> idBetween(
    Id lower,
    Id upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'id',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      imageUrlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'imageUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      imageUrlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'imageUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> imageUrlEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      imageUrlGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      imageUrlLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> imageUrlBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'imageUrl',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      imageUrlStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      imageUrlEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      imageUrlContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> imageUrlMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'imageUrl',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      imageUrlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'imageUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      imageUrlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'imageUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListLoginTypeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'inHouseListLoginType',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListLoginTypeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'inHouseListLoginType',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListLoginTypeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'inHouseListLoginType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListLoginTypeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'inHouseListLoginType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListLoginTypeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'inHouseListLoginType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListLoginTypeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'inHouseListLoginType',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListLoginTypeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'inHouseListLoginType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListLoginTypeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'inHouseListLoginType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListLoginTypeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'inHouseListLoginType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListLoginTypeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'inHouseListLoginType',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListLoginTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'inHouseListLoginType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListLoginTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'inHouseListLoginType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListMatchingConditionIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'inHouseListMatchingCondition',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListMatchingConditionIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'inHouseListMatchingCondition',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListMatchingConditionEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'inHouseListMatchingCondition',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListMatchingConditionGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'inHouseListMatchingCondition',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListMatchingConditionLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'inHouseListMatchingCondition',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListMatchingConditionBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'inHouseListMatchingCondition',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListMatchingConditionStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'inHouseListMatchingCondition',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListMatchingConditionEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'inHouseListMatchingCondition',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListMatchingConditionContains(String value,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'inHouseListMatchingCondition',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListMatchingConditionMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'inHouseListMatchingCondition',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListMatchingConditionIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'inHouseListMatchingCondition',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      inHouseListMatchingConditionIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'inHouseListMatchingCondition',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      isAccountVerifyNecessaryForRequestIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'isAccountVerifyNecessaryForRequest',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      isAccountVerifyNecessaryForRequestIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'isAccountVerifyNecessaryForRequest',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      isAccountVerifyNecessaryForRequestEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isAccountVerifyNecessaryForRequest',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      isClosedStaffChatIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'isClosedStaffChat',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      isClosedStaffChatIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'isClosedStaffChat',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      isClosedStaffChatEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isClosedStaffChat',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      isGiftCardIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'isGiftCard',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      isGiftCardIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'isGiftCard',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      isGiftCardEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isGiftCard',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      isTaskDescriptionMandatoryIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'isTaskDescriptionMandatory',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      isTaskDescriptionMandatoryIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'isTaskDescriptionMandatory',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      isTaskDescriptionMandatoryEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isTaskDescriptionMandatory',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      isTaskSolutionNoteMandatoryIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'isTaskSolutionNoteMandatory',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      isTaskSolutionNoteMandatoryIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'isTaskSolutionNoteMandatory',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      isTaskSolutionNoteMandatoryEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isTaskSolutionNoteMandatory',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> issuesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'issues',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      issuesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'issues',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      kidsClubIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'kidsClub',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      kidsClubIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'kidsClub',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      kvkkLinkIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'kvkkLink',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      kvkkLinkIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'kvkkLink',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      kvkkLinkLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'kvkkLink',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      kvkkLinkIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'kvkkLink',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      kvkkLinkIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'kvkkLink',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      kvkkLinkLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'kvkkLink',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      kvkkLinkLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'kvkkLink',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      kvkkLinkLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'kvkkLink',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      languagesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'languages',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      languagesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'languages',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      languagesElementEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'languages',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      languagesElementGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'languages',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      languagesElementLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'languages',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      languagesElementBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'languages',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      languagesElementStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'languages',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      languagesElementEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'languages',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      languagesElementContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'languages',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      languagesElementMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'languages',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      languagesElementIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'languages',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      languagesElementIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'languages',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      languagesLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'languages',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      languagesIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'languages',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      languagesIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'languages',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      languagesLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'languages',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      languagesLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'languages',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      languagesLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'languages',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> latLngIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'latLng',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      latLngIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'latLng',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> latLngEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'latLng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      latLngGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'latLng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> latLngLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'latLng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> latLngBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'latLng',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      latLngStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'latLng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> latLngEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'latLng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> latLngContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'latLng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> latLngMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'latLng',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      latLngIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'latLng',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      latLngIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'latLng',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> lifeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'life',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      lifeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'life',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      loyalityManagementIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'loyalityManagement',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      loyalityManagementIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'loyalityManagement',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      loyaltyManagementIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'loyaltyManagement',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      loyaltyManagementIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'loyaltyManagement',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      loyaltyManagementEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'loyaltyManagement',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mailVerificationForGuestsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'mailVerificationForGuests',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mailVerificationForGuestsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'mailVerificationForGuests',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mailVerificationForGuestsEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'mailVerificationForGuests',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> mallsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'malls',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mallsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'malls',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      manuelGuestVisitConfirmationIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'manuelGuestVisitConfirmation',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      manuelGuestVisitConfirmationIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'manuelGuestVisitConfirmation',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      manuelGuestVisitConfirmationEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'manuelGuestVisitConfirmation',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      manuelRequestOwnerTypeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'manuelRequestOwnerType',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      manuelRequestOwnerTypeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'manuelRequestOwnerType',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      manuelRequestOwnerTypeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'manuelRequestOwnerType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      manuelRequestOwnerTypeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'manuelRequestOwnerType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      manuelRequestOwnerTypeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'manuelRequestOwnerType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      manuelRequestOwnerTypeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'manuelRequestOwnerType',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      manuelRequestOwnerTypeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'manuelRequestOwnerType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      manuelRequestOwnerTypeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'manuelRequestOwnerType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      manuelRequestOwnerTypeContains(String value,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'manuelRequestOwnerType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      manuelRequestOwnerTypeMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'manuelRequestOwnerType',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      manuelRequestOwnerTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'manuelRequestOwnerType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      manuelRequestOwnerTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'manuelRequestOwnerType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      massageIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'massage',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      massageIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'massage',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      masterColorIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'masterColor',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      masterColorIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'masterColor',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      masterColorEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'masterColor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      masterColorGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'masterColor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      masterColorLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'masterColor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      masterColorBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'masterColor',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      masterColorStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'masterColor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      masterColorEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'masterColor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      masterColorContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'masterColor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      masterColorMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'masterColor',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      masterColorIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'masterColor',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      masterColorIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'masterColor',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      meetingRoomIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'meetingRoom',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      meetingRoomIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'meetingRoom',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      messengerAddressIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'messengerAddress',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      messengerAddressIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'messengerAddress',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      messengerAddressEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'messengerAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      messengerAddressGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'messengerAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      messengerAddressLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'messengerAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      messengerAddressBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'messengerAddress',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      messengerAddressStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'messengerAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      messengerAddressEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'messengerAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      messengerAddressContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'messengerAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      messengerAddressMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'messengerAddress',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      messengerAddressIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'messengerAddress',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      messengerAddressIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'messengerAddress',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> miceIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'mice',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      miceIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'mice',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobilePaymentIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'mobilePayment',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobilePaymentIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'mobilePayment',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobilePaymentEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'mobilePayment',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobilePublishByIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'mobilePublishBy',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobilePublishByIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'mobilePublishBy',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobilePublishByEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'mobilePublishBy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobilePublishByGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'mobilePublishBy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobilePublishByLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'mobilePublishBy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobilePublishByBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'mobilePublishBy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobilePublishByStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'mobilePublishBy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobilePublishByEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'mobilePublishBy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobilePublishByContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'mobilePublishBy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobilePublishByMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'mobilePublishBy',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobilePublishByIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'mobilePublishBy',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobilePublishByIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'mobilePublishBy',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobileVersionIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'mobileVersion',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobileVersionIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'mobileVersion',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobileVersionEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'mobileVersion',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobileVersionGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'mobileVersion',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobileVersionLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'mobileVersion',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobileVersionBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'mobileVersion',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobileVersionPublishDateIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'mobileVersionPublishDate',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobileVersionPublishDateIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'mobileVersionPublishDate',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobileVersionPublishDateEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'mobileVersionPublishDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobileVersionPublishDateGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'mobileVersionPublishDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobileVersionPublishDateLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'mobileVersionPublishDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      mobileVersionPublishDateBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'mobileVersionPublishDate',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> nameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      nameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> nameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> nameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> nameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> nameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'name',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> nameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> nameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> nameContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> nameMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'name',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> nameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'name',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      nameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'name',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      negativeSurveyAlertListIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'negativeSurveyAlertList',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      negativeSurveyAlertListIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'negativeSurveyAlertList',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      negativeSurveyAlertListEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'negativeSurveyAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      negativeSurveyAlertListGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'negativeSurveyAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      negativeSurveyAlertListLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'negativeSurveyAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      negativeSurveyAlertListBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'negativeSurveyAlertList',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      negativeSurveyAlertListStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'negativeSurveyAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      negativeSurveyAlertListEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'negativeSurveyAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      negativeSurveyAlertListContains(String value,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'negativeSurveyAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      negativeSurveyAlertListMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'negativeSurveyAlertList',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      negativeSurveyAlertListIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'negativeSurveyAlertList',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      negativeSurveyAlertListIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'negativeSurveyAlertList',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> newsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'news',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      newsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'news',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      notificationPointIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'notificationPoint',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      notificationPointIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'notificationPoint',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      notificationPointEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'notificationPoint',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      notificationPointGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'notificationPoint',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      notificationPointLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'notificationPoint',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      notificationPointBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'notificationPoint',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oldAgeRangeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'oldAgeRange',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oldAgeRangeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'oldAgeRange',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oldAgeRangeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'oldAgeRange',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oldAgeRangeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'oldAgeRange',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oldAgeRangeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'oldAgeRange',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oldAgeRangeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'oldAgeRange',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oldAgeRangeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'oldAgeRange',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oldAgeRangeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'oldAgeRange',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oldAgeRangeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'oldAgeRange',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oldAgeRangeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'oldAgeRange',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oldAgeRangeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'oldAgeRange',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oldAgeRangeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'oldAgeRange',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'oneSignalAppId',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'oneSignalAppId',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'oneSignalAppId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'oneSignalAppId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'oneSignalAppId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'oneSignalAppId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'oneSignalAppId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'oneSignalAppId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'oneSignalAppId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'oneSignalAppId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'oneSignalAppId',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'oneSignalAppId',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppKeyIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'oneSignalAppKey',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppKeyIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'oneSignalAppKey',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppKeyEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'oneSignalAppKey',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppKeyGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'oneSignalAppKey',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppKeyLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'oneSignalAppKey',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppKeyBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'oneSignalAppKey',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppKeyStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'oneSignalAppKey',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppKeyEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'oneSignalAppKey',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppKeyContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'oneSignalAppKey',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppKeyMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'oneSignalAppKey',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppKeyIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'oneSignalAppKey',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalAppKeyIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'oneSignalAppKey',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalUserKeyIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'oneSignalUserKey',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalUserKeyIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'oneSignalUserKey',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalUserKeyEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'oneSignalUserKey',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalUserKeyGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'oneSignalUserKey',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalUserKeyLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'oneSignalUserKey',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalUserKeyBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'oneSignalUserKey',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalUserKeyStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'oneSignalUserKey',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalUserKeyEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'oneSignalUserKey',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalUserKeyContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'oneSignalUserKey',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalUserKeyMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'oneSignalUserKey',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalUserKeyIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'oneSignalUserKey',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      oneSignalUserKeyIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'oneSignalUserKey',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onetimeInformationIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'onetimeInformation',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onetimeInformationIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'onetimeInformation',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onetimeInformationEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'onetimeInformation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onetimeInformationGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'onetimeInformation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onetimeInformationLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'onetimeInformation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onetimeInformationBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'onetimeInformation',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onetimeInformationStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'onetimeInformation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onetimeInformationEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'onetimeInformation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onetimeInformationContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'onetimeInformation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onetimeInformationMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'onetimeInformation',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onetimeInformationIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'onetimeInformation',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onetimeInformationIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'onetimeInformation',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onlineCheckInIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'onlineCheckIn',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onlineCheckInIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'onlineCheckIn',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onlineCheckInEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'onlineCheckIn',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onlineCheckInImageIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'onlineCheckInImage',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onlineCheckInImageIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'onlineCheckInImage',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onlineCheckInImageEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'onlineCheckInImage',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onlineCheckInSignatureIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'onlineCheckInSignature',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onlineCheckInSignatureIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'onlineCheckInSignature',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onlineCheckInSignatureEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'onlineCheckInSignature',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onlineReservationUrlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'onlineReservationUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onlineReservationUrlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'onlineReservationUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onlineReservationUrlLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'onlineReservationUrl',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onlineReservationUrlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'onlineReservationUrl',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onlineReservationUrlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'onlineReservationUrl',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onlineReservationUrlLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'onlineReservationUrl',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onlineReservationUrlLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'onlineReservationUrl',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onlineReservationUrlLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'onlineReservationUrl',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      openDateIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'openDate',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      openDateIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'openDate',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> openDateEqualTo(
      DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'openDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      openDateGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'openDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      openDateLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'openDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> openDateBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'openDate',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      openForYearIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'openForYear',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      openForYearIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'openForYear',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      openForYearEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'openForYear',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      operationSystemIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'operationSystem',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      operationSystemIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'operationSystem',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      operationSystemEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'operationSystem',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      opportunitiesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'opportunities',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      opportunitiesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'opportunities',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> other1IsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'other1',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      other1IsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'other1',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> other2IsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'other2',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      other2IsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'other2',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> other3IsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'other3',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      other3IsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'other3',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> other4IsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'other4',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      other4IsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'other4',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> other5IsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'other5',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      other5IsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'other5',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> other6IsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'other6',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      other6IsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'other6',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> other7IsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'other7',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      other7IsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'other7',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> other8IsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'other8',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      other8IsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'other8',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      otherFacilitiesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'otherFacilities',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      otherFacilitiesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'otherFacilities',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      otherServicesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'otherServices',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      otherServicesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'otherServices',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      passwordIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'password',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      passwordIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'password',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> passwordEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'password',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      passwordGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'password',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      passwordLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'password',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> passwordBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'password',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      passwordStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'password',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      passwordEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'password',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      passwordContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'password',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> passwordMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'password',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      passwordIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'password',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      passwordIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'password',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> phoneIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'phone',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      phoneIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'phone',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> phoneEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'phone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      phoneGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'phone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> phoneLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'phone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> phoneBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'phone',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> phoneStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'phone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> phoneEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'phone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> phoneContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'phone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> phoneMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'phone',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> phoneIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'phone',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      phoneIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'phone',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> photosIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'photos',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      photosIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'photos',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> photosEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'photos',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      photosGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'photos',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> photosLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'photos',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> photosBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'photos',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      photosStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'photos',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> photosEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'photos',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> photosContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'photos',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> photosMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'photos',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      photosIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'photos',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      photosIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'photos',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      placeIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'placeId',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      placeIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'placeId',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> placeIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'placeId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      placeIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'placeId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> placeIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'placeId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> placeIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'placeId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      placeIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'placeId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> placeIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'placeId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> placeIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'placeId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> placeIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'placeId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      placeIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'placeId',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      placeIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'placeId',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      planImageUrlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'planImageUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      planImageUrlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'planImageUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      planImageUrlEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'planImageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      planImageUrlGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'planImageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      planImageUrlLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'planImageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      planImageUrlBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'planImageUrl',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      planImageUrlStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'planImageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      planImageUrlEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'planImageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      planImageUrlContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'planImageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      planImageUrlMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'planImageUrl',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      planImageUrlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'planImageUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      planImageUrlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'planImageUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      pmsApplicationIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'pmsApplication',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      pmsApplicationIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'pmsApplication',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      pmsApplicationEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'pmsApplication',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      pmsApplicationGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'pmsApplication',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      pmsApplicationLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'pmsApplication',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      pmsApplicationBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'pmsApplication',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      pmsApplicationStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'pmsApplication',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      pmsApplicationEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'pmsApplication',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      pmsApplicationContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'pmsApplication',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      pmsApplicationMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'pmsApplication',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      pmsApplicationIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'pmsApplication',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      pmsApplicationIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'pmsApplication',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> poIsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'poIs',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      poIsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'poIs',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> poolsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'pools',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      poolsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'pools',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      postCodeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'postCode',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      postCodeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'postCode',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> postCodeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'postCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      postCodeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'postCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      postCodeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'postCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> postCodeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'postCode',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      postCodeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'postCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      postCodeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'postCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      postCodeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'postCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> postCodeMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'postCode',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      postCodeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'postCode',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      postCodeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'postCode',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      privacyPolicyLinkIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'privacyPolicyLink',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      privacyPolicyLinkIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'privacyPolicyLink',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      privacyPolicyLinkLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'privacyPolicyLink',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      privacyPolicyLinkIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'privacyPolicyLink',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      privacyPolicyLinkIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'privacyPolicyLink',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      privacyPolicyLinkLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'privacyPolicyLink',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      privacyPolicyLinkLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'privacyPolicyLink',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      privacyPolicyLinkLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'privacyPolicyLink',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      productTypeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'productType',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      productTypeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'productType',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      productTypeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'productType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      productTypeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'productType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      productTypeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'productType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      productTypeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'productType',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      productTypeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'productType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      productTypeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'productType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      productTypeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'productType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      productTypeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'productType',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      productTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'productType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      productTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'productType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      qrReaderIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'qrReader',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      qrReaderIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'qrReader',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> qrReaderEqualTo(
      bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'qrReader',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> ratingIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'rating',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      ratingIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'rating',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> ratingEqualTo(
    double? value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'rating',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      ratingGreaterThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'rating',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> ratingLessThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'rating',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> ratingBetween(
    double? lower,
    double? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'rating',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      releaseDateIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'releaseDate',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      releaseDateIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'releaseDate',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      releaseDateEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'releaseDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      releaseDateGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'releaseDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      releaseDateLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'releaseDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      releaseDateBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'releaseDate',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reportDbSchemeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'reportDbScheme',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reportDbSchemeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'reportDbScheme',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reportDbSchemeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'reportDbScheme',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reportDbSchemeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'reportDbScheme',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reportDbSchemeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'reportDbScheme',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reportDbSchemeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'reportDbScheme',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reportDbSchemeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'reportDbScheme',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reportDbSchemeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'reportDbScheme',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reportDbSchemeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'reportDbScheme',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reportDbSchemeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'reportDbScheme',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reportDbSchemeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'reportDbScheme',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reportDbSchemeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'reportDbScheme',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reservationMailAddressIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'reservationMailAddress',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reservationMailAddressIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'reservationMailAddress',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reservationMailAddressEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'reservationMailAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reservationMailAddressGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'reservationMailAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reservationMailAddressLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'reservationMailAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reservationMailAddressBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'reservationMailAddress',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reservationMailAddressStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'reservationMailAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reservationMailAddressEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'reservationMailAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reservationMailAddressContains(String value,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'reservationMailAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reservationMailAddressMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'reservationMailAddress',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reservationMailAddressIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'reservationMailAddress',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      reservationMailAddressIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'reservationMailAddress',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      restaurantsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'restaurants',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      restaurantsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'restaurants',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardCalculationTypeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'rewardCalculationType',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardCalculationTypeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'rewardCalculationType',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardCalculationTypeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'rewardCalculationType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardCalculationTypeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'rewardCalculationType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardCalculationTypeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'rewardCalculationType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardCalculationTypeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'rewardCalculationType',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardCalculationTypeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'rewardCalculationType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardCalculationTypeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'rewardCalculationType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardCalculationTypeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'rewardCalculationType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardCalculationTypeMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'rewardCalculationType',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardCalculationTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'rewardCalculationType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardCalculationTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'rewardCalculationType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardMinPointIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'rewardMinPoint',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardMinPointIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'rewardMinPoint',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardMinPointEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'rewardMinPoint',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardMinPointGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'rewardMinPoint',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardMinPointLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'rewardMinPoint',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardMinPointBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'rewardMinPoint',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardValueIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'rewardValue',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardValueIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'rewardValue',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardValueEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'rewardValue',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardValueGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'rewardValue',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardValueLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'rewardValue',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      rewardValueBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'rewardValue',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      roomGuideIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'roomGuide',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      roomGuideIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'roomGuide',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      roomNumberValidationCodeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'roomNumberValidationCode',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      roomNumberValidationCodeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'roomNumberValidationCode',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      roomNumberValidationCodeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'roomNumberValidationCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      roomNumberValidationCodeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'roomNumberValidationCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      roomNumberValidationCodeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'roomNumberValidationCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      roomNumberValidationCodeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'roomNumberValidationCode',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      roomNumberValidationCodeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'roomNumberValidationCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      roomNumberValidationCodeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'roomNumberValidationCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      roomNumberValidationCodeContains(String value,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'roomNumberValidationCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      roomNumberValidationCodeMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'roomNumberValidationCode',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      roomNumberValidationCodeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'roomNumberValidationCode',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      roomNumberValidationCodeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'roomNumberValidationCode',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      roomServicesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'roomServices',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      roomServicesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'roomServices',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> roomsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'rooms',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      roomsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'rooms',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      secondLevelAlertListIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'secondLevelAlertList',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      secondLevelAlertListIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'secondLevelAlertList',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      secondLevelAlertListEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'secondLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      secondLevelAlertListGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'secondLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      secondLevelAlertListLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'secondLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      secondLevelAlertListBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'secondLevelAlertList',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      secondLevelAlertListStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'secondLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      secondLevelAlertListEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'secondLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      secondLevelAlertListContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'secondLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      secondLevelAlertListMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'secondLevelAlertList',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      secondLevelAlertListIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'secondLevelAlertList',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      secondLevelAlertListIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'secondLevelAlertList',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      servicesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'services',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      servicesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'services',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      showChatIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showChat',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      showChatIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showChat',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> showChatEqualTo(
      bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showChat',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      showWelcomeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showWelcome',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      showWelcomeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showWelcome',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      showWelcomeEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showWelcome',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> showsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'shows',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      showsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'shows',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smFacebookUrlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'smFacebookUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smFacebookUrlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'smFacebookUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smFacebookUrlEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'smFacebookUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smFacebookUrlGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'smFacebookUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smFacebookUrlLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'smFacebookUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smFacebookUrlBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'smFacebookUrl',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smFacebookUrlStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'smFacebookUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smFacebookUrlEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'smFacebookUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smFacebookUrlContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'smFacebookUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smFacebookUrlMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'smFacebookUrl',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smFacebookUrlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'smFacebookUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smFacebookUrlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'smFacebookUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smInstagramUrlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'smInstagramUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smInstagramUrlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'smInstagramUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smInstagramUrlEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'smInstagramUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smInstagramUrlGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'smInstagramUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smInstagramUrlLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'smInstagramUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smInstagramUrlBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'smInstagramUrl',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smInstagramUrlStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'smInstagramUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smInstagramUrlEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'smInstagramUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smInstagramUrlContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'smInstagramUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smInstagramUrlMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'smInstagramUrl',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smInstagramUrlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'smInstagramUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smInstagramUrlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'smInstagramUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smTwitterUrlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'smTwitterUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smTwitterUrlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'smTwitterUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smTwitterUrlEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'smTwitterUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smTwitterUrlGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'smTwitterUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smTwitterUrlLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'smTwitterUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smTwitterUrlBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'smTwitterUrl',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smTwitterUrlStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'smTwitterUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smTwitterUrlEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'smTwitterUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smTwitterUrlContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'smTwitterUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smTwitterUrlMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'smTwitterUrl',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smTwitterUrlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'smTwitterUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smTwitterUrlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'smTwitterUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smVkontakteUrlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'smVkontakteUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smVkontakteUrlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'smVkontakteUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smVkontakteUrlEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'smVkontakteUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smVkontakteUrlGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'smVkontakteUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smVkontakteUrlLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'smVkontakteUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smVkontakteUrlBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'smVkontakteUrl',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smVkontakteUrlStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'smVkontakteUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smVkontakteUrlEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'smVkontakteUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smVkontakteUrlContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'smVkontakteUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smVkontakteUrlMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'smVkontakteUrl',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smVkontakteUrlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'smVkontakteUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smVkontakteUrlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'smVkontakteUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smYoutubeUrlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'smYoutubeUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smYoutubeUrlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'smYoutubeUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smYoutubeUrlEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'smYoutubeUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smYoutubeUrlGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'smYoutubeUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smYoutubeUrlLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'smYoutubeUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smYoutubeUrlBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'smYoutubeUrl',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smYoutubeUrlStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'smYoutubeUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smYoutubeUrlEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'smYoutubeUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smYoutubeUrlContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'smYoutubeUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smYoutubeUrlMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'smYoutubeUrl',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smYoutubeUrlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'smYoutubeUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      smYoutubeUrlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'smYoutubeUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spCustomerRelationIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'spCustomerRelation',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spCustomerRelationIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'spCustomerRelation',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spCustomerRelationEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'spCustomerRelation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spCustomerRelationGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'spCustomerRelation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spCustomerRelationLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'spCustomerRelation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spCustomerRelationBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'spCustomerRelation',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spCustomerRelationStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'spCustomerRelation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spCustomerRelationEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'spCustomerRelation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spCustomerRelationContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'spCustomerRelation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spCustomerRelationMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'spCustomerRelation',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spCustomerRelationIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'spCustomerRelation',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spCustomerRelationIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'spCustomerRelation',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spDoctorIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'spDoctor',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spDoctorIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'spDoctor',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> spDoctorEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'spDoctor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spDoctorGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'spDoctor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spDoctorLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'spDoctor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> spDoctorBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'spDoctor',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spDoctorStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'spDoctor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spDoctorEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'spDoctor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spDoctorContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'spDoctor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> spDoctorMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'spDoctor',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spDoctorIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'spDoctor',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spDoctorIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'spDoctor',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spManagementIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'spManagement',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spManagementIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'spManagement',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spManagementEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'spManagement',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spManagementGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'spManagement',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spManagementLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'spManagement',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spManagementBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'spManagement',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spManagementStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'spManagement',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spManagementEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'spManagement',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spManagementContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'spManagement',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spManagementMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'spManagement',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spManagementIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'spManagement',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spManagementIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'spManagement',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spReceptionIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'spReception',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spReceptionIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'spReception',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spReceptionEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'spReception',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spReceptionGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'spReception',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spReceptionLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'spReception',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spReceptionBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'spReception',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spReceptionStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'spReception',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spReceptionEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'spReception',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spReceptionContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'spReception',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spReceptionMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'spReception',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spReceptionIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'spReception',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spReceptionIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'spReception',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spRoomServiceIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'spRoomService',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spRoomServiceIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'spRoomService',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spRoomServiceEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'spRoomService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spRoomServiceGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'spRoomService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spRoomServiceLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'spRoomService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spRoomServiceBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'spRoomService',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spRoomServiceStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'spRoomService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spRoomServiceEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'spRoomService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spRoomServiceContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'spRoomService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spRoomServiceMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'spRoomService',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spRoomServiceIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'spRoomService',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spRoomServiceIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'spRoomService',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> spSpaIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'spSpa',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spSpaIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'spSpa',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> spSpaEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'spSpa',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spSpaGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'spSpa',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> spSpaLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'spSpa',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> spSpaBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'spSpa',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> spSpaStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'spSpa',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> spSpaEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'spSpa',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> spSpaContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'spSpa',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> spSpaMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'spSpa',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> spSpaIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'spSpa',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spSpaIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'spSpa',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spTechnicalServiceIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'spTechnicalService',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spTechnicalServiceIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'spTechnicalService',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spTechnicalServiceEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'spTechnicalService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spTechnicalServiceGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'spTechnicalService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spTechnicalServiceLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'spTechnicalService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spTechnicalServiceBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'spTechnicalService',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spTechnicalServiceStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'spTechnicalService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spTechnicalServiceEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'spTechnicalService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spTechnicalServiceContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'spTechnicalService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spTechnicalServiceMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'spTechnicalService',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spTechnicalServiceIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'spTechnicalService',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      spTechnicalServiceIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'spTechnicalService',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> spaIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'spa',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> spaIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'spa',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> sportIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'sport',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      sportIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'sport',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      staffTrackingIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'staffTracking',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      staffTrackingIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'staffTracking',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      staffTrackingEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'staffTracking',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subColorIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'subColor',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subColorIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'subColor',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> subColorEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'subColor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subColorGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'subColor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subColorLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'subColor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> subColorBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'subColor',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subColorStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'subColor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subColorEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'subColor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subColorContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'subColor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> subColorMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'subColor',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subColorIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'subColor',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subColorIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'subColor',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subDomainNameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'subDomainName',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subDomainNameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'subDomainName',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subDomainNameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'subDomainName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subDomainNameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'subDomainName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subDomainNameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'subDomainName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subDomainNameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'subDomainName',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subDomainNameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'subDomainName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subDomainNameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'subDomainName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subDomainNameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'subDomainName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subDomainNameMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'subDomainName',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subDomainNameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'subDomainName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subDomainNameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'subDomainName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subscriptionEndDateIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'subscriptionEndDate',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subscriptionEndDateIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'subscriptionEndDate',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subscriptionEndDateEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'subscriptionEndDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subscriptionEndDateGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'subscriptionEndDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subscriptionEndDateLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'subscriptionEndDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subscriptionEndDateBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'subscriptionEndDate',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subscriptionStartDateIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'subscriptionStartDate',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subscriptionStartDateIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'subscriptionStartDate',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subscriptionStartDateEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'subscriptionStartDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subscriptionStartDateGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'subscriptionStartDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subscriptionStartDateLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'subscriptionStartDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      subscriptionStartDateBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'subscriptionStartDate',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyAddressIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'surveyAddress',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyAddressIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'surveyAddress',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyAddressEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'surveyAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyAddressGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'surveyAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyAddressLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'surveyAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyAddressBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'surveyAddress',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyAddressStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'surveyAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyAddressEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'surveyAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyAddressContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'surveyAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyAddressMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'surveyAddress',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyAddressIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'surveyAddress',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyAddressIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'surveyAddress',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyDescriptionIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'surveyDescription',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyDescriptionIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'surveyDescription',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyDescriptionLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyDescription',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyDescriptionIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyDescription',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyDescriptionIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyDescription',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyDescriptionLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyDescription',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyDescriptionLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyDescription',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyDescriptionLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyDescription',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyHeaderIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'surveyHeader',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyHeaderIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'surveyHeader',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyHeaderIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'surveyHeaderId',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyHeaderIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'surveyHeaderId',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyHeaderIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'surveyHeaderId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyHeaderIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'surveyHeaderId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyHeaderIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'surveyHeaderId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyHeaderIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'surveyHeaderId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyPointIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'surveyPoint',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyPointIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'surveyPoint',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyPointEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'surveyPoint',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyPointGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'surveyPoint',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyPointLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'surveyPoint',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyPointBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'surveyPoint',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyTitleIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'surveyTitle',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyTitleIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'surveyTitle',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyTitleLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyTitle',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyTitleIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyTitle',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyTitleIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyTitle',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyTitleLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyTitle',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyTitleLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyTitle',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyTitleLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyTitle',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyUrlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'surveyUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyUrlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'surveyUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyUrlLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyUrl',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyUrlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyUrl',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyUrlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyUrl',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyUrlLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyUrl',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyUrlLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyUrl',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyUrlLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyUrl',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      telegramNoIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'telegramNo',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      telegramNoIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'telegramNo',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      telegramNoEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'telegramNo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      telegramNoGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'telegramNo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      telegramNoLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'telegramNo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      telegramNoBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'telegramNo',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      telegramNoStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'telegramNo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      telegramNoEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'telegramNo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      telegramNoContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'telegramNo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      telegramNoMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'telegramNo',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      telegramNoIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'telegramNo',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      telegramNoIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'telegramNo',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      thirdLevelAlertListIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'thirdLevelAlertList',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      thirdLevelAlertListIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'thirdLevelAlertList',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      thirdLevelAlertListEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'thirdLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      thirdLevelAlertListGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'thirdLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      thirdLevelAlertListLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'thirdLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      thirdLevelAlertListBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'thirdLevelAlertList',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      thirdLevelAlertListStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'thirdLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      thirdLevelAlertListEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'thirdLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      thirdLevelAlertListContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'thirdLevelAlertList',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      thirdLevelAlertListMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'thirdLevelAlertList',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      thirdLevelAlertListIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'thirdLevelAlertList',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      thirdLevelAlertListIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'thirdLevelAlertList',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      timeZoneIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'timeZone',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      timeZoneIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'timeZone',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> timeZoneEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'timeZone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      timeZoneGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'timeZone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      timeZoneLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'timeZone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> timeZoneBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'timeZone',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      timeZoneStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'timeZone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      timeZoneEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'timeZone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      timeZoneContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'timeZone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> timeZoneMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'timeZone',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      timeZoneIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'timeZone',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      timeZoneIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'timeZone',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> titleIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'title',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      titleIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'title',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      titleLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> titleIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      titleIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      titleLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      titleLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      titleLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      titleAndDescriptionsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'titleAndDescriptions',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      titleAndDescriptionsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'titleAndDescriptions',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      titleAndDescriptionsLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'titleAndDescriptions',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      titleAndDescriptionsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'titleAndDescriptions',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      titleAndDescriptionsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'titleAndDescriptions',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      titleAndDescriptionsLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'titleAndDescriptions',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      titleAndDescriptionsLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'titleAndDescriptions',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      titleAndDescriptionsLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'titleAndDescriptions',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      tokenExpireSecondsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'tokenExpireSeconds',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      tokenExpireSecondsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'tokenExpireSeconds',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      tokenExpireSecondsEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'tokenExpireSeconds',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      tokenExpireSecondsGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'tokenExpireSeconds',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      tokenExpireSecondsLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'tokenExpireSeconds',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      tokenExpireSecondsBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'tokenExpireSeconds',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> toursIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'tours',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      toursIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'tours',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      tripAdvisorLinkIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'tripAdvisorLink',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      tripAdvisorLinkIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'tripAdvisorLink',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      tripAdvisorLinkEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'tripAdvisorLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      tripAdvisorLinkGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'tripAdvisorLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      tripAdvisorLinkLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'tripAdvisorLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      tripAdvisorLinkBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'tripAdvisorLink',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      tripAdvisorLinkStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'tripAdvisorLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      tripAdvisorLinkEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'tripAdvisorLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      tripAdvisorLinkContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'tripAdvisorLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      tripAdvisorLinkMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'tripAdvisorLink',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      tripAdvisorLinkIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'tripAdvisorLink',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      tripAdvisorLinkIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'tripAdvisorLink',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      updatedAtIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'updatedAt',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      updatedAtIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'updatedAt',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      updatedAtEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      updatedAtGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      updatedAtLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      updatedAtBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'updatedAt',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> upsellIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'upsell',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      upsellIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'upsell',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      upsellItemIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'upsellItemId',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      upsellItemIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'upsellItemId',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      upsellItemIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'upsellItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      upsellItemIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'upsellItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      upsellItemIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'upsellItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      upsellItemIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'upsellItemId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      viberNoIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'viberNo',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      viberNoIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'viberNo',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> viberNoEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'viberNo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      viberNoGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'viberNo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> viberNoLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'viberNo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> viberNoBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'viberNo',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      viberNoStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'viberNo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> viberNoEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'viberNo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> viberNoContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'viberNo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> viberNoMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'viberNo',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      viberNoIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'viberNo',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      viberNoIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'viberNo',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> videoIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'video',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      videoIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'video',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      virtualTourUrlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'virtualTourUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      virtualTourUrlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'virtualTourUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      virtualTourUrlEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'virtualTourUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      virtualTourUrlGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'virtualTourUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      virtualTourUrlLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'virtualTourUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      virtualTourUrlBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'virtualTourUrl',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      virtualTourUrlStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'virtualTourUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      virtualTourUrlEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'virtualTourUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      virtualTourUrlContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'virtualTourUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      virtualTourUrlMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'virtualTourUrl',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      virtualTourUrlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'virtualTourUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      virtualTourUrlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'virtualTourUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      webSiteUrlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'webSiteUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      webSiteUrlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'webSiteUrl',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      webSiteUrlLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'webSiteUrl',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      webSiteUrlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'webSiteUrl',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      webSiteUrlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'webSiteUrl',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      webSiteUrlLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'webSiteUrl',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      webSiteUrlLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'webSiteUrl',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      webSiteUrlLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'webSiteUrl',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      weddingIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'wedding',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      weddingIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'wedding',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      welcomeMessageIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'welcomeMessage',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      welcomeMessageIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'welcomeMessage',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      welcomeMessageLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'welcomeMessage',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      welcomeMessageIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'welcomeMessage',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      welcomeMessageIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'welcomeMessage',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      welcomeMessageLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'welcomeMessage',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      welcomeMessageLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'welcomeMessage',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      welcomeMessageLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'welcomeMessage',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      whatsappNoIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'whatsappNo',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      whatsappNoIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'whatsappNo',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      whatsappNoEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'whatsappNo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      whatsappNoGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'whatsappNo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      whatsappNoLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'whatsappNo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      whatsappNoBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'whatsappNo',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      whatsappNoStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'whatsappNo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      whatsappNoEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'whatsappNo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      whatsappNoContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'whatsappNo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      whatsappNoMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'whatsappNo',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      whatsappNoIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'whatsappNo',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      whatsappNoIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'whatsappNo',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiNameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'wifiName',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiNameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'wifiName',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> wifiNameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'wifiName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiNameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'wifiName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiNameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'wifiName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> wifiNameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'wifiName',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiNameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'wifiName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiNameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'wifiName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiNameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'wifiName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> wifiNameMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'wifiName',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiNameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'wifiName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiNameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'wifiName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiPasswordIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'wifiPassword',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiPasswordIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'wifiPassword',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiPasswordEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'wifiPassword',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiPasswordGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'wifiPassword',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiPasswordLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'wifiPassword',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiPasswordBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'wifiPassword',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiPasswordStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'wifiPassword',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiPasswordEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'wifiPassword',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiPasswordContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'wifiPassword',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiPasswordMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'wifiPassword',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiPasswordIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'wifiPassword',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      wifiPasswordIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'wifiPassword',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      yandexMetricaLinkIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'yandexMetricaLink',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      yandexMetricaLinkIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'yandexMetricaLink',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      yandexMetricaLinkEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'yandexMetricaLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      yandexMetricaLinkGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'yandexMetricaLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      yandexMetricaLinkLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'yandexMetricaLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      yandexMetricaLinkBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'yandexMetricaLink',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      yandexMetricaLinkStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'yandexMetricaLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      yandexMetricaLinkEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'yandexMetricaLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      yandexMetricaLinkContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'yandexMetricaLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      yandexMetricaLinkMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'yandexMetricaLink',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      yandexMetricaLinkIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'yandexMetricaLink',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      yandexMetricaLinkIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'yandexMetricaLink',
        value: '',
      ));
    });
  }
}

extension RSDataModelQueryObject
    on QueryBuilder<RSDataModel, RSDataModel, QFilterCondition> {
  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      accommodationContractElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'accommodationContract');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> activity(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'activity');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> amenities(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'amenities');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> avm(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'avm');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> banner(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'banner');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> bars(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'bars');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> cafes(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'cafes');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      checkInPostMessageElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'checkInPostMessage');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> cinema(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'cinema');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> complaint(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'complaint');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> dailyAnimations(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'dailyAnimations');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      descriptionElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'description');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> events(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'events');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> faqElement(
      FilterQuery<RSDataMenuItemTitleAndDescriptionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'faq');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> featuredElement(
      FilterQuery<RSDataMenuItemsModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'featured');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> frontOffice(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'frontOffice');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> giftCard(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'giftCard');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> golfClub(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'golfClub');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> guestny(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'guestny');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      homePageDesignerElement(FilterQuery<RsDataHomePageDesignerModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'homePageDesigner');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> housekeeping(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'housekeeping');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> issues(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'issues');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> kidsClub(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'kidsClub');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> kvkkLinkElement(
      FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'kvkkLink');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> life(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'life');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      loyalityManagement(FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'loyalityManagement');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> malls(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'malls');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> massage(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'massage');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> meetingRoom(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'meetingRoom');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> mice(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'mice');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> news(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'news');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      onlineReservationUrlElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'onlineReservationUrl');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> opportunities(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'opportunities');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> other1(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'other1');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> other2(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'other2');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> other3(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'other3');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> other4(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'other4');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> other5(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'other5');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> other6(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'other6');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> other7(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'other7');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> other8(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'other8');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> otherFacilities(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'otherFacilities');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> otherServices(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'otherServices');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> poIs(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'poIs');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> pools(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'pools');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      privacyPolicyLinkElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'privacyPolicyLink');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> restaurants(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'restaurants');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> roomGuide(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'roomGuide');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> roomServices(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'roomServices');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> rooms(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'rooms');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> services(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'services');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> shows(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'shows');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> spa(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'spa');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> sport(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'sport');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyDescriptionElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'surveyDescription');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> surveyHeader(
      FilterQuery<RSDataSurveyHeaderModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'surveyHeader');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyTitleElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'surveyTitle');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      surveyUrlElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'surveyUrl');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> titleElement(
      FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'title');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      titleAndDescriptionsElement(
          FilterQuery<RSDataMenuItemTitleAndDescriptionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'titleAndDescriptions');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> tours(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'tours');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> upsell(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'upsell');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> video(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'video');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      webSiteUrlElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'webSiteUrl');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition> wedding(
      FilterQuery<RsDataMenuSectionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'wedding');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterFilterCondition>
      welcomeMessageElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'welcomeMessage');
    });
  }
}

extension RSDataModelQueryLinks
    on QueryBuilder<RSDataModel, RSDataModel, QFilterCondition> {}

extension RSDataModelQuerySortBy
    on QueryBuilder<RSDataModel, RSDataModel, QSortBy> {
  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByActivated() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'activated', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByActivatedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'activated', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByAddress() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'address', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByAddressDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'address', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByApiAddress() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'apiAddress', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByApiAddressDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'apiAddress', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByAppStoreLink() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'appStoreLink', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByAppStoreLinkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'appStoreLink', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByAutoCreateProfile() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'autoCreateProfile', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByAutoCreateProfileDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'autoCreateProfile', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByAutoSendWelcomeMail() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'autoSendWelcomeMail', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByAutoSendWelcomeMailDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'autoSendWelcomeMail', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByBabyAgeRange() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'babyAgeRange', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByBabyAgeRangeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'babyAgeRange', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByBingLink() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'bingLink', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByBingLinkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'bingLink', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByCallCenter() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'callCenter', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByCallCenterDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'callCenter', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByCallForRequests() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'callForRequests', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByCallForRequestsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'callForRequests', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByCheckInSurveyId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'checkInSurveyId', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByCheckInSurveyIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'checkInSurveyId', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByCheckOutSurveyId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'checkOutSurveyId', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByCheckOutSurveyIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'checkOutSurveyId', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByChildAgeRange() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'childAgeRange', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByChildAgeRangeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'childAgeRange', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByCity() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'city', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByCityDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'city', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByClaimTrackingManager() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'claimTrackingManager', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByClaimTrackingManagerDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'claimTrackingManager', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByClientId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'clientId', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByClientIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'clientId', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByCloseDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'closeDate', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByCloseDateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'closeDate', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByCloseRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'closeRequest', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByCloseRequestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'closeRequest', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByContactEmail() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'contactEmail', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByContactEmailDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'contactEmail', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByContactName() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'contactName', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByContactNameDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'contactName', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByContactPhone() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'contactPhone', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByContactPhoneDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'contactPhone', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByCountry() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'country', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByCountryDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'country', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByCreatePowerBIdata() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'createPowerBIdata', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByCreatePowerBIdataDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'createPowerBIdata', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByCreatedAt() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'createdAt', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByCreatedAtDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'createdAt', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByCurrencyCode() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'currencyCode', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByCurrencyCodeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'currencyCode', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByDeliveryDistanceType() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'deliveryDistanceType', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByDeliveryDistanceTypeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'deliveryDistanceType', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByDeliveryTimeOfDay() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'deliveryTimeOfDay', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByDeliveryTimeOfDayDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'deliveryTimeOfDay', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByDirectReservation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'directReservation', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByDirectReservationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'directReservation', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByEmail() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'email', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByEmailDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'email', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByEntryDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'entryDate', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByEntryDateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'entryDate', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByFacebookId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'facebookId', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByFacebookIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'facebookId', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByFirebaseLink() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'firebaseLink', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByFirebaseLinkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'firebaseLink', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByFirstLevelAlertList() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'firstLevelAlertList', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByFirstLevelAlertListDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'firstLevelAlertList', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByFourthLevelAlertList() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'fourthLevelAlertList', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByFourthLevelAlertListDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'fourthLevelAlertList', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByGoogleAnalyticsLink() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'googleAnalyticsLink', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByGoogleAnalyticsLinkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'googleAnalyticsLink', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByGoogleMapAddress() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'googleMapAddress', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByGoogleMapAddressDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'googleMapAddress', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByGooglePlayLink() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'googlePlayLink', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByGooglePlayLinkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'googlePlayLink', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByGroupHotels() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'groupHotels', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByGroupHotelsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'groupHotels', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByHotelChain() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelChain', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByHotelChainDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelChain', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHotelInformationAr() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationAr', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHotelInformationArDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationAr', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHotelInformationDe() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationDe', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHotelInformationDeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationDe', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHotelInformationEn() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationEn', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHotelInformationEnDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationEn', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHotelInformationEs() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationEs', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHotelInformationEsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationEs', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHotelInformationFr() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationFr', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHotelInformationFrDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationFr', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHotelInformationIr() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationIr', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHotelInformationIrDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationIr', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHotelInformationRu() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationRu', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHotelInformationRuDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationRu', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHotelInformationTr() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationTr', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHotelInformationTrDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationTr', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByHotelLanguage() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelLanguage', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHotelLanguageDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelLanguage', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByHotelToken() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelToken', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByHotelTokenDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelToken', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHotelTokenExpiredTime() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelTokenExpiredTime', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHotelTokenExpiredTimeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelTokenExpiredTime', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByHotelType() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelType', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByHotelTypeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelType', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHouseKeepingPhone() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'houseKeepingPhone', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByHouseKeepingPhoneDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'houseKeepingPhone', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByIcibotId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'icibotId', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByIcibotIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'icibotId', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByImageUrl() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'imageUrl', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByImageUrlDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'imageUrl', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByInHouseListLoginType() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'inHouseListLoginType', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByInHouseListLoginTypeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'inHouseListLoginType', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByInHouseListMatchingCondition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'inHouseListMatchingCondition', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByInHouseListMatchingConditionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'inHouseListMatchingCondition', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByIsAccountVerifyNecessaryForRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isAccountVerifyNecessaryForRequest', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByIsAccountVerifyNecessaryForRequestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isAccountVerifyNecessaryForRequest', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByIsClosedStaffChat() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isClosedStaffChat', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByIsClosedStaffChatDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isClosedStaffChat', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByIsGiftCard() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isGiftCard', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByIsGiftCardDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isGiftCard', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByIsTaskDescriptionMandatory() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isTaskDescriptionMandatory', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByIsTaskDescriptionMandatoryDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isTaskDescriptionMandatory', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByIsTaskSolutionNoteMandatory() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isTaskSolutionNoteMandatory', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByIsTaskSolutionNoteMandatoryDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isTaskSolutionNoteMandatory', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByLatLng() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'latLng', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByLatLngDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'latLng', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByLoyaltyManagement() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'loyaltyManagement', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByLoyaltyManagementDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'loyaltyManagement', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByMailVerificationForGuests() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mailVerificationForGuests', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByMailVerificationForGuestsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mailVerificationForGuests', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByManuelGuestVisitConfirmation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'manuelGuestVisitConfirmation', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByManuelGuestVisitConfirmationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'manuelGuestVisitConfirmation', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByManuelRequestOwnerType() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'manuelRequestOwnerType', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByManuelRequestOwnerTypeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'manuelRequestOwnerType', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByMasterColor() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'masterColor', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByMasterColorDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'masterColor', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByMessengerAddress() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'messengerAddress', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByMessengerAddressDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'messengerAddress', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByMobilePayment() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mobilePayment', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByMobilePaymentDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mobilePayment', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByMobilePublishBy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mobilePublishBy', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByMobilePublishByDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mobilePublishBy', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByMobileVersion() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mobileVersion', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByMobileVersionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mobileVersion', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByMobileVersionPublishDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mobileVersionPublishDate', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByMobileVersionPublishDateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mobileVersionPublishDate', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByName() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'name', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByNameDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'name', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByNegativeSurveyAlertList() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'negativeSurveyAlertList', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByNegativeSurveyAlertListDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'negativeSurveyAlertList', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByNotificationPoint() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'notificationPoint', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByNotificationPointDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'notificationPoint', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByOldAgeRange() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'oldAgeRange', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByOldAgeRangeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'oldAgeRange', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByOneSignalAppId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'oneSignalAppId', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByOneSignalAppIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'oneSignalAppId', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByOneSignalAppKey() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'oneSignalAppKey', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByOneSignalAppKeyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'oneSignalAppKey', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByOneSignalUserKey() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'oneSignalUserKey', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByOneSignalUserKeyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'oneSignalUserKey', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByOnetimeInformation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'onetimeInformation', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByOnetimeInformationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'onetimeInformation', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByOnlineCheckIn() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'onlineCheckIn', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByOnlineCheckInDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'onlineCheckIn', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByOnlineCheckInImage() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'onlineCheckInImage', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByOnlineCheckInImageDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'onlineCheckInImage', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByOnlineCheckInSignature() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'onlineCheckInSignature', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByOnlineCheckInSignatureDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'onlineCheckInSignature', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByOpenDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'openDate', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByOpenDateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'openDate', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByOpenForYear() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'openForYear', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByOpenForYearDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'openForYear', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByOperationSystem() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'operationSystem', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByOperationSystemDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'operationSystem', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByPassword() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'password', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByPasswordDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'password', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByPhone() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'phone', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByPhoneDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'phone', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByPhotos() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'photos', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByPhotosDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'photos', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByPlaceId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'placeId', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByPlaceIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'placeId', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByPlanImageUrl() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'planImageUrl', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByPlanImageUrlDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'planImageUrl', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByPmsApplication() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'pmsApplication', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByPmsApplicationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'pmsApplication', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByPostCode() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'postCode', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByPostCodeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'postCode', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByProductType() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'productType', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByProductTypeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'productType', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByQrReader() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'qrReader', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByQrReaderDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'qrReader', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByRating() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rating', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByRatingDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rating', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByReleaseDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'releaseDate', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByReleaseDateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'releaseDate', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByReportDbScheme() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'reportDbScheme', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByReportDbSchemeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'reportDbScheme', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByReservationMailAddress() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'reservationMailAddress', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByReservationMailAddressDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'reservationMailAddress', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByRewardCalculationType() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rewardCalculationType', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByRewardCalculationTypeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rewardCalculationType', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByRewardMinPoint() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rewardMinPoint', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByRewardMinPointDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rewardMinPoint', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByRewardValue() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rewardValue', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByRewardValueDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rewardValue', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByRoomNumberValidationCode() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'roomNumberValidationCode', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByRoomNumberValidationCodeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'roomNumberValidationCode', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySecondLevelAlertList() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'secondLevelAlertList', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySecondLevelAlertListDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'secondLevelAlertList', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByShowChat() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'showChat', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByShowChatDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'showChat', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByShowWelcome() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'showWelcome', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByShowWelcomeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'showWelcome', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySmFacebookUrl() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smFacebookUrl', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySmFacebookUrlDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smFacebookUrl', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySmInstagramUrl() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smInstagramUrl', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySmInstagramUrlDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smInstagramUrl', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySmTwitterUrl() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smTwitterUrl', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySmTwitterUrlDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smTwitterUrl', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySmVkontakteUrl() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smVkontakteUrl', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySmVkontakteUrlDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smVkontakteUrl', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySmYoutubeUrl() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smYoutubeUrl', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySmYoutubeUrlDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smYoutubeUrl', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySpCustomerRelation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spCustomerRelation', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySpCustomerRelationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spCustomerRelation', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySpDoctor() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spDoctor', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySpDoctorDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spDoctor', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySpManagement() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spManagement', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySpManagementDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spManagement', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySpReception() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spReception', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySpReceptionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spReception', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySpRoomService() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spRoomService', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySpRoomServiceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spRoomService', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySpSpa() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spSpa', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySpSpaDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spSpa', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySpTechnicalService() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spTechnicalService', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySpTechnicalServiceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spTechnicalService', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByStaffTracking() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'staffTracking', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByStaffTrackingDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'staffTracking', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySubColor() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'subColor', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySubColorDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'subColor', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySubDomainName() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'subDomainName', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySubDomainNameDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'subDomainName', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySubscriptionEndDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'subscriptionEndDate', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySubscriptionEndDateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'subscriptionEndDate', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySubscriptionStartDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'subscriptionStartDate', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySubscriptionStartDateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'subscriptionStartDate', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySurveyAddress() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'surveyAddress', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySurveyAddressDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'surveyAddress', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySurveyHeaderId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'surveyHeaderId', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortBySurveyHeaderIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'surveyHeaderId', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySurveyPoint() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'surveyPoint', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortBySurveyPointDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'surveyPoint', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByTelegramNo() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'telegramNo', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByTelegramNoDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'telegramNo', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByThirdLevelAlertList() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'thirdLevelAlertList', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByThirdLevelAlertListDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'thirdLevelAlertList', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByTimeZone() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'timeZone', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByTimeZoneDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'timeZone', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByTokenExpireSeconds() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'tokenExpireSeconds', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByTokenExpireSecondsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'tokenExpireSeconds', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByTripAdvisorLink() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'tripAdvisorLink', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByTripAdvisorLinkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'tripAdvisorLink', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByUpdatedAt() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'updatedAt', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByUpdatedAtDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'updatedAt', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByUpsellItemId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'upsellItemId', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByUpsellItemIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'upsellItemId', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByViberNo() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'viberNo', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByViberNoDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'viberNo', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByVirtualTourUrl() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'virtualTourUrl', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByVirtualTourUrlDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'virtualTourUrl', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByWhatsappNo() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'whatsappNo', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByWhatsappNoDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'whatsappNo', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByWifiName() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'wifiName', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByWifiNameDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'wifiName', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> sortByWifiPassword() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'wifiPassword', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByWifiPasswordDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'wifiPassword', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByYandexMetricaLink() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'yandexMetricaLink', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      sortByYandexMetricaLinkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'yandexMetricaLink', Sort.desc);
    });
  }
}

extension RSDataModelQuerySortThenBy
    on QueryBuilder<RSDataModel, RSDataModel, QSortThenBy> {
  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByActivated() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'activated', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByActivatedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'activated', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByAddress() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'address', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByAddressDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'address', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByApiAddress() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'apiAddress', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByApiAddressDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'apiAddress', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByAppStoreLink() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'appStoreLink', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByAppStoreLinkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'appStoreLink', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByAutoCreateProfile() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'autoCreateProfile', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByAutoCreateProfileDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'autoCreateProfile', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByAutoSendWelcomeMail() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'autoSendWelcomeMail', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByAutoSendWelcomeMailDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'autoSendWelcomeMail', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByBabyAgeRange() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'babyAgeRange', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByBabyAgeRangeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'babyAgeRange', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByBingLink() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'bingLink', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByBingLinkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'bingLink', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByCallCenter() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'callCenter', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByCallCenterDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'callCenter', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByCallForRequests() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'callForRequests', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByCallForRequestsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'callForRequests', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByCheckInSurveyId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'checkInSurveyId', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByCheckInSurveyIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'checkInSurveyId', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByCheckOutSurveyId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'checkOutSurveyId', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByCheckOutSurveyIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'checkOutSurveyId', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByChildAgeRange() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'childAgeRange', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByChildAgeRangeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'childAgeRange', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByCity() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'city', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByCityDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'city', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByClaimTrackingManager() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'claimTrackingManager', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByClaimTrackingManagerDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'claimTrackingManager', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByClientId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'clientId', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByClientIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'clientId', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByCloseDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'closeDate', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByCloseDateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'closeDate', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByCloseRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'closeRequest', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByCloseRequestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'closeRequest', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByContactEmail() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'contactEmail', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByContactEmailDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'contactEmail', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByContactName() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'contactName', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByContactNameDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'contactName', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByContactPhone() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'contactPhone', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByContactPhoneDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'contactPhone', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByCountry() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'country', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByCountryDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'country', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByCreatePowerBIdata() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'createPowerBIdata', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByCreatePowerBIdataDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'createPowerBIdata', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByCreatedAt() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'createdAt', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByCreatedAtDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'createdAt', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByCurrencyCode() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'currencyCode', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByCurrencyCodeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'currencyCode', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByDeliveryDistanceType() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'deliveryDistanceType', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByDeliveryDistanceTypeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'deliveryDistanceType', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByDeliveryTimeOfDay() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'deliveryTimeOfDay', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByDeliveryTimeOfDayDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'deliveryTimeOfDay', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByDirectReservation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'directReservation', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByDirectReservationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'directReservation', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByEmail() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'email', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByEmailDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'email', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByEntryDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'entryDate', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByEntryDateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'entryDate', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByFacebookId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'facebookId', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByFacebookIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'facebookId', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByFirebaseLink() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'firebaseLink', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByFirebaseLinkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'firebaseLink', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByFirstLevelAlertList() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'firstLevelAlertList', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByFirstLevelAlertListDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'firstLevelAlertList', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByFourthLevelAlertList() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'fourthLevelAlertList', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByFourthLevelAlertListDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'fourthLevelAlertList', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByGoogleAnalyticsLink() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'googleAnalyticsLink', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByGoogleAnalyticsLinkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'googleAnalyticsLink', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByGoogleMapAddress() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'googleMapAddress', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByGoogleMapAddressDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'googleMapAddress', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByGooglePlayLink() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'googlePlayLink', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByGooglePlayLinkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'googlePlayLink', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByGroupHotels() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'groupHotels', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByGroupHotelsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'groupHotels', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByHotelChain() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelChain', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByHotelChainDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelChain', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHotelInformationAr() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationAr', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHotelInformationArDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationAr', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHotelInformationDe() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationDe', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHotelInformationDeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationDe', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHotelInformationEn() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationEn', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHotelInformationEnDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationEn', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHotelInformationEs() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationEs', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHotelInformationEsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationEs', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHotelInformationFr() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationFr', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHotelInformationFrDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationFr', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHotelInformationIr() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationIr', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHotelInformationIrDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationIr', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHotelInformationRu() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationRu', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHotelInformationRuDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationRu', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHotelInformationTr() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationTr', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHotelInformationTrDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelInformationTr', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByHotelLanguage() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelLanguage', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHotelLanguageDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelLanguage', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByHotelToken() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelToken', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByHotelTokenDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelToken', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHotelTokenExpiredTime() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelTokenExpiredTime', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHotelTokenExpiredTimeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelTokenExpiredTime', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByHotelType() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelType', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByHotelTypeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'hotelType', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHouseKeepingPhone() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'houseKeepingPhone', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByHouseKeepingPhoneDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'houseKeepingPhone', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByIcibotId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'icibotId', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByIcibotIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'icibotId', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'id', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'id', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByImageUrl() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'imageUrl', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByImageUrlDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'imageUrl', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByInHouseListLoginType() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'inHouseListLoginType', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByInHouseListLoginTypeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'inHouseListLoginType', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByInHouseListMatchingCondition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'inHouseListMatchingCondition', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByInHouseListMatchingConditionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'inHouseListMatchingCondition', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByIsAccountVerifyNecessaryForRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isAccountVerifyNecessaryForRequest', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByIsAccountVerifyNecessaryForRequestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isAccountVerifyNecessaryForRequest', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByIsClosedStaffChat() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isClosedStaffChat', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByIsClosedStaffChatDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isClosedStaffChat', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByIsGiftCard() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isGiftCard', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByIsGiftCardDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isGiftCard', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByIsTaskDescriptionMandatory() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isTaskDescriptionMandatory', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByIsTaskDescriptionMandatoryDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isTaskDescriptionMandatory', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByIsTaskSolutionNoteMandatory() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isTaskSolutionNoteMandatory', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByIsTaskSolutionNoteMandatoryDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isTaskSolutionNoteMandatory', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByLatLng() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'latLng', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByLatLngDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'latLng', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByLoyaltyManagement() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'loyaltyManagement', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByLoyaltyManagementDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'loyaltyManagement', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByMailVerificationForGuests() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mailVerificationForGuests', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByMailVerificationForGuestsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mailVerificationForGuests', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByManuelGuestVisitConfirmation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'manuelGuestVisitConfirmation', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByManuelGuestVisitConfirmationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'manuelGuestVisitConfirmation', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByManuelRequestOwnerType() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'manuelRequestOwnerType', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByManuelRequestOwnerTypeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'manuelRequestOwnerType', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByMasterColor() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'masterColor', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByMasterColorDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'masterColor', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByMessengerAddress() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'messengerAddress', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByMessengerAddressDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'messengerAddress', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByMobilePayment() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mobilePayment', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByMobilePaymentDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mobilePayment', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByMobilePublishBy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mobilePublishBy', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByMobilePublishByDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mobilePublishBy', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByMobileVersion() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mobileVersion', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByMobileVersionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mobileVersion', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByMobileVersionPublishDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mobileVersionPublishDate', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByMobileVersionPublishDateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'mobileVersionPublishDate', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByName() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'name', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByNameDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'name', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByNegativeSurveyAlertList() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'negativeSurveyAlertList', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByNegativeSurveyAlertListDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'negativeSurveyAlertList', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByNotificationPoint() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'notificationPoint', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByNotificationPointDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'notificationPoint', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByOldAgeRange() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'oldAgeRange', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByOldAgeRangeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'oldAgeRange', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByOneSignalAppId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'oneSignalAppId', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByOneSignalAppIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'oneSignalAppId', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByOneSignalAppKey() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'oneSignalAppKey', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByOneSignalAppKeyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'oneSignalAppKey', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByOneSignalUserKey() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'oneSignalUserKey', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByOneSignalUserKeyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'oneSignalUserKey', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByOnetimeInformation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'onetimeInformation', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByOnetimeInformationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'onetimeInformation', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByOnlineCheckIn() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'onlineCheckIn', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByOnlineCheckInDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'onlineCheckIn', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByOnlineCheckInImage() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'onlineCheckInImage', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByOnlineCheckInImageDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'onlineCheckInImage', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByOnlineCheckInSignature() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'onlineCheckInSignature', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByOnlineCheckInSignatureDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'onlineCheckInSignature', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByOpenDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'openDate', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByOpenDateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'openDate', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByOpenForYear() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'openForYear', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByOpenForYearDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'openForYear', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByOperationSystem() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'operationSystem', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByOperationSystemDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'operationSystem', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByPassword() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'password', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByPasswordDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'password', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByPhone() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'phone', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByPhoneDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'phone', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByPhotos() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'photos', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByPhotosDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'photos', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByPlaceId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'placeId', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByPlaceIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'placeId', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByPlanImageUrl() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'planImageUrl', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByPlanImageUrlDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'planImageUrl', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByPmsApplication() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'pmsApplication', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByPmsApplicationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'pmsApplication', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByPostCode() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'postCode', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByPostCodeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'postCode', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByProductType() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'productType', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByProductTypeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'productType', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByQrReader() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'qrReader', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByQrReaderDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'qrReader', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByRating() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rating', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByRatingDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rating', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByReleaseDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'releaseDate', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByReleaseDateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'releaseDate', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByReportDbScheme() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'reportDbScheme', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByReportDbSchemeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'reportDbScheme', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByReservationMailAddress() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'reservationMailAddress', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByReservationMailAddressDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'reservationMailAddress', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByRewardCalculationType() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rewardCalculationType', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByRewardCalculationTypeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rewardCalculationType', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByRewardMinPoint() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rewardMinPoint', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByRewardMinPointDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rewardMinPoint', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByRewardValue() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rewardValue', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByRewardValueDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rewardValue', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByRoomNumberValidationCode() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'roomNumberValidationCode', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByRoomNumberValidationCodeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'roomNumberValidationCode', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySecondLevelAlertList() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'secondLevelAlertList', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySecondLevelAlertListDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'secondLevelAlertList', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByShowChat() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'showChat', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByShowChatDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'showChat', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByShowWelcome() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'showWelcome', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByShowWelcomeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'showWelcome', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySmFacebookUrl() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smFacebookUrl', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySmFacebookUrlDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smFacebookUrl', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySmInstagramUrl() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smInstagramUrl', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySmInstagramUrlDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smInstagramUrl', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySmTwitterUrl() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smTwitterUrl', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySmTwitterUrlDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smTwitterUrl', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySmVkontakteUrl() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smVkontakteUrl', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySmVkontakteUrlDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smVkontakteUrl', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySmYoutubeUrl() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smYoutubeUrl', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySmYoutubeUrlDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smYoutubeUrl', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySpCustomerRelation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spCustomerRelation', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySpCustomerRelationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spCustomerRelation', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySpDoctor() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spDoctor', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySpDoctorDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spDoctor', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySpManagement() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spManagement', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySpManagementDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spManagement', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySpReception() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spReception', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySpReceptionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spReception', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySpRoomService() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spRoomService', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySpRoomServiceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spRoomService', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySpSpa() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spSpa', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySpSpaDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spSpa', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySpTechnicalService() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spTechnicalService', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySpTechnicalServiceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'spTechnicalService', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByStaffTracking() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'staffTracking', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByStaffTrackingDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'staffTracking', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySubColor() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'subColor', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySubColorDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'subColor', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySubDomainName() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'subDomainName', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySubDomainNameDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'subDomainName', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySubscriptionEndDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'subscriptionEndDate', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySubscriptionEndDateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'subscriptionEndDate', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySubscriptionStartDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'subscriptionStartDate', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySubscriptionStartDateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'subscriptionStartDate', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySurveyAddress() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'surveyAddress', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySurveyAddressDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'surveyAddress', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySurveyHeaderId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'surveyHeaderId', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenBySurveyHeaderIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'surveyHeaderId', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySurveyPoint() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'surveyPoint', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenBySurveyPointDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'surveyPoint', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByTelegramNo() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'telegramNo', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByTelegramNoDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'telegramNo', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByThirdLevelAlertList() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'thirdLevelAlertList', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByThirdLevelAlertListDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'thirdLevelAlertList', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByTimeZone() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'timeZone', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByTimeZoneDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'timeZone', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByTokenExpireSeconds() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'tokenExpireSeconds', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByTokenExpireSecondsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'tokenExpireSeconds', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByTripAdvisorLink() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'tripAdvisorLink', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByTripAdvisorLinkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'tripAdvisorLink', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByUpdatedAt() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'updatedAt', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByUpdatedAtDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'updatedAt', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByUpsellItemId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'upsellItemId', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByUpsellItemIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'upsellItemId', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByViberNo() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'viberNo', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByViberNoDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'viberNo', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByVirtualTourUrl() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'virtualTourUrl', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByVirtualTourUrlDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'virtualTourUrl', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByWhatsappNo() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'whatsappNo', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByWhatsappNoDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'whatsappNo', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByWifiName() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'wifiName', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByWifiNameDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'wifiName', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy> thenByWifiPassword() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'wifiPassword', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByWifiPasswordDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'wifiPassword', Sort.desc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByYandexMetricaLink() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'yandexMetricaLink', Sort.asc);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QAfterSortBy>
      thenByYandexMetricaLinkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'yandexMetricaLink', Sort.desc);
    });
  }
}

extension RSDataModelQueryWhereDistinct
    on QueryBuilder<RSDataModel, RSDataModel, QDistinct> {
  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByActivated() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'activated');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByAddress(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'address', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByApiAddress(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'apiAddress', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByAppStoreLink(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'appStoreLink', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByAutoCreateProfile() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'autoCreateProfile');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByAutoSendWelcomeMail() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'autoSendWelcomeMail');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByBabyAgeRange(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'babyAgeRange', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByBingLink(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'bingLink', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByCallCenter(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'callCenter', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByCallForRequests() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'callForRequests');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByCheckInSurveyId() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'checkInSurveyId');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByCheckOutSurveyId() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'checkOutSurveyId');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByChildAgeRange(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'childAgeRange',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByCity(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'city', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByClaimTrackingManager() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'claimTrackingManager');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByClientId() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'clientId');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByCloseDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'closeDate');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByCloseRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'closeRequest');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByContactEmail(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'contactEmail', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByContactName(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'contactName', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByContactPhone(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'contactPhone', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByCountry(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'country', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByCreatePowerBIdata() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'createPowerBIdata');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByCreatedAt() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'createdAt');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByCurrencyCode(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'currencyCode', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByDeliveryDistanceType({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'deliveryDistanceType',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByDeliveryTimeOfDay(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'deliveryTimeOfDay',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByDirectReservation() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'directReservation');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByEmail(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'email', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByEntryDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'entryDate');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByFacebookId() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'facebookId');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByFirebaseLink(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'firebaseLink', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByFirstLevelAlertList({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'firstLevelAlertList',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByFourthLevelAlertList({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'fourthLevelAlertList',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByGoogleAnalyticsLink({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'googleAnalyticsLink',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByGoogleMapAddress(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'googleMapAddress',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByGooglePlayLink(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'googlePlayLink',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByGroupHotels(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'groupHotels', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByHotelChain(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'hotelChain', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByHotelInformationAr({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'hotelInformationAr',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByHotelInformationDe({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'hotelInformationDe',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByHotelInformationEn({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'hotelInformationEn',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByHotelInformationEs({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'hotelInformationEs',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByHotelInformationFr({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'hotelInformationFr',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByHotelInformationIr({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'hotelInformationIr',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByHotelInformationRu({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'hotelInformationRu',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByHotelInformationTr({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'hotelInformationTr',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByHotelLanguage(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'hotelLanguage',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByHotelToken(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'hotelToken', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByHotelTokenExpiredTime() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'hotelTokenExpiredTime');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByHotelType(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'hotelType', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByHouseKeepingPhone(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'houseKeepingPhone',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByIcibotId() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'icibotId');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByImageUrl(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'imageUrl', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByInHouseListLoginType({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'inHouseListLoginType',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByInHouseListMatchingCondition({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'inHouseListMatchingCondition',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByIsAccountVerifyNecessaryForRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'isAccountVerifyNecessaryForRequest');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByIsClosedStaffChat() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'isClosedStaffChat');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByIsGiftCard() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'isGiftCard');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByIsTaskDescriptionMandatory() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'isTaskDescriptionMandatory');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByIsTaskSolutionNoteMandatory() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'isTaskSolutionNoteMandatory');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByLanguages() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'languages');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByLatLng(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'latLng', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByLoyaltyManagement() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'loyaltyManagement');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByMailVerificationForGuests() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'mailVerificationForGuests');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByManuelGuestVisitConfirmation() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'manuelGuestVisitConfirmation');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByManuelRequestOwnerType({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'manuelRequestOwnerType',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByMasterColor(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'masterColor', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByMessengerAddress(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'messengerAddress',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByMobilePayment() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'mobilePayment');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByMobilePublishBy(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'mobilePublishBy',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByMobileVersion() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'mobileVersion');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByMobileVersionPublishDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'mobileVersionPublishDate');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByName(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'name', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByNegativeSurveyAlertList({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'negativeSurveyAlertList',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByNotificationPoint() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'notificationPoint');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByOldAgeRange(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'oldAgeRange', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByOneSignalAppId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'oneSignalAppId',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByOneSignalAppKey(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'oneSignalAppKey',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByOneSignalUserKey(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'oneSignalUserKey',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByOnetimeInformation({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'onetimeInformation',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByOnlineCheckIn() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'onlineCheckIn');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByOnlineCheckInImage() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'onlineCheckInImage');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByOnlineCheckInSignature() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'onlineCheckInSignature');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByOpenDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'openDate');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByOpenForYear() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'openForYear');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByOperationSystem() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'operationSystem');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByPassword(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'password', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByPhone(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'phone', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByPhotos(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'photos', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByPlaceId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'placeId', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByPlanImageUrl(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'planImageUrl', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByPmsApplication(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'pmsApplication',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByPostCode(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'postCode', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByProductType(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'productType', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByQrReader() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'qrReader');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByRating() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'rating');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByReleaseDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'releaseDate');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByReportDbScheme(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'reportDbScheme',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByReservationMailAddress({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'reservationMailAddress',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByRewardCalculationType({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'rewardCalculationType',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByRewardMinPoint() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'rewardMinPoint');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByRewardValue() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'rewardValue');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByRoomNumberValidationCode({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'roomNumberValidationCode',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctBySecondLevelAlertList({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'secondLevelAlertList',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByShowChat() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'showChat');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByShowWelcome() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'showWelcome');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctBySmFacebookUrl(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'smFacebookUrl',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctBySmInstagramUrl(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'smInstagramUrl',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctBySmTwitterUrl(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'smTwitterUrl', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctBySmVkontakteUrl(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'smVkontakteUrl',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctBySmYoutubeUrl(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'smYoutubeUrl', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctBySpCustomerRelation({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'spCustomerRelation',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctBySpDoctor(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'spDoctor', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctBySpManagement(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'spManagement', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctBySpReception(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'spReception', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctBySpRoomService(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'spRoomService',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctBySpSpa(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'spSpa', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctBySpTechnicalService({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'spTechnicalService',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByStaffTracking() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'staffTracking');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctBySubColor(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'subColor', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctBySubDomainName(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'subDomainName',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctBySubscriptionEndDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'subscriptionEndDate');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctBySubscriptionStartDate() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'subscriptionStartDate');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctBySurveyAddress(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'surveyAddress',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctBySurveyHeaderId() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'surveyHeaderId');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctBySurveyPoint() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'surveyPoint');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByTelegramNo(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'telegramNo', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByThirdLevelAlertList({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'thirdLevelAlertList',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByTimeZone(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'timeZone', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct>
      distinctByTokenExpireSeconds() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'tokenExpireSeconds');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByTripAdvisorLink(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'tripAdvisorLink',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByUpdatedAt() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'updatedAt');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByUpsellItemId() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'upsellItemId');
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByViberNo(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'viberNo', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByVirtualTourUrl(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'virtualTourUrl',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByWhatsappNo(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'whatsappNo', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByWifiName(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'wifiName', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByWifiPassword(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'wifiPassword', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<RSDataModel, RSDataModel, QDistinct> distinctByYandexMetricaLink(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'yandexMetricaLink',
          caseSensitive: caseSensitive);
    });
  }
}

extension RSDataModelQueryProperty
    on QueryBuilder<RSDataModel, RSDataModel, QQueryProperty> {
  QueryBuilder<RSDataModel, int, QQueryOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'id');
    });
  }

  QueryBuilder<RSDataModel, List<RSDataTitleLanguageModel>?, QQueryOperations>
      accommodationContractProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'accommodationContract');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations> activatedProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'activated');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      activityProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'activity');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> addressProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'address');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      amenitiesProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'amenities');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> apiAddressProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'apiAddress');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> appStoreLinkProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'appStoreLink');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations>
      autoCreateProfileProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'autoCreateProfile');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations>
      autoSendWelcomeMailProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'autoSendWelcomeMail');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      avmProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'avm');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> babyAgeRangeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'babyAgeRange');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      bannerProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'banner');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      barsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'bars');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> bingLinkProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'bingLink');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      cafesProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'cafes');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> callCenterProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'callCenter');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations> callForRequestsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'callForRequests');
    });
  }

  QueryBuilder<RSDataModel, List<RSDataTitleLanguageModel>?, QQueryOperations>
      checkInPostMessageProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'checkInPostMessage');
    });
  }

  QueryBuilder<RSDataModel, int?, QQueryOperations> checkInSurveyIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'checkInSurveyId');
    });
  }

  QueryBuilder<RSDataModel, int?, QQueryOperations> checkOutSurveyIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'checkOutSurveyId');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> childAgeRangeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'childAgeRange');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      cinemaProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'cinema');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> cityProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'city');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations>
      claimTrackingManagerProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'claimTrackingManager');
    });
  }

  QueryBuilder<RSDataModel, int?, QQueryOperations> clientIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'clientId');
    });
  }

  QueryBuilder<RSDataModel, DateTime?, QQueryOperations> closeDateProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'closeDate');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations> closeRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'closeRequest');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      complaintProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'complaint');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> contactEmailProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'contactEmail');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> contactNameProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'contactName');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> contactPhoneProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'contactPhone');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> countryProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'country');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations>
      createPowerBIdataProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'createPowerBIdata');
    });
  }

  QueryBuilder<RSDataModel, DateTime?, QQueryOperations> createdAtProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'createdAt');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> currencyCodeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'currencyCode');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      dailyAnimationsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'dailyAnimations');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      deliveryDistanceTypeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'deliveryDistanceType');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      deliveryTimeOfDayProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'deliveryTimeOfDay');
    });
  }

  QueryBuilder<RSDataModel, List<RSDataTitleLanguageModel>?, QQueryOperations>
      descriptionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'description');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations>
      directReservationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'directReservation');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> emailProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'email');
    });
  }

  QueryBuilder<RSDataModel, DateTime?, QQueryOperations> entryDateProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'entryDate');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      eventsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'events');
    });
  }

  QueryBuilder<RSDataModel, int?, QQueryOperations> facebookIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'facebookId');
    });
  }

  QueryBuilder<RSDataModel, List<RSDataMenuItemTitleAndDescriptionModel>?,
      QQueryOperations> faqProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'faq');
    });
  }

  QueryBuilder<RSDataModel, List<RSDataMenuItemsModel>?, QQueryOperations>
      featuredProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'featured');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> firebaseLinkProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'firebaseLink');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      firstLevelAlertListProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'firstLevelAlertList');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      fourthLevelAlertListProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'fourthLevelAlertList');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      frontOfficeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'frontOffice');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      giftCardProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'giftCard');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      golfClubProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'golfClub');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      googleAnalyticsLinkProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'googleAnalyticsLink');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      googleMapAddressProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'googleMapAddress');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      googlePlayLinkProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'googlePlayLink');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> groupHotelsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'groupHotels');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      guestnyProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'guestny');
    });
  }

  QueryBuilder<RSDataModel, List<RsDataHomePageDesignerModel>?,
      QQueryOperations> homePageDesignerProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'homePageDesigner');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> hotelChainProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'hotelChain');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      hotelInformationArProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'hotelInformationAr');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      hotelInformationDeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'hotelInformationDe');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      hotelInformationEnProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'hotelInformationEn');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      hotelInformationEsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'hotelInformationEs');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      hotelInformationFrProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'hotelInformationFr');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      hotelInformationIrProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'hotelInformationIr');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      hotelInformationRuProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'hotelInformationRu');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      hotelInformationTrProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'hotelInformationTr');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> hotelLanguageProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'hotelLanguage');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> hotelTokenProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'hotelToken');
    });
  }

  QueryBuilder<RSDataModel, DateTime?, QQueryOperations>
      hotelTokenExpiredTimeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'hotelTokenExpiredTime');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> hotelTypeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'hotelType');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      houseKeepingPhoneProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'houseKeepingPhone');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      housekeepingProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'housekeeping');
    });
  }

  QueryBuilder<RSDataModel, int?, QQueryOperations> icibotIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'icibotId');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> imageUrlProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'imageUrl');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      inHouseListLoginTypeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'inHouseListLoginType');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      inHouseListMatchingConditionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'inHouseListMatchingCondition');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations>
      isAccountVerifyNecessaryForRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'isAccountVerifyNecessaryForRequest');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations>
      isClosedStaffChatProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'isClosedStaffChat');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations> isGiftCardProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'isGiftCard');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations>
      isTaskDescriptionMandatoryProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'isTaskDescriptionMandatory');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations>
      isTaskSolutionNoteMandatoryProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'isTaskSolutionNoteMandatory');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      issuesProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'issues');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      kidsClubProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'kidsClub');
    });
  }

  QueryBuilder<RSDataModel, List<RSDataTitleLanguageModel>?, QQueryOperations>
      kvkkLinkProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'kvkkLink');
    });
  }

  QueryBuilder<RSDataModel, List<String>?, QQueryOperations>
      languagesProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'languages');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> latLngProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'latLng');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      lifeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'life');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      loyalityManagementProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'loyalityManagement');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations>
      loyaltyManagementProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'loyaltyManagement');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations>
      mailVerificationForGuestsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'mailVerificationForGuests');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      mallsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'malls');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations>
      manuelGuestVisitConfirmationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'manuelGuestVisitConfirmation');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      manuelRequestOwnerTypeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'manuelRequestOwnerType');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      massageProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'massage');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> masterColorProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'masterColor');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      meetingRoomProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'meetingRoom');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      messengerAddressProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'messengerAddress');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      miceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'mice');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations> mobilePaymentProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'mobilePayment');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      mobilePublishByProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'mobilePublishBy');
    });
  }

  QueryBuilder<RSDataModel, int?, QQueryOperations> mobileVersionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'mobileVersion');
    });
  }

  QueryBuilder<RSDataModel, DateTime?, QQueryOperations>
      mobileVersionPublishDateProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'mobileVersionPublishDate');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> nameProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'name');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      negativeSurveyAlertListProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'negativeSurveyAlertList');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      newsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'news');
    });
  }

  QueryBuilder<RSDataModel, int?, QQueryOperations>
      notificationPointProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'notificationPoint');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> oldAgeRangeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'oldAgeRange');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      oneSignalAppIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'oneSignalAppId');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      oneSignalAppKeyProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'oneSignalAppKey');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      oneSignalUserKeyProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'oneSignalUserKey');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      onetimeInformationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'onetimeInformation');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations> onlineCheckInProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'onlineCheckIn');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations>
      onlineCheckInImageProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'onlineCheckInImage');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations>
      onlineCheckInSignatureProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'onlineCheckInSignature');
    });
  }

  QueryBuilder<RSDataModel, List<RSDataTitleLanguageModel>?, QQueryOperations>
      onlineReservationUrlProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'onlineReservationUrl');
    });
  }

  QueryBuilder<RSDataModel, DateTime?, QQueryOperations> openDateProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'openDate');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations> openForYearProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'openForYear');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations> operationSystemProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'operationSystem');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      opportunitiesProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'opportunities');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      other1Property() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'other1');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      other2Property() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'other2');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      other3Property() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'other3');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      other4Property() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'other4');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      other5Property() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'other5');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      other6Property() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'other6');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      other7Property() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'other7');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      other8Property() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'other8');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      otherFacilitiesProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'otherFacilities');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      otherServicesProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'otherServices');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> passwordProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'password');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> phoneProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'phone');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> photosProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'photos');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> placeIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'placeId');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> planImageUrlProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'planImageUrl');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      pmsApplicationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'pmsApplication');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      poIsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'poIs');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      poolsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'pools');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> postCodeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'postCode');
    });
  }

  QueryBuilder<RSDataModel, List<RSDataTitleLanguageModel>?, QQueryOperations>
      privacyPolicyLinkProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'privacyPolicyLink');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> productTypeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'productType');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations> qrReaderProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'qrReader');
    });
  }

  QueryBuilder<RSDataModel, double?, QQueryOperations> ratingProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'rating');
    });
  }

  QueryBuilder<RSDataModel, DateTime?, QQueryOperations> releaseDateProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'releaseDate');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      reportDbSchemeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'reportDbScheme');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      reservationMailAddressProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'reservationMailAddress');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      restaurantsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'restaurants');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      rewardCalculationTypeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'rewardCalculationType');
    });
  }

  QueryBuilder<RSDataModel, int?, QQueryOperations> rewardMinPointProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'rewardMinPoint');
    });
  }

  QueryBuilder<RSDataModel, int?, QQueryOperations> rewardValueProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'rewardValue');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      roomGuideProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'roomGuide');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      roomNumberValidationCodeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'roomNumberValidationCode');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      roomServicesProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'roomServices');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      roomsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'rooms');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      secondLevelAlertListProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'secondLevelAlertList');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      servicesProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'services');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations> showChatProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'showChat');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations> showWelcomeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'showWelcome');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      showsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'shows');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> smFacebookUrlProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'smFacebookUrl');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      smInstagramUrlProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'smInstagramUrl');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> smTwitterUrlProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'smTwitterUrl');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      smVkontakteUrlProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'smVkontakteUrl');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> smYoutubeUrlProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'smYoutubeUrl');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      spCustomerRelationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'spCustomerRelation');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> spDoctorProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'spDoctor');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> spManagementProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'spManagement');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> spReceptionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'spReception');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> spRoomServiceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'spRoomService');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> spSpaProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'spSpa');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      spTechnicalServiceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'spTechnicalService');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      spaProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'spa');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      sportProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'sport');
    });
  }

  QueryBuilder<RSDataModel, bool?, QQueryOperations> staffTrackingProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'staffTracking');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> subColorProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'subColor');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> subDomainNameProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'subDomainName');
    });
  }

  QueryBuilder<RSDataModel, DateTime?, QQueryOperations>
      subscriptionEndDateProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'subscriptionEndDate');
    });
  }

  QueryBuilder<RSDataModel, DateTime?, QQueryOperations>
      subscriptionStartDateProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'subscriptionStartDate');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> surveyAddressProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'surveyAddress');
    });
  }

  QueryBuilder<RSDataModel, List<RSDataTitleLanguageModel>?, QQueryOperations>
      surveyDescriptionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'surveyDescription');
    });
  }

  QueryBuilder<RSDataModel, RSDataSurveyHeaderModel?, QQueryOperations>
      surveyHeaderProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'surveyHeader');
    });
  }

  QueryBuilder<RSDataModel, int?, QQueryOperations> surveyHeaderIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'surveyHeaderId');
    });
  }

  QueryBuilder<RSDataModel, int?, QQueryOperations> surveyPointProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'surveyPoint');
    });
  }

  QueryBuilder<RSDataModel, List<RSDataTitleLanguageModel>?, QQueryOperations>
      surveyTitleProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'surveyTitle');
    });
  }

  QueryBuilder<RSDataModel, List<RSDataTitleLanguageModel>?, QQueryOperations>
      surveyUrlProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'surveyUrl');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> telegramNoProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'telegramNo');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      thirdLevelAlertListProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'thirdLevelAlertList');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> timeZoneProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'timeZone');
    });
  }

  QueryBuilder<RSDataModel, List<RSDataTitleLanguageModel>?, QQueryOperations>
      titleProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'title');
    });
  }

  QueryBuilder<RSDataModel, List<RSDataMenuItemTitleAndDescriptionModel>?,
      QQueryOperations> titleAndDescriptionsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'titleAndDescriptions');
    });
  }

  QueryBuilder<RSDataModel, int?, QQueryOperations>
      tokenExpireSecondsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'tokenExpireSeconds');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      toursProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'tours');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      tripAdvisorLinkProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'tripAdvisorLink');
    });
  }

  QueryBuilder<RSDataModel, DateTime?, QQueryOperations> updatedAtProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'updatedAt');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      upsellProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'upsell');
    });
  }

  QueryBuilder<RSDataModel, int?, QQueryOperations> upsellItemIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'upsellItemId');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> viberNoProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'viberNo');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      videoProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'video');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      virtualTourUrlProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'virtualTourUrl');
    });
  }

  QueryBuilder<RSDataModel, List<RSDataTitleLanguageModel>?, QQueryOperations>
      webSiteUrlProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'webSiteUrl');
    });
  }

  QueryBuilder<RSDataModel, RsDataMenuSectionModel?, QQueryOperations>
      weddingProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'wedding');
    });
  }

  QueryBuilder<RSDataModel, List<RSDataTitleLanguageModel>?, QQueryOperations>
      welcomeMessageProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'welcomeMessage');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> whatsappNoProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'whatsappNo');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> wifiNameProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'wifiName');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations> wifiPasswordProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'wifiPassword');
    });
  }

  QueryBuilder<RSDataModel, String?, QQueryOperations>
      yandexMetricaLinkProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'yandexMetricaLink');
    });
  }
}

// **************************************************************************
// IsarEmbeddedGenerator
// **************************************************************************

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters

const RsDataMenuSectionModelSchema = Schema(
  name: r'RsDataMenuSectionModel',
  id: 1664175422516667610,
  properties: {
    r'catalogueActive': PropertySchema(
      id: 0,
      name: r'catalogueActive',
      type: IsarType.bool,
    ),
    r'hotelId': PropertySchema(
      id: 1,
      name: r'hotelId',
      type: IsarType.long,
    ),
    r'icibotId': PropertySchema(
      id: 2,
      name: r'icibotId',
      type: IsarType.long,
    ),
    r'menuAreaId': PropertySchema(
      id: 3,
      name: r'menuAreaId',
      type: IsarType.long,
    ),
    r'menuCategories': PropertySchema(
      id: 4,
      name: r'menuCategories',
      type: IsarType.objectList,
      target: r'RSDataMenuCategoriesModel',
    ),
    r'request': PropertySchema(
      id: 5,
      name: r'request',
      type: IsarType.bool,
    ),
    r'survey': PropertySchema(
      id: 6,
      name: r'survey',
      type: IsarType.object,
      target: r'RSDataSurveyModel',
    ),
    r'surveyHeader': PropertySchema(
      id: 7,
      name: r'surveyHeader',
      type: IsarType.object,
      target: r'RSDataSurveyHeaderModel',
    ),
    r'surveyHeaderId': PropertySchema(
      id: 8,
      name: r'surveyHeaderId',
      type: IsarType.long,
    ),
    r'theShow': PropertySchema(
      id: 9,
      name: r'theShow',
      type: IsarType.bool,
    ),
    r'timetableAndReservationActive': PropertySchema(
      id: 10,
      name: r'timetableAndReservationActive',
      type: IsarType.bool,
    ),
    r'title': PropertySchema(
      id: 11,
      name: r'title',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    )
  },
  estimateSize: _rsDataMenuSectionModelEstimateSize,
  serialize: _rsDataMenuSectionModelSerialize,
  deserialize: _rsDataMenuSectionModelDeserialize,
  deserializeProp: _rsDataMenuSectionModelDeserializeProp,
);

int _rsDataMenuSectionModelEstimateSize(
  RsDataMenuSectionModel object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final list = object.menuCategories;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataMenuCategoriesModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataMenuCategoriesModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.survey;
    if (value != null) {
      bytesCount += 3 +
          RSDataSurveyModelSchema.estimateSize(
              value, allOffsets[RSDataSurveyModel]!, allOffsets);
    }
  }
  {
    final value = object.surveyHeader;
    if (value != null) {
      bytesCount += 3 +
          RSDataSurveyHeaderModelSchema.estimateSize(
              value, allOffsets[RSDataSurveyHeaderModel]!, allOffsets);
    }
  }
  {
    final list = object.title;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  return bytesCount;
}

void _rsDataMenuSectionModelSerialize(
  RsDataMenuSectionModel object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeBool(offsets[0], object.catalogueActive);
  writer.writeLong(offsets[1], object.hotelId);
  writer.writeLong(offsets[2], object.icibotId);
  writer.writeLong(offsets[3], object.menuAreaId);
  writer.writeObjectList<RSDataMenuCategoriesModel>(
    offsets[4],
    allOffsets,
    RSDataMenuCategoriesModelSchema.serialize,
    object.menuCategories,
  );
  writer.writeBool(offsets[5], object.request);
  writer.writeObject<RSDataSurveyModel>(
    offsets[6],
    allOffsets,
    RSDataSurveyModelSchema.serialize,
    object.survey,
  );
  writer.writeObject<RSDataSurveyHeaderModel>(
    offsets[7],
    allOffsets,
    RSDataSurveyHeaderModelSchema.serialize,
    object.surveyHeader,
  );
  writer.writeLong(offsets[8], object.surveyHeaderId);
  writer.writeBool(offsets[9], object.theShow);
  writer.writeBool(offsets[10], object.timetableAndReservationActive);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[11],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.title,
  );
}

RsDataMenuSectionModel _rsDataMenuSectionModelDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = RsDataMenuSectionModel(
    catalogueActive: reader.readBoolOrNull(offsets[0]),
    hotelId: reader.readLongOrNull(offsets[1]),
    icibotId: reader.readLongOrNull(offsets[2]),
    menuAreaId: reader.readLongOrNull(offsets[3]),
    menuCategories: reader.readObjectList<RSDataMenuCategoriesModel>(
      offsets[4],
      RSDataMenuCategoriesModelSchema.deserialize,
      allOffsets,
      RSDataMenuCategoriesModel(),
    ),
    request: reader.readBoolOrNull(offsets[5]),
    survey: reader.readObjectOrNull<RSDataSurveyModel>(
      offsets[6],
      RSDataSurveyModelSchema.deserialize,
      allOffsets,
    ),
    surveyHeader: reader.readObjectOrNull<RSDataSurveyHeaderModel>(
      offsets[7],
      RSDataSurveyHeaderModelSchema.deserialize,
      allOffsets,
    ),
    surveyHeaderId: reader.readLongOrNull(offsets[8]),
    theShow: reader.readBoolOrNull(offsets[9]),
    timetableAndReservationActive: reader.readBoolOrNull(offsets[10]),
    title: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[11],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
  );
  return object;
}

P _rsDataMenuSectionModelDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readBoolOrNull(offset)) as P;
    case 1:
      return (reader.readLongOrNull(offset)) as P;
    case 2:
      return (reader.readLongOrNull(offset)) as P;
    case 3:
      return (reader.readLongOrNull(offset)) as P;
    case 4:
      return (reader.readObjectList<RSDataMenuCategoriesModel>(
        offset,
        RSDataMenuCategoriesModelSchema.deserialize,
        allOffsets,
        RSDataMenuCategoriesModel(),
      )) as P;
    case 5:
      return (reader.readBoolOrNull(offset)) as P;
    case 6:
      return (reader.readObjectOrNull<RSDataSurveyModel>(
        offset,
        RSDataSurveyModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 7:
      return (reader.readObjectOrNull<RSDataSurveyHeaderModel>(
        offset,
        RSDataSurveyHeaderModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 8:
      return (reader.readLongOrNull(offset)) as P;
    case 9:
      return (reader.readBoolOrNull(offset)) as P;
    case 10:
      return (reader.readBoolOrNull(offset)) as P;
    case 11:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension RsDataMenuSectionModelQueryFilter on QueryBuilder<
    RsDataMenuSectionModel, RsDataMenuSectionModel, QFilterCondition> {
  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> catalogueActiveIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'catalogueActive',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> catalogueActiveIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'catalogueActive',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> catalogueActiveEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'catalogueActive',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> hotelIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelId',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> hotelIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelId',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> hotelIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> hotelIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> hotelIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> hotelIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> icibotIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'icibotId',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> icibotIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'icibotId',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> icibotIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> icibotIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> icibotIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> icibotIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'icibotId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> menuAreaIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuAreaId',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> menuAreaIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuAreaId',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> menuAreaIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuAreaId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> menuAreaIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuAreaId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> menuAreaIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuAreaId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> menuAreaIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuAreaId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> menuCategoriesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuCategories',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> menuCategoriesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuCategories',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> menuCategoriesLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuCategories',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> menuCategoriesIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuCategories',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> menuCategoriesIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuCategories',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> menuCategoriesLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuCategories',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> menuCategoriesLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuCategories',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> menuCategoriesLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuCategories',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> requestIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'request',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> requestIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'request',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> requestEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'request',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> surveyIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'survey',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> surveyIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'survey',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> surveyHeaderIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'surveyHeader',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> surveyHeaderIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'surveyHeader',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> surveyHeaderIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'surveyHeaderId',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> surveyHeaderIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'surveyHeaderId',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> surveyHeaderIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'surveyHeaderId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> surveyHeaderIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'surveyHeaderId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> surveyHeaderIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'surveyHeaderId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> surveyHeaderIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'surveyHeaderId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> theShowIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'theShow',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> theShowIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'theShow',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> theShowEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'theShow',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> timetableAndReservationActiveIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'timetableAndReservationActive',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> timetableAndReservationActiveIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'timetableAndReservationActive',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> timetableAndReservationActiveEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'timetableAndReservationActive',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> titleIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'title',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> titleIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'title',
      ));
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> titleLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> titleIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> titleIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> titleLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> titleLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> titleLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }
}

extension RsDataMenuSectionModelQueryObject on QueryBuilder<
    RsDataMenuSectionModel, RsDataMenuSectionModel, QFilterCondition> {
  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
          QAfterFilterCondition>
      menuCategoriesElement(FilterQuery<RSDataMenuCategoriesModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'menuCategories');
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
      QAfterFilterCondition> survey(FilterQuery<RSDataSurveyModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'survey');
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
          QAfterFilterCondition>
      surveyHeader(FilterQuery<RSDataSurveyHeaderModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'surveyHeader');
    });
  }

  QueryBuilder<RsDataMenuSectionModel, RsDataMenuSectionModel,
          QAfterFilterCondition>
      titleElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'title');
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters

const RSDataMenuItemsModelSchema = Schema(
  name: r'RSDataMenuItemsModel',
  id: -6480207617101468829,
  properties: {
    r'accommodationPeriod': PropertySchema(
      id: 0,
      name: r'accommodationPeriod',
      type: IsarType.long,
    ),
    r'activateDeliveryPostCodes': PropertySchema(
      id: 1,
      name: r'activateDeliveryPostCodes',
      type: IsarType.bool,
    ),
    r'activateDeliveryRange': PropertySchema(
      id: 2,
      name: r'activateDeliveryRange',
      type: IsarType.bool,
    ),
    r'activateExcludedPostCodes': PropertySchema(
      id: 3,
      name: r'activateExcludedPostCodes',
      type: IsarType.bool,
    ),
    r'activateFreeDeliveryOverAmount': PropertySchema(
      id: 4,
      name: r'activateFreeDeliveryOverAmount',
      type: IsarType.bool,
    ),
    r'activateMapLocation': PropertySchema(
      id: 5,
      name: r'activateMapLocation',
      type: IsarType.bool,
    ),
    r'active': PropertySchema(
      id: 6,
      name: r'active',
      type: IsarType.bool,
    ),
    r'adultCount': PropertySchema(
      id: 7,
      name: r'adultCount',
      type: IsarType.long,
    ),
    r'autoApprove': PropertySchema(
      id: 8,
      name: r'autoApprove',
      type: IsarType.bool,
    ),
    r'babyCount': PropertySchema(
      id: 9,
      name: r'babyCount',
      type: IsarType.long,
    ),
    r'bookingSystem': PropertySchema(
      id: 10,
      name: r'bookingSystem',
      type: IsarType.string,
    ),
    r'bulletList': PropertySchema(
      id: 11,
      name: r'bulletList',
      type: IsarType.objectList,
      target: r'RSDataMenuItemBulletListModel',
    ),
    r'childCount': PropertySchema(
      id: 12,
      name: r'childCount',
      type: IsarType.long,
    ),
    r'closeAutoReplyMessage': PropertySchema(
      id: 13,
      name: r'closeAutoReplyMessage',
      type: IsarType.bool,
    ),
    r'deliveryPostCodes': PropertySchema(
      id: 14,
      name: r'deliveryPostCodes',
      type: IsarType.string,
    ),
    r'deliveryPriceDistanceRange_1': PropertySchema(
      id: 15,
      name: r'deliveryPriceDistanceRange_1',
      type: IsarType.double,
    ),
    r'deliveryPriceDistanceRange_2': PropertySchema(
      id: 16,
      name: r'deliveryPriceDistanceRange_2',
      type: IsarType.double,
    ),
    r'deliveryPriceDistanceRange_3': PropertySchema(
      id: 17,
      name: r'deliveryPriceDistanceRange_3',
      type: IsarType.double,
    ),
    r'deliveryPriceType_1': PropertySchema(
      id: 18,
      name: r'deliveryPriceType_1',
      type: IsarType.string,
    ),
    r'deliveryPriceType_2': PropertySchema(
      id: 19,
      name: r'deliveryPriceType_2',
      type: IsarType.string,
    ),
    r'deliveryPriceType_3': PropertySchema(
      id: 20,
      name: r'deliveryPriceType_3',
      type: IsarType.string,
    ),
    r'deliveryRange': PropertySchema(
      id: 21,
      name: r'deliveryRange',
      type: IsarType.long,
    ),
    r'deliveryUnitPrice_1': PropertySchema(
      id: 22,
      name: r'deliveryUnitPrice_1',
      type: IsarType.double,
    ),
    r'deliveryUnitPrice_2': PropertySchema(
      id: 23,
      name: r'deliveryUnitPrice_2',
      type: IsarType.double,
    ),
    r'deliveryUnitPrice_3': PropertySchema(
      id: 24,
      name: r'deliveryUnitPrice_3',
      type: IsarType.double,
    ),
    r'description': PropertySchema(
      id: 25,
      name: r'description',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'dressCode': PropertySchema(
      id: 26,
      name: r'dressCode',
      type: IsarType.string,
    ),
    r'email': PropertySchema(
      id: 27,
      name: r'email',
      type: IsarType.string,
    ),
    r'emailsOfTheStaff': PropertySchema(
      id: 28,
      name: r'emailsOfTheStaff',
      type: IsarType.string,
    ),
    r'endDate': PropertySchema(
      id: 29,
      name: r'endDate',
      type: IsarType.dateTime,
    ),
    r'excludedPostCodes': PropertySchema(
      id: 30,
      name: r'excludedPostCodes',
      type: IsarType.string,
    ),
    r'externalBookingEngineUrl': PropertySchema(
      id: 31,
      name: r'externalBookingEngineUrl',
      type: IsarType.string,
    ),
    r'featured': PropertySchema(
      id: 32,
      name: r'featured',
      type: IsarType.bool,
    ),
    r'fixMenu': PropertySchema(
      id: 33,
      name: r'fixMenu',
      type: IsarType.bool,
    ),
    r'freeDeliveryOverAmount': PropertySchema(
      id: 34,
      name: r'freeDeliveryOverAmount',
      type: IsarType.long,
    ),
    r'groupName': PropertySchema(
      id: 35,
      name: r'groupName',
      type: IsarType.string,
    ),
    r'hotelId': PropertySchema(
      id: 36,
      name: r'hotelId',
      type: IsarType.long,
    ),
    r'icibotId': PropertySchema(
      id: 37,
      name: r'icibotId',
      type: IsarType.long,
    ),
    r'imageUrl': PropertySchema(
      id: 38,
      name: r'imageUrl',
      type: IsarType.string,
    ),
    r'isUpsell': PropertySchema(
      id: 39,
      name: r'isUpsell',
      type: IsarType.bool,
    ),
    r'locationControlMandatory': PropertySchema(
      id: 40,
      name: r'locationControlMandatory',
      type: IsarType.bool,
    ),
    r'locationDescription': PropertySchema(
      id: 41,
      name: r'locationDescription',
      type: IsarType.string,
    ),
    r'loyaltyMaxPoint': PropertySchema(
      id: 42,
      name: r'loyaltyMaxPoint',
      type: IsarType.long,
    ),
    r'loyaltyMinPoint': PropertySchema(
      id: 43,
      name: r'loyaltyMinPoint',
      type: IsarType.long,
    ),
    r'mapLocation': PropertySchema(
      id: 44,
      name: r'mapLocation',
      type: IsarType.string,
    ),
    r'mapLocationPointIcon': PropertySchema(
      id: 45,
      name: r'mapLocationPointIcon',
      type: IsarType.string,
    ),
    r'maximumReservation': PropertySchema(
      id: 46,
      name: r'maximumReservation',
      type: IsarType.long,
    ),
    r'menuCategoryId': PropertySchema(
      id: 47,
      name: r'menuCategoryId',
      type: IsarType.long,
    ),
    r'menuCategoryName': PropertySchema(
      id: 48,
      name: r'menuCategoryName',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'menuItemBooks': PropertySchema(
      id: 49,
      name: r'menuItemBooks',
      type: IsarType.objectList,
      target: r'RSDataMenuItemBooksModel',
    ),
    r'menuItemCatalogGroups': PropertySchema(
      id: 50,
      name: r'menuItemCatalogGroups',
      type: IsarType.objectList,
      target: r'RSDataMenuItemCatalogGroupsModel',
    ),
    r'menuItemTitleAndDescriptions': PropertySchema(
      id: 51,
      name: r'menuItemTitleAndDescriptions',
      type: IsarType.objectList,
      target: r'RSDataMenuItemTitleAndDescriptionModel',
    ),
    r'menuSectionId': PropertySchema(
      id: 52,
      name: r'menuSectionId',
      type: IsarType.long,
    ),
    r'menuSectionName': PropertySchema(
      id: 53,
      name: r'menuSectionName',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'name': PropertySchema(
      id: 54,
      name: r'name',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'noAccommodationRequired': PropertySchema(
      id: 55,
      name: r'noAccommodationRequired',
      type: IsarType.bool,
    ),
    r'onlyTable': PropertySchema(
      id: 56,
      name: r'onlyTable',
      type: IsarType.bool,
    ),
    r'order': PropertySchema(
      id: 57,
      name: r'order',
      type: IsarType.bool,
    ),
    r'orderSystem': PropertySchema(
      id: 58,
      name: r'orderSystem',
      type: IsarType.bool,
    ),
    r'orderWithReservation': PropertySchema(
      id: 59,
      name: r'orderWithReservation',
      type: IsarType.bool,
    ),
    r'paymentType': PropertySchema(
      id: 60,
      name: r'paymentType',
      type: IsarType.string,
    ),
    r'phone': PropertySchema(
      id: 61,
      name: r'phone',
      type: IsarType.string,
    ),
    r'photos': PropertySchema(
      id: 62,
      name: r'photos',
      type: IsarType.string,
    ),
    r'priority': PropertySchema(
      id: 63,
      name: r'priority',
      type: IsarType.long,
    ),
    r'referenceCode': PropertySchema(
      id: 64,
      name: r'referenceCode',
      type: IsarType.string,
    ),
    r'reservationRestrictionType': PropertySchema(
      id: 65,
      name: r'reservationRestrictionType',
      type: IsarType.string,
    ),
    r'reservationRestrictionValue': PropertySchema(
      id: 66,
      name: r'reservationRestrictionValue',
      type: IsarType.long,
    ),
    r'seeMore': PropertySchema(
      id: 67,
      name: r'seeMore',
      type: IsarType.bool,
    ),
    r'seeMoreMenuSectionId': PropertySchema(
      id: 68,
      name: r'seeMoreMenuSectionId',
      type: IsarType.long,
    ),
    r'selectCapacity': PropertySchema(
      id: 69,
      name: r'selectCapacity',
      type: IsarType.bool,
    ),
    r'showBookingDate': PropertySchema(
      id: 70,
      name: r'showBookingDate',
      type: IsarType.bool,
    ),
    r'showBulletList': PropertySchema(
      id: 71,
      name: r'showBulletList',
      type: IsarType.bool,
    ),
    r'showComment': PropertySchema(
      id: 72,
      name: r'showComment',
      type: IsarType.bool,
    ),
    r'showDateRange': PropertySchema(
      id: 73,
      name: r'showDateRange',
      type: IsarType.bool,
    ),
    r'showDressCode': PropertySchema(
      id: 74,
      name: r'showDressCode',
      type: IsarType.bool,
    ),
    r'showEmail': PropertySchema(
      id: 75,
      name: r'showEmail',
      type: IsarType.bool,
    ),
    r'showFollow': PropertySchema(
      id: 76,
      name: r'showFollow',
      type: IsarType.bool,
    ),
    r'showLocationDescription': PropertySchema(
      id: 77,
      name: r'showLocationDescription',
      type: IsarType.bool,
    ),
    r'showLoyaltyPoint': PropertySchema(
      id: 78,
      name: r'showLoyaltyPoint',
      type: IsarType.bool,
    ),
    r'showMainCatalogGroup': PropertySchema(
      id: 79,
      name: r'showMainCatalogGroup',
      type: IsarType.bool,
    ),
    r'showOnHomePage': PropertySchema(
      id: 80,
      name: r'showOnHomePage',
      type: IsarType.bool,
    ),
    r'showOrderInfo': PropertySchema(
      id: 81,
      name: r'showOrderInfo',
      type: IsarType.bool,
    ),
    r'showPhoneNumber': PropertySchema(
      id: 82,
      name: r'showPhoneNumber',
      type: IsarType.bool,
    ),
    r'showPrice': PropertySchema(
      id: 83,
      name: r'showPrice',
      type: IsarType.bool,
    ),
    r'showSurvey': PropertySchema(
      id: 84,
      name: r'showSurvey',
      type: IsarType.bool,
    ),
    r'showTitleAndDescription': PropertySchema(
      id: 85,
      name: r'showTitleAndDescription',
      type: IsarType.bool,
    ),
    r'showVirtualTour': PropertySchema(
      id: 86,
      name: r'showVirtualTour',
      type: IsarType.bool,
    ),
    r'showWebSite': PropertySchema(
      id: 87,
      name: r'showWebSite',
      type: IsarType.bool,
    ),
    r'showYoutube': PropertySchema(
      id: 88,
      name: r'showYoutube',
      type: IsarType.bool,
    ),
    r'startDate': PropertySchema(
      id: 89,
      name: r'startDate',
      type: IsarType.dateTime,
    ),
    r'surveyDescription': PropertySchema(
      id: 90,
      name: r'surveyDescription',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'surveyHeader': PropertySchema(
      id: 91,
      name: r'surveyHeader',
      type: IsarType.object,
      target: r'RSDataSurveyHeaderModel',
    ),
    r'surveyHeaderId': PropertySchema(
      id: 92,
      name: r'surveyHeaderId',
      type: IsarType.long,
    ),
    r'surveyTitle': PropertySchema(
      id: 93,
      name: r'surveyTitle',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'urlLinks': PropertySchema(
      id: 94,
      name: r'urlLinks',
      type: IsarType.string,
    ),
    r'urlTitle': PropertySchema(
      id: 95,
      name: r'urlTitle',
      type: IsarType.string,
    ),
    r'userIdsForNotifications': PropertySchema(
      id: 96,
      name: r'userIdsForNotifications',
      type: IsarType.string,
    ),
    r'virtualTourUrl': PropertySchema(
      id: 97,
      name: r'virtualTourUrl',
      type: IsarType.string,
    ),
    r'webSiteTitle': PropertySchema(
      id: 98,
      name: r'webSiteTitle',
      type: IsarType.string,
    ),
    r'webSiteUrl': PropertySchema(
      id: 99,
      name: r'webSiteUrl',
      type: IsarType.string,
    ),
    r'youtube': PropertySchema(
      id: 100,
      name: r'youtube',
      type: IsarType.string,
    )
  },
  estimateSize: _rSDataMenuItemsModelEstimateSize,
  serialize: _rSDataMenuItemsModelSerialize,
  deserialize: _rSDataMenuItemsModelDeserialize,
  deserializeProp: _rSDataMenuItemsModelDeserializeProp,
);

int _rSDataMenuItemsModelEstimateSize(
  RSDataMenuItemsModel object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final value = object.bookingSystem;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.bulletList;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataMenuItemBulletListModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataMenuItemBulletListModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.deliveryPostCodes;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.deliveryPriceType_1;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.deliveryPriceType_2;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.deliveryPriceType_3;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.description;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.dressCode;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.email;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.emailsOfTheStaff;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.excludedPostCodes;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.externalBookingEngineUrl;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.groupName;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.imageUrl;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.locationDescription;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.mapLocation;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.mapLocationPointIcon;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.menuCategoryName;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.menuItemBooks;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataMenuItemBooksModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataMenuItemBooksModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.menuItemCatalogGroups;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataMenuItemCatalogGroupsModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataMenuItemCatalogGroupsModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.menuItemTitleAndDescriptions;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataMenuItemTitleAndDescriptionModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount +=
              RSDataMenuItemTitleAndDescriptionModelSchema.estimateSize(
                  value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.menuSectionName;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.name;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.paymentType;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.phone;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.photos;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.referenceCode;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.reservationRestrictionType;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.surveyDescription;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.surveyHeader;
    if (value != null) {
      bytesCount += 3 +
          RSDataSurveyHeaderModelSchema.estimateSize(
              value, allOffsets[RSDataSurveyHeaderModel]!, allOffsets);
    }
  }
  {
    final list = object.surveyTitle;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.urlLinks;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.urlTitle;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.userIdsForNotifications;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.virtualTourUrl;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.webSiteTitle;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.webSiteUrl;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.youtube;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  return bytesCount;
}

void _rSDataMenuItemsModelSerialize(
  RSDataMenuItemsModel object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeLong(offsets[0], object.accommodationPeriod);
  writer.writeBool(offsets[1], object.activateDeliveryPostCodes);
  writer.writeBool(offsets[2], object.activateDeliveryRange);
  writer.writeBool(offsets[3], object.activateExcludedPostCodes);
  writer.writeBool(offsets[4], object.activateFreeDeliveryOverAmount);
  writer.writeBool(offsets[5], object.activateMapLocation);
  writer.writeBool(offsets[6], object.active);
  writer.writeLong(offsets[7], object.adultCount);
  writer.writeBool(offsets[8], object.autoApprove);
  writer.writeLong(offsets[9], object.babyCount);
  writer.writeString(offsets[10], object.bookingSystem);
  writer.writeObjectList<RSDataMenuItemBulletListModel>(
    offsets[11],
    allOffsets,
    RSDataMenuItemBulletListModelSchema.serialize,
    object.bulletList,
  );
  writer.writeLong(offsets[12], object.childCount);
  writer.writeBool(offsets[13], object.closeAutoReplyMessage);
  writer.writeString(offsets[14], object.deliveryPostCodes);
  writer.writeDouble(offsets[15], object.deliveryPriceDistanceRange_1);
  writer.writeDouble(offsets[16], object.deliveryPriceDistanceRange_2);
  writer.writeDouble(offsets[17], object.deliveryPriceDistanceRange_3);
  writer.writeString(offsets[18], object.deliveryPriceType_1);
  writer.writeString(offsets[19], object.deliveryPriceType_2);
  writer.writeString(offsets[20], object.deliveryPriceType_3);
  writer.writeLong(offsets[21], object.deliveryRange);
  writer.writeDouble(offsets[22], object.deliveryUnitPrice_1);
  writer.writeDouble(offsets[23], object.deliveryUnitPrice_2);
  writer.writeDouble(offsets[24], object.deliveryUnitPrice_3);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[25],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.description,
  );
  writer.writeString(offsets[26], object.dressCode);
  writer.writeString(offsets[27], object.email);
  writer.writeString(offsets[28], object.emailsOfTheStaff);
  writer.writeDateTime(offsets[29], object.endDate);
  writer.writeString(offsets[30], object.excludedPostCodes);
  writer.writeString(offsets[31], object.externalBookingEngineUrl);
  writer.writeBool(offsets[32], object.featured);
  writer.writeBool(offsets[33], object.fixMenu);
  writer.writeLong(offsets[34], object.freeDeliveryOverAmount);
  writer.writeString(offsets[35], object.groupName);
  writer.writeLong(offsets[36], object.hotelId);
  writer.writeLong(offsets[37], object.icibotId);
  writer.writeString(offsets[38], object.imageUrl);
  writer.writeBool(offsets[39], object.isUpsell);
  writer.writeBool(offsets[40], object.locationControlMandatory);
  writer.writeString(offsets[41], object.locationDescription);
  writer.writeLong(offsets[42], object.loyaltyMaxPoint);
  writer.writeLong(offsets[43], object.loyaltyMinPoint);
  writer.writeString(offsets[44], object.mapLocation);
  writer.writeString(offsets[45], object.mapLocationPointIcon);
  writer.writeLong(offsets[46], object.maximumReservation);
  writer.writeLong(offsets[47], object.menuCategoryId);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[48],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.menuCategoryName,
  );
  writer.writeObjectList<RSDataMenuItemBooksModel>(
    offsets[49],
    allOffsets,
    RSDataMenuItemBooksModelSchema.serialize,
    object.menuItemBooks,
  );
  writer.writeObjectList<RSDataMenuItemCatalogGroupsModel>(
    offsets[50],
    allOffsets,
    RSDataMenuItemCatalogGroupsModelSchema.serialize,
    object.menuItemCatalogGroups,
  );
  writer.writeObjectList<RSDataMenuItemTitleAndDescriptionModel>(
    offsets[51],
    allOffsets,
    RSDataMenuItemTitleAndDescriptionModelSchema.serialize,
    object.menuItemTitleAndDescriptions,
  );
  writer.writeLong(offsets[52], object.menuSectionId);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[53],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.menuSectionName,
  );
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[54],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.name,
  );
  writer.writeBool(offsets[55], object.noAccommodationRequired);
  writer.writeBool(offsets[56], object.onlyTable);
  writer.writeBool(offsets[57], object.order);
  writer.writeBool(offsets[58], object.orderSystem);
  writer.writeBool(offsets[59], object.orderWithReservation);
  writer.writeString(offsets[60], object.paymentType);
  writer.writeString(offsets[61], object.phone);
  writer.writeString(offsets[62], object.photos);
  writer.writeLong(offsets[63], object.priority);
  writer.writeString(offsets[64], object.referenceCode);
  writer.writeString(offsets[65], object.reservationRestrictionType);
  writer.writeLong(offsets[66], object.reservationRestrictionValue);
  writer.writeBool(offsets[67], object.seeMore);
  writer.writeLong(offsets[68], object.seeMoreMenuSectionId);
  writer.writeBool(offsets[69], object.selectCapacity);
  writer.writeBool(offsets[70], object.showBookingDate);
  writer.writeBool(offsets[71], object.showBulletList);
  writer.writeBool(offsets[72], object.showComment);
  writer.writeBool(offsets[73], object.showDateRange);
  writer.writeBool(offsets[74], object.showDressCode);
  writer.writeBool(offsets[75], object.showEmail);
  writer.writeBool(offsets[76], object.showFollow);
  writer.writeBool(offsets[77], object.showLocationDescription);
  writer.writeBool(offsets[78], object.showLoyaltyPoint);
  writer.writeBool(offsets[79], object.showMainCatalogGroup);
  writer.writeBool(offsets[80], object.showOnHomePage);
  writer.writeBool(offsets[81], object.showOrderInfo);
  writer.writeBool(offsets[82], object.showPhoneNumber);
  writer.writeBool(offsets[83], object.showPrice);
  writer.writeBool(offsets[84], object.showSurvey);
  writer.writeBool(offsets[85], object.showTitleAndDescription);
  writer.writeBool(offsets[86], object.showVirtualTour);
  writer.writeBool(offsets[87], object.showWebSite);
  writer.writeBool(offsets[88], object.showYoutube);
  writer.writeDateTime(offsets[89], object.startDate);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[90],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.surveyDescription,
  );
  writer.writeObject<RSDataSurveyHeaderModel>(
    offsets[91],
    allOffsets,
    RSDataSurveyHeaderModelSchema.serialize,
    object.surveyHeader,
  );
  writer.writeLong(offsets[92], object.surveyHeaderId);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[93],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.surveyTitle,
  );
  writer.writeString(offsets[94], object.urlLinks);
  writer.writeString(offsets[95], object.urlTitle);
  writer.writeString(offsets[96], object.userIdsForNotifications);
  writer.writeString(offsets[97], object.virtualTourUrl);
  writer.writeString(offsets[98], object.webSiteTitle);
  writer.writeString(offsets[99], object.webSiteUrl);
  writer.writeString(offsets[100], object.youtube);
}

RSDataMenuItemsModel _rSDataMenuItemsModelDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = RSDataMenuItemsModel(
    accommodationPeriod: reader.readLongOrNull(offsets[0]),
    activateDeliveryPostCodes: reader.readBoolOrNull(offsets[1]),
    activateDeliveryRange: reader.readBoolOrNull(offsets[2]),
    activateExcludedPostCodes: reader.readBoolOrNull(offsets[3]),
    activateFreeDeliveryOverAmount: reader.readBoolOrNull(offsets[4]),
    activateMapLocation: reader.readBoolOrNull(offsets[5]),
    active: reader.readBoolOrNull(offsets[6]),
    adultCount: reader.readLongOrNull(offsets[7]),
    autoApprove: reader.readBoolOrNull(offsets[8]),
    babyCount: reader.readLongOrNull(offsets[9]),
    bookingSystem: reader.readStringOrNull(offsets[10]),
    bulletList: reader.readObjectList<RSDataMenuItemBulletListModel>(
      offsets[11],
      RSDataMenuItemBulletListModelSchema.deserialize,
      allOffsets,
      RSDataMenuItemBulletListModel(),
    ),
    childCount: reader.readLongOrNull(offsets[12]),
    closeAutoReplyMessage: reader.readBoolOrNull(offsets[13]),
    deliveryPostCodes: reader.readStringOrNull(offsets[14]),
    deliveryPriceDistanceRange_1: reader.readDoubleOrNull(offsets[15]),
    deliveryPriceDistanceRange_2: reader.readDoubleOrNull(offsets[16]),
    deliveryPriceDistanceRange_3: reader.readDoubleOrNull(offsets[17]),
    deliveryPriceType_1: reader.readStringOrNull(offsets[18]),
    deliveryPriceType_2: reader.readStringOrNull(offsets[19]),
    deliveryPriceType_3: reader.readStringOrNull(offsets[20]),
    deliveryRange: reader.readLongOrNull(offsets[21]),
    deliveryUnitPrice_1: reader.readDoubleOrNull(offsets[22]),
    deliveryUnitPrice_2: reader.readDoubleOrNull(offsets[23]),
    deliveryUnitPrice_3: reader.readDoubleOrNull(offsets[24]),
    description: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[25],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    dressCode: reader.readStringOrNull(offsets[26]),
    email: reader.readStringOrNull(offsets[27]),
    emailsOfTheStaff: reader.readStringOrNull(offsets[28]),
    endDate: reader.readDateTimeOrNull(offsets[29]),
    excludedPostCodes: reader.readStringOrNull(offsets[30]),
    externalBookingEngineUrl: reader.readStringOrNull(offsets[31]),
    featured: reader.readBoolOrNull(offsets[32]),
    fixMenu: reader.readBoolOrNull(offsets[33]),
    freeDeliveryOverAmount: reader.readLongOrNull(offsets[34]),
    groupName: reader.readStringOrNull(offsets[35]),
    hotelId: reader.readLongOrNull(offsets[36]),
    icibotId: reader.readLongOrNull(offsets[37]),
    imageUrl: reader.readStringOrNull(offsets[38]),
    isUpsell: reader.readBoolOrNull(offsets[39]),
    locationControlMandatory: reader.readBoolOrNull(offsets[40]),
    locationDescription: reader.readStringOrNull(offsets[41]),
    loyaltyMaxPoint: reader.readLongOrNull(offsets[42]),
    loyaltyMinPoint: reader.readLongOrNull(offsets[43]),
    mapLocation: reader.readStringOrNull(offsets[44]),
    mapLocationPointIcon: reader.readStringOrNull(offsets[45]),
    maximumReservation: reader.readLongOrNull(offsets[46]),
    menuCategoryId: reader.readLongOrNull(offsets[47]),
    menuCategoryName: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[48],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    menuItemBooks: reader.readObjectList<RSDataMenuItemBooksModel>(
      offsets[49],
      RSDataMenuItemBooksModelSchema.deserialize,
      allOffsets,
      RSDataMenuItemBooksModel(),
    ),
    menuItemCatalogGroups:
        reader.readObjectList<RSDataMenuItemCatalogGroupsModel>(
      offsets[50],
      RSDataMenuItemCatalogGroupsModelSchema.deserialize,
      allOffsets,
      RSDataMenuItemCatalogGroupsModel(),
    ),
    menuItemTitleAndDescriptions:
        reader.readObjectList<RSDataMenuItemTitleAndDescriptionModel>(
      offsets[51],
      RSDataMenuItemTitleAndDescriptionModelSchema.deserialize,
      allOffsets,
      RSDataMenuItemTitleAndDescriptionModel(),
    ),
    menuSectionId: reader.readLongOrNull(offsets[52]),
    menuSectionName: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[53],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    name: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[54],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    noAccommodationRequired: reader.readBoolOrNull(offsets[55]),
    onlyTable: reader.readBoolOrNull(offsets[56]),
    order: reader.readBoolOrNull(offsets[57]),
    orderSystem: reader.readBoolOrNull(offsets[58]),
    orderWithReservation: reader.readBoolOrNull(offsets[59]),
    paymentType: reader.readStringOrNull(offsets[60]),
    phone: reader.readStringOrNull(offsets[61]),
    photos: reader.readStringOrNull(offsets[62]),
    priority: reader.readLongOrNull(offsets[63]),
    referenceCode: reader.readStringOrNull(offsets[64]),
    reservationRestrictionType: reader.readStringOrNull(offsets[65]),
    reservationRestrictionValue: reader.readLongOrNull(offsets[66]),
    seeMore: reader.readBoolOrNull(offsets[67]),
    seeMoreMenuSectionId: reader.readLongOrNull(offsets[68]),
    selectCapacity: reader.readBoolOrNull(offsets[69]),
    showBookingDate: reader.readBoolOrNull(offsets[70]),
    showBulletList: reader.readBoolOrNull(offsets[71]),
    showComment: reader.readBoolOrNull(offsets[72]),
    showDateRange: reader.readBoolOrNull(offsets[73]),
    showDressCode: reader.readBoolOrNull(offsets[74]),
    showEmail: reader.readBoolOrNull(offsets[75]),
    showFollow: reader.readBoolOrNull(offsets[76]),
    showLocationDescription: reader.readBoolOrNull(offsets[77]),
    showLoyaltyPoint: reader.readBoolOrNull(offsets[78]),
    showMainCatalogGroup: reader.readBoolOrNull(offsets[79]),
    showOnHomePage: reader.readBoolOrNull(offsets[80]),
    showOrderInfo: reader.readBoolOrNull(offsets[81]),
    showPhoneNumber: reader.readBoolOrNull(offsets[82]),
    showPrice: reader.readBoolOrNull(offsets[83]),
    showSurvey: reader.readBoolOrNull(offsets[84]),
    showTitleAndDescription: reader.readBoolOrNull(offsets[85]),
    showVirtualTour: reader.readBoolOrNull(offsets[86]),
    showWebSite: reader.readBoolOrNull(offsets[87]),
    showYoutube: reader.readBoolOrNull(offsets[88]),
    startDate: reader.readDateTimeOrNull(offsets[89]),
    surveyDescription: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[90],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    surveyHeader: reader.readObjectOrNull<RSDataSurveyHeaderModel>(
      offsets[91],
      RSDataSurveyHeaderModelSchema.deserialize,
      allOffsets,
    ),
    surveyHeaderId: reader.readLongOrNull(offsets[92]),
    surveyTitle: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[93],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    urlLinks: reader.readStringOrNull(offsets[94]),
    urlTitle: reader.readStringOrNull(offsets[95]),
    userIdsForNotifications: reader.readStringOrNull(offsets[96]),
    virtualTourUrl: reader.readStringOrNull(offsets[97]),
    webSiteTitle: reader.readStringOrNull(offsets[98]),
    webSiteUrl: reader.readStringOrNull(offsets[99]),
    youtube: reader.readStringOrNull(offsets[100]),
  );
  return object;
}

P _rSDataMenuItemsModelDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readLongOrNull(offset)) as P;
    case 1:
      return (reader.readBoolOrNull(offset)) as P;
    case 2:
      return (reader.readBoolOrNull(offset)) as P;
    case 3:
      return (reader.readBoolOrNull(offset)) as P;
    case 4:
      return (reader.readBoolOrNull(offset)) as P;
    case 5:
      return (reader.readBoolOrNull(offset)) as P;
    case 6:
      return (reader.readBoolOrNull(offset)) as P;
    case 7:
      return (reader.readLongOrNull(offset)) as P;
    case 8:
      return (reader.readBoolOrNull(offset)) as P;
    case 9:
      return (reader.readLongOrNull(offset)) as P;
    case 10:
      return (reader.readStringOrNull(offset)) as P;
    case 11:
      return (reader.readObjectList<RSDataMenuItemBulletListModel>(
        offset,
        RSDataMenuItemBulletListModelSchema.deserialize,
        allOffsets,
        RSDataMenuItemBulletListModel(),
      )) as P;
    case 12:
      return (reader.readLongOrNull(offset)) as P;
    case 13:
      return (reader.readBoolOrNull(offset)) as P;
    case 14:
      return (reader.readStringOrNull(offset)) as P;
    case 15:
      return (reader.readDoubleOrNull(offset)) as P;
    case 16:
      return (reader.readDoubleOrNull(offset)) as P;
    case 17:
      return (reader.readDoubleOrNull(offset)) as P;
    case 18:
      return (reader.readStringOrNull(offset)) as P;
    case 19:
      return (reader.readStringOrNull(offset)) as P;
    case 20:
      return (reader.readStringOrNull(offset)) as P;
    case 21:
      return (reader.readLongOrNull(offset)) as P;
    case 22:
      return (reader.readDoubleOrNull(offset)) as P;
    case 23:
      return (reader.readDoubleOrNull(offset)) as P;
    case 24:
      return (reader.readDoubleOrNull(offset)) as P;
    case 25:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 26:
      return (reader.readStringOrNull(offset)) as P;
    case 27:
      return (reader.readStringOrNull(offset)) as P;
    case 28:
      return (reader.readStringOrNull(offset)) as P;
    case 29:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 30:
      return (reader.readStringOrNull(offset)) as P;
    case 31:
      return (reader.readStringOrNull(offset)) as P;
    case 32:
      return (reader.readBoolOrNull(offset)) as P;
    case 33:
      return (reader.readBoolOrNull(offset)) as P;
    case 34:
      return (reader.readLongOrNull(offset)) as P;
    case 35:
      return (reader.readStringOrNull(offset)) as P;
    case 36:
      return (reader.readLongOrNull(offset)) as P;
    case 37:
      return (reader.readLongOrNull(offset)) as P;
    case 38:
      return (reader.readStringOrNull(offset)) as P;
    case 39:
      return (reader.readBoolOrNull(offset)) as P;
    case 40:
      return (reader.readBoolOrNull(offset)) as P;
    case 41:
      return (reader.readStringOrNull(offset)) as P;
    case 42:
      return (reader.readLongOrNull(offset)) as P;
    case 43:
      return (reader.readLongOrNull(offset)) as P;
    case 44:
      return (reader.readStringOrNull(offset)) as P;
    case 45:
      return (reader.readStringOrNull(offset)) as P;
    case 46:
      return (reader.readLongOrNull(offset)) as P;
    case 47:
      return (reader.readLongOrNull(offset)) as P;
    case 48:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 49:
      return (reader.readObjectList<RSDataMenuItemBooksModel>(
        offset,
        RSDataMenuItemBooksModelSchema.deserialize,
        allOffsets,
        RSDataMenuItemBooksModel(),
      )) as P;
    case 50:
      return (reader.readObjectList<RSDataMenuItemCatalogGroupsModel>(
        offset,
        RSDataMenuItemCatalogGroupsModelSchema.deserialize,
        allOffsets,
        RSDataMenuItemCatalogGroupsModel(),
      )) as P;
    case 51:
      return (reader.readObjectList<RSDataMenuItemTitleAndDescriptionModel>(
        offset,
        RSDataMenuItemTitleAndDescriptionModelSchema.deserialize,
        allOffsets,
        RSDataMenuItemTitleAndDescriptionModel(),
      )) as P;
    case 52:
      return (reader.readLongOrNull(offset)) as P;
    case 53:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 54:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 55:
      return (reader.readBoolOrNull(offset)) as P;
    case 56:
      return (reader.readBoolOrNull(offset)) as P;
    case 57:
      return (reader.readBoolOrNull(offset)) as P;
    case 58:
      return (reader.readBoolOrNull(offset)) as P;
    case 59:
      return (reader.readBoolOrNull(offset)) as P;
    case 60:
      return (reader.readStringOrNull(offset)) as P;
    case 61:
      return (reader.readStringOrNull(offset)) as P;
    case 62:
      return (reader.readStringOrNull(offset)) as P;
    case 63:
      return (reader.readLongOrNull(offset)) as P;
    case 64:
      return (reader.readStringOrNull(offset)) as P;
    case 65:
      return (reader.readStringOrNull(offset)) as P;
    case 66:
      return (reader.readLongOrNull(offset)) as P;
    case 67:
      return (reader.readBoolOrNull(offset)) as P;
    case 68:
      return (reader.readLongOrNull(offset)) as P;
    case 69:
      return (reader.readBoolOrNull(offset)) as P;
    case 70:
      return (reader.readBoolOrNull(offset)) as P;
    case 71:
      return (reader.readBoolOrNull(offset)) as P;
    case 72:
      return (reader.readBoolOrNull(offset)) as P;
    case 73:
      return (reader.readBoolOrNull(offset)) as P;
    case 74:
      return (reader.readBoolOrNull(offset)) as P;
    case 75:
      return (reader.readBoolOrNull(offset)) as P;
    case 76:
      return (reader.readBoolOrNull(offset)) as P;
    case 77:
      return (reader.readBoolOrNull(offset)) as P;
    case 78:
      return (reader.readBoolOrNull(offset)) as P;
    case 79:
      return (reader.readBoolOrNull(offset)) as P;
    case 80:
      return (reader.readBoolOrNull(offset)) as P;
    case 81:
      return (reader.readBoolOrNull(offset)) as P;
    case 82:
      return (reader.readBoolOrNull(offset)) as P;
    case 83:
      return (reader.readBoolOrNull(offset)) as P;
    case 84:
      return (reader.readBoolOrNull(offset)) as P;
    case 85:
      return (reader.readBoolOrNull(offset)) as P;
    case 86:
      return (reader.readBoolOrNull(offset)) as P;
    case 87:
      return (reader.readBoolOrNull(offset)) as P;
    case 88:
      return (reader.readBoolOrNull(offset)) as P;
    case 89:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 90:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 91:
      return (reader.readObjectOrNull<RSDataSurveyHeaderModel>(
        offset,
        RSDataSurveyHeaderModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 92:
      return (reader.readLongOrNull(offset)) as P;
    case 93:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 94:
      return (reader.readStringOrNull(offset)) as P;
    case 95:
      return (reader.readStringOrNull(offset)) as P;
    case 96:
      return (reader.readStringOrNull(offset)) as P;
    case 97:
      return (reader.readStringOrNull(offset)) as P;
    case 98:
      return (reader.readStringOrNull(offset)) as P;
    case 99:
      return (reader.readStringOrNull(offset)) as P;
    case 100:
      return (reader.readStringOrNull(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension RSDataMenuItemsModelQueryFilter on QueryBuilder<RSDataMenuItemsModel,
    RSDataMenuItemsModel, QFilterCondition> {
  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> accommodationPeriodIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'accommodationPeriod',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> accommodationPeriodIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'accommodationPeriod',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> accommodationPeriodEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'accommodationPeriod',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> accommodationPeriodGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'accommodationPeriod',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> accommodationPeriodLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'accommodationPeriod',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> accommodationPeriodBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'accommodationPeriod',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> activateDeliveryPostCodesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'activateDeliveryPostCodes',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> activateDeliveryPostCodesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'activateDeliveryPostCodes',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> activateDeliveryPostCodesEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'activateDeliveryPostCodes',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> activateDeliveryRangeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'activateDeliveryRange',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> activateDeliveryRangeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'activateDeliveryRange',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> activateDeliveryRangeEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'activateDeliveryRange',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> activateExcludedPostCodesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'activateExcludedPostCodes',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> activateExcludedPostCodesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'activateExcludedPostCodes',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> activateExcludedPostCodesEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'activateExcludedPostCodes',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> activateFreeDeliveryOverAmountIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'activateFreeDeliveryOverAmount',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> activateFreeDeliveryOverAmountIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'activateFreeDeliveryOverAmount',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      activateFreeDeliveryOverAmountEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'activateFreeDeliveryOverAmount',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> activateMapLocationIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'activateMapLocation',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> activateMapLocationIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'activateMapLocation',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> activateMapLocationEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'activateMapLocation',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> activeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'active',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> activeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'active',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> activeEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'active',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> adultCountIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'adultCount',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> adultCountIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'adultCount',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> adultCountEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'adultCount',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> adultCountGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'adultCount',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> adultCountLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'adultCount',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> adultCountBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'adultCount',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> autoApproveIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'autoApprove',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> autoApproveIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'autoApprove',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> autoApproveEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'autoApprove',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> babyCountIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'babyCount',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> babyCountIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'babyCount',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> babyCountEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'babyCount',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> babyCountGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'babyCount',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> babyCountLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'babyCount',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> babyCountBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'babyCount',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> bookingSystemIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'bookingSystem',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> bookingSystemIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'bookingSystem',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> bookingSystemEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'bookingSystem',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> bookingSystemGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'bookingSystem',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> bookingSystemLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'bookingSystem',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> bookingSystemBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'bookingSystem',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> bookingSystemStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'bookingSystem',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> bookingSystemEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'bookingSystem',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      bookingSystemContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'bookingSystem',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      bookingSystemMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'bookingSystem',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> bookingSystemIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'bookingSystem',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> bookingSystemIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'bookingSystem',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> bulletListIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'bulletList',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> bulletListIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'bulletList',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> bulletListLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'bulletList',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> bulletListIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'bulletList',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> bulletListIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'bulletList',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> bulletListLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'bulletList',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> bulletListLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'bulletList',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> bulletListLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'bulletList',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> childCountIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'childCount',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> childCountIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'childCount',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> childCountEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'childCount',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> childCountGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'childCount',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> childCountLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'childCount',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> childCountBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'childCount',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> closeAutoReplyMessageIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'closeAutoReplyMessage',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> closeAutoReplyMessageIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'closeAutoReplyMessage',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> closeAutoReplyMessageEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'closeAutoReplyMessage',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPostCodesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'deliveryPostCodes',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPostCodesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'deliveryPostCodes',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPostCodesEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deliveryPostCodes',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPostCodesGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'deliveryPostCodes',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPostCodesLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'deliveryPostCodes',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPostCodesBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'deliveryPostCodes',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPostCodesStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'deliveryPostCodes',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPostCodesEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'deliveryPostCodes',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      deliveryPostCodesContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'deliveryPostCodes',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      deliveryPostCodesMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'deliveryPostCodes',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPostCodesIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deliveryPostCodes',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPostCodesIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'deliveryPostCodes',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceDistanceRange_1IsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'deliveryPriceDistanceRange_1',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceDistanceRange_1IsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'deliveryPriceDistanceRange_1',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceDistanceRange_1EqualTo(
    double? value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deliveryPriceDistanceRange_1',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceDistanceRange_1GreaterThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'deliveryPriceDistanceRange_1',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceDistanceRange_1LessThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'deliveryPriceDistanceRange_1',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceDistanceRange_1Between(
    double? lower,
    double? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'deliveryPriceDistanceRange_1',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceDistanceRange_2IsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'deliveryPriceDistanceRange_2',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceDistanceRange_2IsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'deliveryPriceDistanceRange_2',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceDistanceRange_2EqualTo(
    double? value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deliveryPriceDistanceRange_2',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceDistanceRange_2GreaterThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'deliveryPriceDistanceRange_2',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceDistanceRange_2LessThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'deliveryPriceDistanceRange_2',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceDistanceRange_2Between(
    double? lower,
    double? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'deliveryPriceDistanceRange_2',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceDistanceRange_3IsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'deliveryPriceDistanceRange_3',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceDistanceRange_3IsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'deliveryPriceDistanceRange_3',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceDistanceRange_3EqualTo(
    double? value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deliveryPriceDistanceRange_3',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceDistanceRange_3GreaterThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'deliveryPriceDistanceRange_3',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceDistanceRange_3LessThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'deliveryPriceDistanceRange_3',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceDistanceRange_3Between(
    double? lower,
    double? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'deliveryPriceDistanceRange_3',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_1IsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'deliveryPriceType_1',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_1IsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'deliveryPriceType_1',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_1EqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deliveryPriceType_1',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_1GreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'deliveryPriceType_1',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_1LessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'deliveryPriceType_1',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_1Between(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'deliveryPriceType_1',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_1StartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'deliveryPriceType_1',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_1EndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'deliveryPriceType_1',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      deliveryPriceType_1Contains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'deliveryPriceType_1',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      deliveryPriceType_1Matches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'deliveryPriceType_1',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_1IsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deliveryPriceType_1',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_1IsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'deliveryPriceType_1',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_2IsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'deliveryPriceType_2',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_2IsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'deliveryPriceType_2',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_2EqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deliveryPriceType_2',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_2GreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'deliveryPriceType_2',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_2LessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'deliveryPriceType_2',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_2Between(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'deliveryPriceType_2',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_2StartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'deliveryPriceType_2',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_2EndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'deliveryPriceType_2',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      deliveryPriceType_2Contains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'deliveryPriceType_2',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      deliveryPriceType_2Matches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'deliveryPriceType_2',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_2IsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deliveryPriceType_2',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_2IsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'deliveryPriceType_2',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_3IsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'deliveryPriceType_3',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_3IsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'deliveryPriceType_3',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_3EqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deliveryPriceType_3',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_3GreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'deliveryPriceType_3',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_3LessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'deliveryPriceType_3',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_3Between(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'deliveryPriceType_3',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_3StartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'deliveryPriceType_3',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_3EndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'deliveryPriceType_3',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      deliveryPriceType_3Contains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'deliveryPriceType_3',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      deliveryPriceType_3Matches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'deliveryPriceType_3',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_3IsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deliveryPriceType_3',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryPriceType_3IsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'deliveryPriceType_3',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryRangeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'deliveryRange',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryRangeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'deliveryRange',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryRangeEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deliveryRange',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryRangeGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'deliveryRange',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryRangeLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'deliveryRange',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryRangeBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'deliveryRange',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryUnitPrice_1IsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'deliveryUnitPrice_1',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryUnitPrice_1IsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'deliveryUnitPrice_1',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryUnitPrice_1EqualTo(
    double? value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deliveryUnitPrice_1',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryUnitPrice_1GreaterThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'deliveryUnitPrice_1',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryUnitPrice_1LessThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'deliveryUnitPrice_1',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryUnitPrice_1Between(
    double? lower,
    double? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'deliveryUnitPrice_1',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryUnitPrice_2IsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'deliveryUnitPrice_2',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryUnitPrice_2IsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'deliveryUnitPrice_2',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryUnitPrice_2EqualTo(
    double? value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deliveryUnitPrice_2',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryUnitPrice_2GreaterThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'deliveryUnitPrice_2',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryUnitPrice_2LessThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'deliveryUnitPrice_2',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryUnitPrice_2Between(
    double? lower,
    double? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'deliveryUnitPrice_2',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryUnitPrice_3IsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'deliveryUnitPrice_3',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryUnitPrice_3IsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'deliveryUnitPrice_3',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryUnitPrice_3EqualTo(
    double? value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deliveryUnitPrice_3',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryUnitPrice_3GreaterThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'deliveryUnitPrice_3',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryUnitPrice_3LessThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'deliveryUnitPrice_3',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> deliveryUnitPrice_3Between(
    double? lower,
    double? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'deliveryUnitPrice_3',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> descriptionIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'description',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> descriptionIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'description',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> descriptionLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> descriptionIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> descriptionIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> descriptionLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> descriptionLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> descriptionLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> dressCodeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'dressCode',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> dressCodeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'dressCode',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> dressCodeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'dressCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> dressCodeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'dressCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> dressCodeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'dressCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> dressCodeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'dressCode',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> dressCodeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'dressCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> dressCodeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'dressCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      dressCodeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'dressCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      dressCodeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'dressCode',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> dressCodeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'dressCode',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> dressCodeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'dressCode',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'email',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'email',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'email',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      emailContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      emailMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'email',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'email',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'email',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailsOfTheStaffIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'emailsOfTheStaff',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailsOfTheStaffIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'emailsOfTheStaff',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailsOfTheStaffEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'emailsOfTheStaff',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailsOfTheStaffGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'emailsOfTheStaff',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailsOfTheStaffLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'emailsOfTheStaff',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailsOfTheStaffBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'emailsOfTheStaff',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailsOfTheStaffStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'emailsOfTheStaff',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailsOfTheStaffEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'emailsOfTheStaff',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      emailsOfTheStaffContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'emailsOfTheStaff',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      emailsOfTheStaffMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'emailsOfTheStaff',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailsOfTheStaffIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'emailsOfTheStaff',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> emailsOfTheStaffIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'emailsOfTheStaff',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> endDateIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'endDate',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> endDateIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'endDate',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> endDateEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'endDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> endDateGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'endDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> endDateLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'endDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> endDateBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'endDate',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> excludedPostCodesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'excludedPostCodes',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> excludedPostCodesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'excludedPostCodes',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> excludedPostCodesEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'excludedPostCodes',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> excludedPostCodesGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'excludedPostCodes',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> excludedPostCodesLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'excludedPostCodes',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> excludedPostCodesBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'excludedPostCodes',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> excludedPostCodesStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'excludedPostCodes',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> excludedPostCodesEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'excludedPostCodes',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      excludedPostCodesContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'excludedPostCodes',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      excludedPostCodesMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'excludedPostCodes',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> excludedPostCodesIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'excludedPostCodes',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> excludedPostCodesIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'excludedPostCodes',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> externalBookingEngineUrlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'externalBookingEngineUrl',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> externalBookingEngineUrlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'externalBookingEngineUrl',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> externalBookingEngineUrlEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'externalBookingEngineUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> externalBookingEngineUrlGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'externalBookingEngineUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> externalBookingEngineUrlLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'externalBookingEngineUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> externalBookingEngineUrlBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'externalBookingEngineUrl',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> externalBookingEngineUrlStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'externalBookingEngineUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> externalBookingEngineUrlEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'externalBookingEngineUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      externalBookingEngineUrlContains(String value,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'externalBookingEngineUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      externalBookingEngineUrlMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'externalBookingEngineUrl',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> externalBookingEngineUrlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'externalBookingEngineUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> externalBookingEngineUrlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'externalBookingEngineUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> featuredIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'featured',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> featuredIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'featured',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> featuredEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'featured',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> fixMenuIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'fixMenu',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> fixMenuIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'fixMenu',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> fixMenuEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'fixMenu',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> freeDeliveryOverAmountIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'freeDeliveryOverAmount',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> freeDeliveryOverAmountIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'freeDeliveryOverAmount',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> freeDeliveryOverAmountEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'freeDeliveryOverAmount',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> freeDeliveryOverAmountGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'freeDeliveryOverAmount',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> freeDeliveryOverAmountLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'freeDeliveryOverAmount',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> freeDeliveryOverAmountBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'freeDeliveryOverAmount',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> groupNameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'groupName',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> groupNameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'groupName',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> groupNameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'groupName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> groupNameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'groupName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> groupNameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'groupName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> groupNameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'groupName',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> groupNameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'groupName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> groupNameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'groupName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      groupNameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'groupName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      groupNameMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'groupName',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> groupNameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'groupName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> groupNameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'groupName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> hotelIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> hotelIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> hotelIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> hotelIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> hotelIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> hotelIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> icibotIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'icibotId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> icibotIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'icibotId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> icibotIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> icibotIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> icibotIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> icibotIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'icibotId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> imageUrlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'imageUrl',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> imageUrlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'imageUrl',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> imageUrlEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> imageUrlGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> imageUrlLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> imageUrlBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'imageUrl',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> imageUrlStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> imageUrlEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      imageUrlContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      imageUrlMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'imageUrl',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> imageUrlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'imageUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> imageUrlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'imageUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> isUpsellIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'isUpsell',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> isUpsellIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'isUpsell',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> isUpsellEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isUpsell',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> locationControlMandatoryIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'locationControlMandatory',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> locationControlMandatoryIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'locationControlMandatory',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> locationControlMandatoryEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'locationControlMandatory',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> locationDescriptionIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'locationDescription',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> locationDescriptionIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'locationDescription',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> locationDescriptionEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'locationDescription',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> locationDescriptionGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'locationDescription',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> locationDescriptionLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'locationDescription',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> locationDescriptionBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'locationDescription',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> locationDescriptionStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'locationDescription',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> locationDescriptionEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'locationDescription',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      locationDescriptionContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'locationDescription',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      locationDescriptionMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'locationDescription',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> locationDescriptionIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'locationDescription',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> locationDescriptionIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'locationDescription',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> loyaltyMaxPointIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'loyaltyMaxPoint',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> loyaltyMaxPointIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'loyaltyMaxPoint',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> loyaltyMaxPointEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'loyaltyMaxPoint',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> loyaltyMaxPointGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'loyaltyMaxPoint',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> loyaltyMaxPointLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'loyaltyMaxPoint',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> loyaltyMaxPointBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'loyaltyMaxPoint',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> loyaltyMinPointIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'loyaltyMinPoint',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> loyaltyMinPointIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'loyaltyMinPoint',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> loyaltyMinPointEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'loyaltyMinPoint',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> loyaltyMinPointGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'loyaltyMinPoint',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> loyaltyMinPointLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'loyaltyMinPoint',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> loyaltyMinPointBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'loyaltyMinPoint',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'mapLocation',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'mapLocation',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'mapLocation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'mapLocation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'mapLocation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'mapLocation',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'mapLocation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'mapLocation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      mapLocationContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'mapLocation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      mapLocationMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'mapLocation',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'mapLocation',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'mapLocation',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationPointIconIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'mapLocationPointIcon',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationPointIconIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'mapLocationPointIcon',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationPointIconEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'mapLocationPointIcon',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationPointIconGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'mapLocationPointIcon',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationPointIconLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'mapLocationPointIcon',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationPointIconBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'mapLocationPointIcon',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationPointIconStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'mapLocationPointIcon',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationPointIconEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'mapLocationPointIcon',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      mapLocationPointIconContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'mapLocationPointIcon',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      mapLocationPointIconMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'mapLocationPointIcon',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationPointIconIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'mapLocationPointIcon',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> mapLocationPointIconIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'mapLocationPointIcon',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> maximumReservationIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'maximumReservation',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> maximumReservationIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'maximumReservation',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> maximumReservationEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'maximumReservation',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> maximumReservationGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'maximumReservation',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> maximumReservationLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'maximumReservation',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> maximumReservationBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'maximumReservation',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuCategoryIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuCategoryId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuCategoryIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuCategoryId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuCategoryIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuCategoryId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuCategoryIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuCategoryId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuCategoryIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuCategoryId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuCategoryIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuCategoryId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuCategoryNameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuCategoryName',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuCategoryNameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuCategoryName',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuCategoryNameLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuCategoryName',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuCategoryNameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuCategoryName',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuCategoryNameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuCategoryName',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuCategoryNameLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuCategoryName',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuCategoryNameLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuCategoryName',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuCategoryNameLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuCategoryName',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemBooksIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemBooks',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemBooksIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemBooks',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemBooksLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemBooks',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemBooksIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemBooks',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemBooksIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemBooks',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemBooksLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemBooks',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemBooksLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemBooks',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemBooksLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemBooks',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemCatalogGroupsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemCatalogGroups',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemCatalogGroupsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemCatalogGroups',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemCatalogGroupsLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogGroups',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemCatalogGroupsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogGroups',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemCatalogGroupsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogGroups',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemCatalogGroupsLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogGroups',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemCatalogGroupsLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogGroups',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemCatalogGroupsLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogGroups',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemTitleAndDescriptionsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemTitleAndDescriptions',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemTitleAndDescriptionsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemTitleAndDescriptions',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      menuItemTitleAndDescriptionsLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemTitleAndDescriptions',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemTitleAndDescriptionsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemTitleAndDescriptions',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemTitleAndDescriptionsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemTitleAndDescriptions',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemTitleAndDescriptionsLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemTitleAndDescriptions',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemTitleAndDescriptionsLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemTitleAndDescriptions',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuItemTitleAndDescriptionsLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemTitleAndDescriptions',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuSectionIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuSectionId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuSectionIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuSectionId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuSectionIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuSectionId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuSectionIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuSectionId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuSectionIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuSectionId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuSectionIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuSectionId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuSectionNameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuSectionName',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuSectionNameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuSectionName',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuSectionNameLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuSectionName',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuSectionNameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuSectionName',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuSectionNameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuSectionName',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuSectionNameLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuSectionName',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuSectionNameLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuSectionName',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> menuSectionNameLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuSectionName',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> nameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> nameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> nameLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> nameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> nameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> nameLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> nameLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> nameLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> noAccommodationRequiredIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'noAccommodationRequired',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> noAccommodationRequiredIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'noAccommodationRequired',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> noAccommodationRequiredEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'noAccommodationRequired',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> onlyTableIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'onlyTable',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> onlyTableIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'onlyTable',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> onlyTableEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'onlyTable',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> orderIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'order',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> orderIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'order',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> orderEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'order',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> orderSystemIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'orderSystem',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> orderSystemIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'orderSystem',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> orderSystemEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'orderSystem',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> orderWithReservationIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'orderWithReservation',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> orderWithReservationIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'orderWithReservation',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> orderWithReservationEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'orderWithReservation',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> paymentTypeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'paymentType',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> paymentTypeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'paymentType',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> paymentTypeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'paymentType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> paymentTypeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'paymentType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> paymentTypeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'paymentType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> paymentTypeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'paymentType',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> paymentTypeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'paymentType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> paymentTypeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'paymentType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      paymentTypeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'paymentType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      paymentTypeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'paymentType',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> paymentTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'paymentType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> paymentTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'paymentType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> phoneIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'phone',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> phoneIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'phone',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> phoneEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'phone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> phoneGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'phone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> phoneLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'phone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> phoneBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'phone',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> phoneStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'phone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> phoneEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'phone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      phoneContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'phone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      phoneMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'phone',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> phoneIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'phone',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> phoneIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'phone',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> photosIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'photos',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> photosIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'photos',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> photosEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'photos',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> photosGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'photos',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> photosLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'photos',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> photosBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'photos',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> photosStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'photos',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> photosEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'photos',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      photosContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'photos',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      photosMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'photos',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> photosIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'photos',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> photosIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'photos',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> priorityIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'priority',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> priorityIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'priority',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> priorityEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'priority',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> priorityGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'priority',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> priorityLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'priority',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> priorityBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'priority',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> referenceCodeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'referenceCode',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> referenceCodeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'referenceCode',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> referenceCodeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'referenceCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> referenceCodeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'referenceCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> referenceCodeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'referenceCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> referenceCodeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'referenceCode',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> referenceCodeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'referenceCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> referenceCodeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'referenceCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      referenceCodeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'referenceCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      referenceCodeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'referenceCode',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> referenceCodeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'referenceCode',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> referenceCodeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'referenceCode',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> reservationRestrictionTypeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'reservationRestrictionType',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> reservationRestrictionTypeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'reservationRestrictionType',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> reservationRestrictionTypeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'reservationRestrictionType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> reservationRestrictionTypeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'reservationRestrictionType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> reservationRestrictionTypeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'reservationRestrictionType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> reservationRestrictionTypeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'reservationRestrictionType',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> reservationRestrictionTypeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'reservationRestrictionType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> reservationRestrictionTypeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'reservationRestrictionType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      reservationRestrictionTypeContains(String value,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'reservationRestrictionType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      reservationRestrictionTypeMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'reservationRestrictionType',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> reservationRestrictionTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'reservationRestrictionType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> reservationRestrictionTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'reservationRestrictionType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> reservationRestrictionValueIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'reservationRestrictionValue',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> reservationRestrictionValueIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'reservationRestrictionValue',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> reservationRestrictionValueEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'reservationRestrictionValue',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> reservationRestrictionValueGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'reservationRestrictionValue',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> reservationRestrictionValueLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'reservationRestrictionValue',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> reservationRestrictionValueBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'reservationRestrictionValue',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> seeMoreIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'seeMore',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> seeMoreIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'seeMore',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> seeMoreEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'seeMore',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> seeMoreMenuSectionIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'seeMoreMenuSectionId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> seeMoreMenuSectionIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'seeMoreMenuSectionId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> seeMoreMenuSectionIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'seeMoreMenuSectionId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> seeMoreMenuSectionIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'seeMoreMenuSectionId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> seeMoreMenuSectionIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'seeMoreMenuSectionId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> seeMoreMenuSectionIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'seeMoreMenuSectionId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> selectCapacityIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'selectCapacity',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> selectCapacityIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'selectCapacity',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> selectCapacityEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'selectCapacity',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showBookingDateIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showBookingDate',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showBookingDateIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showBookingDate',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showBookingDateEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showBookingDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showBulletListIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showBulletList',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showBulletListIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showBulletList',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showBulletListEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showBulletList',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showCommentIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showComment',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showCommentIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showComment',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showCommentEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showComment',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showDateRangeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showDateRange',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showDateRangeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showDateRange',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showDateRangeEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showDateRange',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showDressCodeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showDressCode',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showDressCodeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showDressCode',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showDressCodeEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showDressCode',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showEmailIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showEmail',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showEmailIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showEmail',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showEmailEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showEmail',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showFollowIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showFollow',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showFollowIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showFollow',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showFollowEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showFollow',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showLocationDescriptionIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showLocationDescription',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showLocationDescriptionIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showLocationDescription',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showLocationDescriptionEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showLocationDescription',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showLoyaltyPointIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showLoyaltyPoint',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showLoyaltyPointIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showLoyaltyPoint',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showLoyaltyPointEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showLoyaltyPoint',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showMainCatalogGroupIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showMainCatalogGroup',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showMainCatalogGroupIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showMainCatalogGroup',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showMainCatalogGroupEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showMainCatalogGroup',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showOnHomePageIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showOnHomePage',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showOnHomePageIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showOnHomePage',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showOnHomePageEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showOnHomePage',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showOrderInfoIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showOrderInfo',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showOrderInfoIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showOrderInfo',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showOrderInfoEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showOrderInfo',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showPhoneNumberIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showPhoneNumber',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showPhoneNumberIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showPhoneNumber',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showPhoneNumberEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showPhoneNumber',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showPriceIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showPrice',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showPriceIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showPrice',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showPriceEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showPrice',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showSurveyIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showSurvey',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showSurveyIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showSurvey',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showSurveyEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showSurvey',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showTitleAndDescriptionIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showTitleAndDescription',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showTitleAndDescriptionIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showTitleAndDescription',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showTitleAndDescriptionEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showTitleAndDescription',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showVirtualTourIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showVirtualTour',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showVirtualTourIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showVirtualTour',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showVirtualTourEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showVirtualTour',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showWebSiteIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showWebSite',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showWebSiteIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showWebSite',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showWebSiteEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showWebSite',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showYoutubeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showYoutube',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showYoutubeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showYoutube',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> showYoutubeEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showYoutube',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> startDateIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'startDate',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> startDateIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'startDate',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> startDateEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'startDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> startDateGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'startDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> startDateLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'startDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> startDateBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'startDate',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyDescriptionIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'surveyDescription',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyDescriptionIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'surveyDescription',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyDescriptionLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyDescription',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyDescriptionIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyDescription',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyDescriptionIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyDescription',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyDescriptionLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyDescription',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyDescriptionLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyDescription',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyDescriptionLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyDescription',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyHeaderIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'surveyHeader',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyHeaderIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'surveyHeader',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyHeaderIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'surveyHeaderId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyHeaderIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'surveyHeaderId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyHeaderIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'surveyHeaderId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyHeaderIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'surveyHeaderId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyHeaderIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'surveyHeaderId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyHeaderIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'surveyHeaderId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyTitleIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'surveyTitle',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyTitleIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'surveyTitle',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyTitleLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyTitle',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyTitleIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyTitle',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyTitleIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyTitle',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyTitleLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyTitle',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyTitleLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyTitle',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> surveyTitleLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'surveyTitle',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlLinksIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'urlLinks',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlLinksIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'urlLinks',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlLinksEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'urlLinks',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlLinksGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'urlLinks',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlLinksLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'urlLinks',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlLinksBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'urlLinks',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlLinksStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'urlLinks',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlLinksEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'urlLinks',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      urlLinksContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'urlLinks',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      urlLinksMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'urlLinks',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlLinksIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'urlLinks',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlLinksIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'urlLinks',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlTitleIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'urlTitle',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlTitleIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'urlTitle',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlTitleEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'urlTitle',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlTitleGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'urlTitle',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlTitleLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'urlTitle',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlTitleBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'urlTitle',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlTitleStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'urlTitle',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlTitleEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'urlTitle',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      urlTitleContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'urlTitle',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      urlTitleMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'urlTitle',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlTitleIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'urlTitle',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> urlTitleIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'urlTitle',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> userIdsForNotificationsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'userIdsForNotifications',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> userIdsForNotificationsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'userIdsForNotifications',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> userIdsForNotificationsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'userIdsForNotifications',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> userIdsForNotificationsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'userIdsForNotifications',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> userIdsForNotificationsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'userIdsForNotifications',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> userIdsForNotificationsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'userIdsForNotifications',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> userIdsForNotificationsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'userIdsForNotifications',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> userIdsForNotificationsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'userIdsForNotifications',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      userIdsForNotificationsContains(String value,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'userIdsForNotifications',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      userIdsForNotificationsMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'userIdsForNotifications',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> userIdsForNotificationsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'userIdsForNotifications',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> userIdsForNotificationsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'userIdsForNotifications',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> virtualTourUrlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'virtualTourUrl',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> virtualTourUrlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'virtualTourUrl',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> virtualTourUrlEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'virtualTourUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> virtualTourUrlGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'virtualTourUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> virtualTourUrlLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'virtualTourUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> virtualTourUrlBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'virtualTourUrl',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> virtualTourUrlStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'virtualTourUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> virtualTourUrlEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'virtualTourUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      virtualTourUrlContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'virtualTourUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      virtualTourUrlMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'virtualTourUrl',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> virtualTourUrlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'virtualTourUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> virtualTourUrlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'virtualTourUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteTitleIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'webSiteTitle',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteTitleIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'webSiteTitle',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteTitleEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'webSiteTitle',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteTitleGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'webSiteTitle',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteTitleLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'webSiteTitle',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteTitleBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'webSiteTitle',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteTitleStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'webSiteTitle',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteTitleEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'webSiteTitle',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      webSiteTitleContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'webSiteTitle',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      webSiteTitleMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'webSiteTitle',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteTitleIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'webSiteTitle',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteTitleIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'webSiteTitle',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteUrlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'webSiteUrl',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteUrlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'webSiteUrl',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteUrlEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'webSiteUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteUrlGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'webSiteUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteUrlLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'webSiteUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteUrlBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'webSiteUrl',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteUrlStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'webSiteUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteUrlEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'webSiteUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      webSiteUrlContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'webSiteUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      webSiteUrlMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'webSiteUrl',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteUrlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'webSiteUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> webSiteUrlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'webSiteUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> youtubeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'youtube',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> youtubeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'youtube',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> youtubeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'youtube',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> youtubeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'youtube',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> youtubeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'youtube',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> youtubeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'youtube',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> youtubeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'youtube',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> youtubeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'youtube',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      youtubeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'youtube',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      youtubeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'youtube',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> youtubeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'youtube',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
      QAfterFilterCondition> youtubeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'youtube',
        value: '',
      ));
    });
  }
}

extension RSDataMenuItemsModelQueryObject on QueryBuilder<RSDataMenuItemsModel,
    RSDataMenuItemsModel, QFilterCondition> {
  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      bulletListElement(FilterQuery<RSDataMenuItemBulletListModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'bulletList');
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      descriptionElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'description');
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      menuCategoryNameElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'menuCategoryName');
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      menuItemBooksElement(FilterQuery<RSDataMenuItemBooksModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'menuItemBooks');
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      menuItemCatalogGroupsElement(
          FilterQuery<RSDataMenuItemCatalogGroupsModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'menuItemCatalogGroups');
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      menuItemTitleAndDescriptionsElement(
          FilterQuery<RSDataMenuItemTitleAndDescriptionModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'menuItemTitleAndDescriptions');
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      menuSectionNameElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'menuSectionName');
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      nameElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'name');
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      surveyDescriptionElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'surveyDescription');
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      surveyHeader(FilterQuery<RSDataSurveyHeaderModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'surveyHeader');
    });
  }

  QueryBuilder<RSDataMenuItemsModel, RSDataMenuItemsModel,
          QAfterFilterCondition>
      surveyTitleElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'surveyTitle');
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters

const RSDataMenuCategoriesModelSchema = Schema(
  name: r'RSDataMenuCategoriesModel',
  id: 4466269486249667418,
  properties: {
    r'default0SurveyHeaderId': PropertySchema(
      id: 0,
      name: r'default0SurveyHeaderId',
      type: IsarType.long,
    ),
    r'hotelId': PropertySchema(
      id: 1,
      name: r'hotelId',
      type: IsarType.long,
    ),
    r'icibotId': PropertySchema(
      id: 2,
      name: r'icibotId',
      type: IsarType.long,
    ),
    r'images': PropertySchema(
      id: 3,
      name: r'images',
      type: IsarType.string,
    ),
    r'menuItemId': PropertySchema(
      id: 4,
      name: r'menuItemId',
      type: IsarType.long,
    ),
    r'menuItems': PropertySchema(
      id: 5,
      name: r'menuItems',
      type: IsarType.objectList,
      target: r'RSDataMenuItemsModel',
    ),
    r'menuSectionId': PropertySchema(
      id: 6,
      name: r'menuSectionId',
      type: IsarType.long,
    ),
    r'priority': PropertySchema(
      id: 7,
      name: r'priority',
      type: IsarType.long,
    ),
    r'surveyHeader': PropertySchema(
      id: 8,
      name: r'surveyHeader',
      type: IsarType.object,
      target: r'RSDataSurveyHeaderModel',
    ),
    r'title': PropertySchema(
      id: 9,
      name: r'title',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    )
  },
  estimateSize: _rSDataMenuCategoriesModelEstimateSize,
  serialize: _rSDataMenuCategoriesModelSerialize,
  deserialize: _rSDataMenuCategoriesModelDeserialize,
  deserializeProp: _rSDataMenuCategoriesModelDeserializeProp,
);

int _rSDataMenuCategoriesModelEstimateSize(
  RSDataMenuCategoriesModel object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final value = object.images;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.menuItems;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataMenuItemsModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataMenuItemsModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.surveyHeader;
    if (value != null) {
      bytesCount += 3 +
          RSDataSurveyHeaderModelSchema.estimateSize(
              value, allOffsets[RSDataSurveyHeaderModel]!, allOffsets);
    }
  }
  {
    final list = object.title;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  return bytesCount;
}

void _rSDataMenuCategoriesModelSerialize(
  RSDataMenuCategoriesModel object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeLong(offsets[0], object.default0SurveyHeaderId);
  writer.writeLong(offsets[1], object.hotelId);
  writer.writeLong(offsets[2], object.icibotId);
  writer.writeString(offsets[3], object.images);
  writer.writeLong(offsets[4], object.menuItemId);
  writer.writeObjectList<RSDataMenuItemsModel>(
    offsets[5],
    allOffsets,
    RSDataMenuItemsModelSchema.serialize,
    object.menuItems,
  );
  writer.writeLong(offsets[6], object.menuSectionId);
  writer.writeLong(offsets[7], object.priority);
  writer.writeObject<RSDataSurveyHeaderModel>(
    offsets[8],
    allOffsets,
    RSDataSurveyHeaderModelSchema.serialize,
    object.surveyHeader,
  );
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[9],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.title,
  );
}

RSDataMenuCategoriesModel _rSDataMenuCategoriesModelDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = RSDataMenuCategoriesModel(
    default0SurveyHeaderId: reader.readLongOrNull(offsets[0]),
    hotelId: reader.readLongOrNull(offsets[1]),
    icibotId: reader.readLongOrNull(offsets[2]),
    images: reader.readStringOrNull(offsets[3]),
    menuItemId: reader.readLongOrNull(offsets[4]),
    menuItems: reader.readObjectList<RSDataMenuItemsModel>(
      offsets[5],
      RSDataMenuItemsModelSchema.deserialize,
      allOffsets,
      RSDataMenuItemsModel(),
    ),
    menuSectionId: reader.readLongOrNull(offsets[6]),
    priority: reader.readLongOrNull(offsets[7]),
    surveyHeader: reader.readObjectOrNull<RSDataSurveyHeaderModel>(
      offsets[8],
      RSDataSurveyHeaderModelSchema.deserialize,
      allOffsets,
    ),
    title: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[9],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
  );
  return object;
}

P _rSDataMenuCategoriesModelDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readLongOrNull(offset)) as P;
    case 1:
      return (reader.readLongOrNull(offset)) as P;
    case 2:
      return (reader.readLongOrNull(offset)) as P;
    case 3:
      return (reader.readStringOrNull(offset)) as P;
    case 4:
      return (reader.readLongOrNull(offset)) as P;
    case 5:
      return (reader.readObjectList<RSDataMenuItemsModel>(
        offset,
        RSDataMenuItemsModelSchema.deserialize,
        allOffsets,
        RSDataMenuItemsModel(),
      )) as P;
    case 6:
      return (reader.readLongOrNull(offset)) as P;
    case 7:
      return (reader.readLongOrNull(offset)) as P;
    case 8:
      return (reader.readObjectOrNull<RSDataSurveyHeaderModel>(
        offset,
        RSDataSurveyHeaderModelSchema.deserialize,
        allOffsets,
      )) as P;
    case 9:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension RSDataMenuCategoriesModelQueryFilter on QueryBuilder<
    RSDataMenuCategoriesModel, RSDataMenuCategoriesModel, QFilterCondition> {
  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> default0SurveyHeaderIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'default0SurveyHeaderId',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> default0SurveyHeaderIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'default0SurveyHeaderId',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> default0SurveyHeaderIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'default0SurveyHeaderId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> default0SurveyHeaderIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'default0SurveyHeaderId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> default0SurveyHeaderIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'default0SurveyHeaderId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> default0SurveyHeaderIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'default0SurveyHeaderId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> hotelIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelId',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> hotelIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelId',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> hotelIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> hotelIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> hotelIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> hotelIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> icibotIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'icibotId',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> icibotIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'icibotId',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> icibotIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> icibotIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> icibotIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> icibotIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'icibotId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> imagesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'images',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> imagesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'images',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> imagesEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'images',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> imagesGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'images',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> imagesLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'images',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> imagesBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'images',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> imagesStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'images',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> imagesEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'images',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
          QAfterFilterCondition>
      imagesContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'images',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
          QAfterFilterCondition>
      imagesMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'images',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> imagesIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'images',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> imagesIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'images',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuItemIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuItemIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuItemIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuItemIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuItemIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuItemIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuItemId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuItemsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItems',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuItemsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItems',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuItemsLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItems',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuItemsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItems',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuItemsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItems',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuItemsLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItems',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuItemsLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItems',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuItemsLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItems',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuSectionIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuSectionId',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuSectionIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuSectionId',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuSectionIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuSectionId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuSectionIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuSectionId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuSectionIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuSectionId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> menuSectionIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuSectionId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> priorityIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'priority',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> priorityIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'priority',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> priorityEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'priority',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> priorityGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'priority',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> priorityLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'priority',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> priorityBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'priority',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> surveyHeaderIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'surveyHeader',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> surveyHeaderIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'surveyHeader',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> titleIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'title',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> titleIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'title',
      ));
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> titleLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> titleIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> titleIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> titleLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> titleLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
      QAfterFilterCondition> titleLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }
}

extension RSDataMenuCategoriesModelQueryObject on QueryBuilder<
    RSDataMenuCategoriesModel, RSDataMenuCategoriesModel, QFilterCondition> {
  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
          QAfterFilterCondition>
      menuItemsElement(FilterQuery<RSDataMenuItemsModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'menuItems');
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
          QAfterFilterCondition>
      surveyHeader(FilterQuery<RSDataSurveyHeaderModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'surveyHeader');
    });
  }

  QueryBuilder<RSDataMenuCategoriesModel, RSDataMenuCategoriesModel,
          QAfterFilterCondition>
      titleElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'title');
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters

const RSDataTitleLanguageModelSchema = Schema(
  name: r'RSDataTitleLanguageModel',
  id: 6311673712304243027,
  properties: {
    r'locale': PropertySchema(
      id: 0,
      name: r'locale',
      type: IsarType.string,
    ),
    r'title': PropertySchema(
      id: 1,
      name: r'title',
      type: IsarType.string,
    )
  },
  estimateSize: _rSDataTitleLanguageModelEstimateSize,
  serialize: _rSDataTitleLanguageModelSerialize,
  deserialize: _rSDataTitleLanguageModelDeserialize,
  deserializeProp: _rSDataTitleLanguageModelDeserializeProp,
);

int _rSDataTitleLanguageModelEstimateSize(
  RSDataTitleLanguageModel object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final value = object.locale;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.title;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  return bytesCount;
}

void _rSDataTitleLanguageModelSerialize(
  RSDataTitleLanguageModel object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeString(offsets[0], object.locale);
  writer.writeString(offsets[1], object.title);
}

RSDataTitleLanguageModel _rSDataTitleLanguageModelDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = RSDataTitleLanguageModel(
    locale: reader.readStringOrNull(offsets[0]),
    title: reader.readStringOrNull(offsets[1]),
  );
  return object;
}

P _rSDataTitleLanguageModelDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readStringOrNull(offset)) as P;
    case 1:
      return (reader.readStringOrNull(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension RSDataTitleLanguageModelQueryFilter on QueryBuilder<
    RSDataTitleLanguageModel, RSDataTitleLanguageModel, QFilterCondition> {
  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> localeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'locale',
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> localeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'locale',
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> localeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'locale',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> localeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'locale',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> localeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'locale',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> localeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'locale',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> localeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'locale',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> localeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'locale',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
          QAfterFilterCondition>
      localeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'locale',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
          QAfterFilterCondition>
      localeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'locale',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> localeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'locale',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> localeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'locale',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> titleIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'title',
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> titleIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'title',
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> titleEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'title',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> titleGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'title',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> titleLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'title',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> titleBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'title',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> titleStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'title',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> titleEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'title',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
          QAfterFilterCondition>
      titleContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'title',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
          QAfterFilterCondition>
      titleMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'title',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> titleIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'title',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataTitleLanguageModel, RSDataTitleLanguageModel,
      QAfterFilterCondition> titleIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'title',
        value: '',
      ));
    });
  }
}

extension RSDataTitleLanguageModelQueryObject on QueryBuilder<
    RSDataTitleLanguageModel, RSDataTitleLanguageModel, QFilterCondition> {}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters

const RSDataSurveyHeaderModelSchema = Schema(
  name: r'RSDataSurveyHeaderModel',
  id: -4757723381299811213,
  properties: {
    r'askNoteAfterSurvey': PropertySchema(
      id: 0,
      name: r'askNoteAfterSurvey',
      type: IsarType.bool,
    ),
    r'createdAt': PropertySchema(
      id: 1,
      name: r'createdAt',
      type: IsarType.dateTime,
    ),
    r'departmentId': PropertySchema(
      id: 2,
      name: r'departmentId',
      type: IsarType.long,
    ),
    r'description': PropertySchema(
      id: 3,
      name: r'description',
      type: IsarType.string,
    ),
    r'emails': PropertySchema(
      id: 4,
      name: r'emails',
      type: IsarType.string,
    ),
    r'groups': PropertySchema(
      id: 5,
      name: r'groups',
      type: IsarType.string,
    ),
    r'hotelId': PropertySchema(
      id: 6,
      name: r'hotelId',
      type: IsarType.long,
    ),
    r'hotelName': PropertySchema(
      id: 7,
      name: r'hotelName',
      type: IsarType.string,
    ),
    r'icibotId': PropertySchema(
      id: 8,
      name: r'icibotId',
      type: IsarType.long,
    ),
    r'name': PropertySchema(
      id: 9,
      name: r'name',
      type: IsarType.string,
    ),
    r'notifyType': PropertySchema(
      id: 10,
      name: r'notifyType',
      type: IsarType.string,
    ),
    r'positiveRedirectUrls': PropertySchema(
      id: 11,
      name: r'positiveRedirectUrls',
      type: IsarType.string,
    ),
    r'questionGroups': PropertySchema(
      id: 12,
      name: r'questionGroups',
      type: IsarType.string,
    ),
    r'sendingResultType': PropertySchema(
      id: 13,
      name: r'sendingResultType',
      type: IsarType.string,
    ),
    r'status': PropertySchema(
      id: 14,
      name: r'status',
      type: IsarType.string,
    ),
    r'surveyLines': PropertySchema(
      id: 15,
      name: r'surveyLines',
      type: IsarType.string,
    ),
    r'thanksMessageForNegativeReviews': PropertySchema(
      id: 16,
      name: r'thanksMessageForNegativeReviews',
      type: IsarType.string,
    ),
    r'thanksMessageForPositiveReviews': PropertySchema(
      id: 17,
      name: r'thanksMessageForPositiveReviews',
      type: IsarType.string,
    ),
    r'updatedAt': PropertySchema(
      id: 18,
      name: r'updatedAt',
      type: IsarType.dateTime,
    )
  },
  estimateSize: _rSDataSurveyHeaderModelEstimateSize,
  serialize: _rSDataSurveyHeaderModelSerialize,
  deserialize: _rSDataSurveyHeaderModelDeserialize,
  deserializeProp: _rSDataSurveyHeaderModelDeserializeProp,
);

int _rSDataSurveyHeaderModelEstimateSize(
  RSDataSurveyHeaderModel object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final value = object.description;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.emails;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.groups;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.hotelName;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.name;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.notifyType;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.positiveRedirectUrls;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.questionGroups;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.sendingResultType;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.status;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.surveyLines;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.thanksMessageForNegativeReviews;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.thanksMessageForPositiveReviews;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  return bytesCount;
}

void _rSDataSurveyHeaderModelSerialize(
  RSDataSurveyHeaderModel object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeBool(offsets[0], object.askNoteAfterSurvey);
  writer.writeDateTime(offsets[1], object.createdAt);
  writer.writeLong(offsets[2], object.departmentId);
  writer.writeString(offsets[3], object.description);
  writer.writeString(offsets[4], object.emails);
  writer.writeString(offsets[5], object.groups);
  writer.writeLong(offsets[6], object.hotelId);
  writer.writeString(offsets[7], object.hotelName);
  writer.writeLong(offsets[8], object.icibotId);
  writer.writeString(offsets[9], object.name);
  writer.writeString(offsets[10], object.notifyType);
  writer.writeString(offsets[11], object.positiveRedirectUrls);
  writer.writeString(offsets[12], object.questionGroups);
  writer.writeString(offsets[13], object.sendingResultType);
  writer.writeString(offsets[14], object.status);
  writer.writeString(offsets[15], object.surveyLines);
  writer.writeString(offsets[16], object.thanksMessageForNegativeReviews);
  writer.writeString(offsets[17], object.thanksMessageForPositiveReviews);
  writer.writeDateTime(offsets[18], object.updatedAt);
}

RSDataSurveyHeaderModel _rSDataSurveyHeaderModelDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = RSDataSurveyHeaderModel(
    askNoteAfterSurvey: reader.readBoolOrNull(offsets[0]),
    createdAt: reader.readDateTimeOrNull(offsets[1]),
    departmentId: reader.readLongOrNull(offsets[2]),
    description: reader.readStringOrNull(offsets[3]),
    emails: reader.readStringOrNull(offsets[4]),
    groups: reader.readStringOrNull(offsets[5]),
    hotelId: reader.readLongOrNull(offsets[6]),
    hotelName: reader.readStringOrNull(offsets[7]),
    icibotId: reader.readLongOrNull(offsets[8]),
    name: reader.readStringOrNull(offsets[9]),
    notifyType: reader.readStringOrNull(offsets[10]),
    positiveRedirectUrls: reader.readStringOrNull(offsets[11]),
    questionGroups: reader.readStringOrNull(offsets[12]),
    sendingResultType: reader.readStringOrNull(offsets[13]),
    status: reader.readStringOrNull(offsets[14]),
    surveyLines: reader.readStringOrNull(offsets[15]),
    thanksMessageForNegativeReviews: reader.readStringOrNull(offsets[16]),
    thanksMessageForPositiveReviews: reader.readStringOrNull(offsets[17]),
    updatedAt: reader.readDateTimeOrNull(offsets[18]),
  );
  return object;
}

P _rSDataSurveyHeaderModelDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readBoolOrNull(offset)) as P;
    case 1:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 2:
      return (reader.readLongOrNull(offset)) as P;
    case 3:
      return (reader.readStringOrNull(offset)) as P;
    case 4:
      return (reader.readStringOrNull(offset)) as P;
    case 5:
      return (reader.readStringOrNull(offset)) as P;
    case 6:
      return (reader.readLongOrNull(offset)) as P;
    case 7:
      return (reader.readStringOrNull(offset)) as P;
    case 8:
      return (reader.readLongOrNull(offset)) as P;
    case 9:
      return (reader.readStringOrNull(offset)) as P;
    case 10:
      return (reader.readStringOrNull(offset)) as P;
    case 11:
      return (reader.readStringOrNull(offset)) as P;
    case 12:
      return (reader.readStringOrNull(offset)) as P;
    case 13:
      return (reader.readStringOrNull(offset)) as P;
    case 14:
      return (reader.readStringOrNull(offset)) as P;
    case 15:
      return (reader.readStringOrNull(offset)) as P;
    case 16:
      return (reader.readStringOrNull(offset)) as P;
    case 17:
      return (reader.readStringOrNull(offset)) as P;
    case 18:
      return (reader.readDateTimeOrNull(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension RSDataSurveyHeaderModelQueryFilter on QueryBuilder<
    RSDataSurveyHeaderModel, RSDataSurveyHeaderModel, QFilterCondition> {
  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> askNoteAfterSurveyIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'askNoteAfterSurvey',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> askNoteAfterSurveyIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'askNoteAfterSurvey',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> askNoteAfterSurveyEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'askNoteAfterSurvey',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> createdAtIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'createdAt',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> createdAtIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'createdAt',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> createdAtEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> createdAtGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> createdAtLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> createdAtBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'createdAt',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> departmentIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'departmentId',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> departmentIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'departmentId',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> departmentIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'departmentId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> departmentIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'departmentId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> departmentIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'departmentId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> departmentIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'departmentId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> descriptionIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'description',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> descriptionIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'description',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> descriptionEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'description',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> descriptionGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'description',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> descriptionLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'description',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> descriptionBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'description',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> descriptionStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'description',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> descriptionEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'description',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      descriptionContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'description',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      descriptionMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'description',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> descriptionIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'description',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> descriptionIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'description',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> emailsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'emails',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> emailsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'emails',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> emailsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'emails',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> emailsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'emails',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> emailsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'emails',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> emailsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'emails',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> emailsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'emails',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> emailsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'emails',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      emailsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'emails',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      emailsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'emails',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> emailsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'emails',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> emailsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'emails',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> groupsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'groups',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> groupsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'groups',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> groupsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'groups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> groupsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'groups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> groupsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'groups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> groupsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'groups',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> groupsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'groups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> groupsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'groups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      groupsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'groups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      groupsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'groups',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> groupsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'groups',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> groupsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'groups',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> hotelIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelId',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> hotelIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelId',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> hotelIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> hotelIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> hotelIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> hotelIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> hotelNameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelName',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> hotelNameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelName',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> hotelNameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> hotelNameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> hotelNameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> hotelNameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelName',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> hotelNameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'hotelName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> hotelNameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'hotelName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      hotelNameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'hotelName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      hotelNameMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'hotelName',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> hotelNameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> hotelNameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'hotelName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> icibotIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'icibotId',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> icibotIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'icibotId',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> icibotIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> icibotIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> icibotIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> icibotIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'icibotId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> nameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> nameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> nameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> nameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> nameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> nameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'name',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> nameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> nameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      nameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      nameMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'name',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> nameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'name',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> nameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'name',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> notifyTypeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'notifyType',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> notifyTypeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'notifyType',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> notifyTypeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'notifyType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> notifyTypeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'notifyType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> notifyTypeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'notifyType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> notifyTypeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'notifyType',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> notifyTypeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'notifyType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> notifyTypeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'notifyType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      notifyTypeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'notifyType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      notifyTypeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'notifyType',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> notifyTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'notifyType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> notifyTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'notifyType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> positiveRedirectUrlsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'positiveRedirectUrls',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> positiveRedirectUrlsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'positiveRedirectUrls',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> positiveRedirectUrlsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'positiveRedirectUrls',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> positiveRedirectUrlsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'positiveRedirectUrls',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> positiveRedirectUrlsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'positiveRedirectUrls',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> positiveRedirectUrlsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'positiveRedirectUrls',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> positiveRedirectUrlsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'positiveRedirectUrls',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> positiveRedirectUrlsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'positiveRedirectUrls',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      positiveRedirectUrlsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'positiveRedirectUrls',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      positiveRedirectUrlsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'positiveRedirectUrls',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> positiveRedirectUrlsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'positiveRedirectUrls',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> positiveRedirectUrlsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'positiveRedirectUrls',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> questionGroupsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'questionGroups',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> questionGroupsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'questionGroups',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> questionGroupsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'questionGroups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> questionGroupsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'questionGroups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> questionGroupsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'questionGroups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> questionGroupsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'questionGroups',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> questionGroupsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'questionGroups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> questionGroupsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'questionGroups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      questionGroupsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'questionGroups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      questionGroupsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'questionGroups',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> questionGroupsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'questionGroups',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> questionGroupsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'questionGroups',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> sendingResultTypeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'sendingResultType',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> sendingResultTypeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'sendingResultType',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> sendingResultTypeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'sendingResultType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> sendingResultTypeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'sendingResultType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> sendingResultTypeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'sendingResultType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> sendingResultTypeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'sendingResultType',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> sendingResultTypeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'sendingResultType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> sendingResultTypeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'sendingResultType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      sendingResultTypeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'sendingResultType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      sendingResultTypeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'sendingResultType',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> sendingResultTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'sendingResultType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> sendingResultTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'sendingResultType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> statusIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'status',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> statusIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'status',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> statusEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> statusGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> statusLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> statusBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'status',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> statusStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> statusEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      statusContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      statusMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'status',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> statusIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'status',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> statusIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'status',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> surveyLinesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'surveyLines',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> surveyLinesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'surveyLines',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> surveyLinesEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'surveyLines',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> surveyLinesGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'surveyLines',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> surveyLinesLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'surveyLines',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> surveyLinesBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'surveyLines',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> surveyLinesStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'surveyLines',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> surveyLinesEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'surveyLines',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      surveyLinesContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'surveyLines',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      surveyLinesMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'surveyLines',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> surveyLinesIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'surveyLines',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> surveyLinesIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'surveyLines',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForNegativeReviewsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'thanksMessageForNegativeReviews',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForNegativeReviewsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'thanksMessageForNegativeReviews',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForNegativeReviewsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'thanksMessageForNegativeReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForNegativeReviewsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'thanksMessageForNegativeReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForNegativeReviewsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'thanksMessageForNegativeReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForNegativeReviewsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'thanksMessageForNegativeReviews',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForNegativeReviewsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'thanksMessageForNegativeReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForNegativeReviewsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'thanksMessageForNegativeReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      thanksMessageForNegativeReviewsContains(String value,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'thanksMessageForNegativeReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      thanksMessageForNegativeReviewsMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'thanksMessageForNegativeReviews',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForNegativeReviewsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'thanksMessageForNegativeReviews',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForNegativeReviewsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'thanksMessageForNegativeReviews',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForPositiveReviewsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'thanksMessageForPositiveReviews',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForPositiveReviewsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'thanksMessageForPositiveReviews',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForPositiveReviewsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'thanksMessageForPositiveReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForPositiveReviewsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'thanksMessageForPositiveReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForPositiveReviewsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'thanksMessageForPositiveReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForPositiveReviewsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'thanksMessageForPositiveReviews',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForPositiveReviewsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'thanksMessageForPositiveReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForPositiveReviewsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'thanksMessageForPositiveReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      thanksMessageForPositiveReviewsContains(String value,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'thanksMessageForPositiveReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
          QAfterFilterCondition>
      thanksMessageForPositiveReviewsMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'thanksMessageForPositiveReviews',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForPositiveReviewsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'thanksMessageForPositiveReviews',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> thanksMessageForPositiveReviewsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'thanksMessageForPositiveReviews',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> updatedAtIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'updatedAt',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> updatedAtIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'updatedAt',
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> updatedAtEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> updatedAtGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> updatedAtLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyHeaderModel, RSDataSurveyHeaderModel,
      QAfterFilterCondition> updatedAtBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'updatedAt',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }
}

extension RSDataSurveyHeaderModelQueryObject on QueryBuilder<
    RSDataSurveyHeaderModel, RSDataSurveyHeaderModel, QFilterCondition> {}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters

const RSDataSurveyModelSchema = Schema(
  name: r'RSDataSurveyModel',
  id: -5506233406833449079,
  properties: {
    r'askNoteAfterSurvey': PropertySchema(
      id: 0,
      name: r'askNoteAfterSurvey',
      type: IsarType.bool,
    ),
    r'createdAt': PropertySchema(
      id: 1,
      name: r'createdAt',
      type: IsarType.dateTime,
    ),
    r'departmentId': PropertySchema(
      id: 2,
      name: r'departmentId',
      type: IsarType.long,
    ),
    r'description': PropertySchema(
      id: 3,
      name: r'description',
      type: IsarType.string,
    ),
    r'emails': PropertySchema(
      id: 4,
      name: r'emails',
      type: IsarType.string,
    ),
    r'groups': PropertySchema(
      id: 5,
      name: r'groups',
      type: IsarType.string,
    ),
    r'hotelId': PropertySchema(
      id: 6,
      name: r'hotelId',
      type: IsarType.long,
    ),
    r'hotelName': PropertySchema(
      id: 7,
      name: r'hotelName',
      type: IsarType.string,
    ),
    r'icibotId': PropertySchema(
      id: 8,
      name: r'icibotId',
      type: IsarType.long,
    ),
    r'name': PropertySchema(
      id: 9,
      name: r'name',
      type: IsarType.string,
    ),
    r'notifyType': PropertySchema(
      id: 10,
      name: r'notifyType',
      type: IsarType.string,
    ),
    r'positiveRedirectUrls': PropertySchema(
      id: 11,
      name: r'positiveRedirectUrls',
      type: IsarType.string,
    ),
    r'questionGroups': PropertySchema(
      id: 12,
      name: r'questionGroups',
      type: IsarType.string,
    ),
    r'sendingResultType': PropertySchema(
      id: 13,
      name: r'sendingResultType',
      type: IsarType.string,
    ),
    r'status': PropertySchema(
      id: 14,
      name: r'status',
      type: IsarType.string,
    ),
    r'surveyLines': PropertySchema(
      id: 15,
      name: r'surveyLines',
      type: IsarType.string,
    ),
    r'thanksMessageForNegativeReviews': PropertySchema(
      id: 16,
      name: r'thanksMessageForNegativeReviews',
      type: IsarType.string,
    ),
    r'thanksMessageForPositiveReviews': PropertySchema(
      id: 17,
      name: r'thanksMessageForPositiveReviews',
      type: IsarType.string,
    ),
    r'updatedAt': PropertySchema(
      id: 18,
      name: r'updatedAt',
      type: IsarType.dateTime,
    )
  },
  estimateSize: _rSDataSurveyModelEstimateSize,
  serialize: _rSDataSurveyModelSerialize,
  deserialize: _rSDataSurveyModelDeserialize,
  deserializeProp: _rSDataSurveyModelDeserializeProp,
);

int _rSDataSurveyModelEstimateSize(
  RSDataSurveyModel object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final value = object.description;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.emails;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.groups;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.hotelName;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.name;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.notifyType;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.positiveRedirectUrls;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.questionGroups;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.sendingResultType;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.status;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.surveyLines;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.thanksMessageForNegativeReviews;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.thanksMessageForPositiveReviews;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  return bytesCount;
}

void _rSDataSurveyModelSerialize(
  RSDataSurveyModel object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeBool(offsets[0], object.askNoteAfterSurvey);
  writer.writeDateTime(offsets[1], object.createdAt);
  writer.writeLong(offsets[2], object.departmentId);
  writer.writeString(offsets[3], object.description);
  writer.writeString(offsets[4], object.emails);
  writer.writeString(offsets[5], object.groups);
  writer.writeLong(offsets[6], object.hotelId);
  writer.writeString(offsets[7], object.hotelName);
  writer.writeLong(offsets[8], object.icibotId);
  writer.writeString(offsets[9], object.name);
  writer.writeString(offsets[10], object.notifyType);
  writer.writeString(offsets[11], object.positiveRedirectUrls);
  writer.writeString(offsets[12], object.questionGroups);
  writer.writeString(offsets[13], object.sendingResultType);
  writer.writeString(offsets[14], object.status);
  writer.writeString(offsets[15], object.surveyLines);
  writer.writeString(offsets[16], object.thanksMessageForNegativeReviews);
  writer.writeString(offsets[17], object.thanksMessageForPositiveReviews);
  writer.writeDateTime(offsets[18], object.updatedAt);
}

RSDataSurveyModel _rSDataSurveyModelDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = RSDataSurveyModel(
    askNoteAfterSurvey: reader.readBoolOrNull(offsets[0]),
    createdAt: reader.readDateTimeOrNull(offsets[1]),
    departmentId: reader.readLongOrNull(offsets[2]),
    description: reader.readStringOrNull(offsets[3]),
    emails: reader.readStringOrNull(offsets[4]),
    groups: reader.readStringOrNull(offsets[5]),
    hotelId: reader.readLongOrNull(offsets[6]),
    hotelName: reader.readStringOrNull(offsets[7]),
    icibotId: reader.readLongOrNull(offsets[8]),
    name: reader.readStringOrNull(offsets[9]),
    notifyType: reader.readStringOrNull(offsets[10]),
    positiveRedirectUrls: reader.readStringOrNull(offsets[11]),
    questionGroups: reader.readStringOrNull(offsets[12]),
    sendingResultType: reader.readStringOrNull(offsets[13]),
    status: reader.readStringOrNull(offsets[14]),
    surveyLines: reader.readStringOrNull(offsets[15]),
    thanksMessageForNegativeReviews: reader.readStringOrNull(offsets[16]),
    thanksMessageForPositiveReviews: reader.readStringOrNull(offsets[17]),
    updatedAt: reader.readDateTimeOrNull(offsets[18]),
  );
  return object;
}

P _rSDataSurveyModelDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readBoolOrNull(offset)) as P;
    case 1:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 2:
      return (reader.readLongOrNull(offset)) as P;
    case 3:
      return (reader.readStringOrNull(offset)) as P;
    case 4:
      return (reader.readStringOrNull(offset)) as P;
    case 5:
      return (reader.readStringOrNull(offset)) as P;
    case 6:
      return (reader.readLongOrNull(offset)) as P;
    case 7:
      return (reader.readStringOrNull(offset)) as P;
    case 8:
      return (reader.readLongOrNull(offset)) as P;
    case 9:
      return (reader.readStringOrNull(offset)) as P;
    case 10:
      return (reader.readStringOrNull(offset)) as P;
    case 11:
      return (reader.readStringOrNull(offset)) as P;
    case 12:
      return (reader.readStringOrNull(offset)) as P;
    case 13:
      return (reader.readStringOrNull(offset)) as P;
    case 14:
      return (reader.readStringOrNull(offset)) as P;
    case 15:
      return (reader.readStringOrNull(offset)) as P;
    case 16:
      return (reader.readStringOrNull(offset)) as P;
    case 17:
      return (reader.readStringOrNull(offset)) as P;
    case 18:
      return (reader.readDateTimeOrNull(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension RSDataSurveyModelQueryFilter
    on QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QFilterCondition> {
  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      askNoteAfterSurveyIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'askNoteAfterSurvey',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      askNoteAfterSurveyIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'askNoteAfterSurvey',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      askNoteAfterSurveyEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'askNoteAfterSurvey',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      createdAtIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'createdAt',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      createdAtIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'createdAt',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      createdAtEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      createdAtGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      createdAtLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      createdAtBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'createdAt',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      departmentIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'departmentId',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      departmentIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'departmentId',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      departmentIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'departmentId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      departmentIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'departmentId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      departmentIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'departmentId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      departmentIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'departmentId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      descriptionIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'description',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      descriptionIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'description',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      descriptionEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'description',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      descriptionGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'description',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      descriptionLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'description',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      descriptionBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'description',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      descriptionStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'description',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      descriptionEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'description',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      descriptionContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'description',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      descriptionMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'description',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      descriptionIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'description',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      descriptionIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'description',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      emailsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'emails',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      emailsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'emails',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      emailsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'emails',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      emailsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'emails',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      emailsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'emails',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      emailsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'emails',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      emailsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'emails',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      emailsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'emails',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      emailsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'emails',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      emailsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'emails',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      emailsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'emails',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      emailsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'emails',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      groupsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'groups',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      groupsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'groups',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      groupsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'groups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      groupsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'groups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      groupsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'groups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      groupsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'groups',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      groupsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'groups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      groupsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'groups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      groupsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'groups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      groupsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'groups',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      groupsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'groups',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      groupsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'groups',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      hotelIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelId',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      hotelIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelId',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      hotelIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      hotelIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      hotelIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      hotelIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      hotelNameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelName',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      hotelNameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelName',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      hotelNameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      hotelNameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      hotelNameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      hotelNameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelName',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      hotelNameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'hotelName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      hotelNameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'hotelName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      hotelNameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'hotelName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      hotelNameMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'hotelName',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      hotelNameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      hotelNameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'hotelName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      icibotIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'icibotId',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      icibotIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'icibotId',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      icibotIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      icibotIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      icibotIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      icibotIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'icibotId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      nameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      nameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      nameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      nameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      nameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      nameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'name',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      nameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      nameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      nameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      nameMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'name',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      nameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'name',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      nameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'name',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      notifyTypeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'notifyType',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      notifyTypeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'notifyType',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      notifyTypeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'notifyType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      notifyTypeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'notifyType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      notifyTypeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'notifyType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      notifyTypeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'notifyType',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      notifyTypeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'notifyType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      notifyTypeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'notifyType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      notifyTypeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'notifyType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      notifyTypeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'notifyType',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      notifyTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'notifyType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      notifyTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'notifyType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      positiveRedirectUrlsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'positiveRedirectUrls',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      positiveRedirectUrlsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'positiveRedirectUrls',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      positiveRedirectUrlsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'positiveRedirectUrls',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      positiveRedirectUrlsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'positiveRedirectUrls',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      positiveRedirectUrlsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'positiveRedirectUrls',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      positiveRedirectUrlsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'positiveRedirectUrls',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      positiveRedirectUrlsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'positiveRedirectUrls',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      positiveRedirectUrlsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'positiveRedirectUrls',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      positiveRedirectUrlsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'positiveRedirectUrls',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      positiveRedirectUrlsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'positiveRedirectUrls',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      positiveRedirectUrlsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'positiveRedirectUrls',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      positiveRedirectUrlsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'positiveRedirectUrls',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      questionGroupsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'questionGroups',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      questionGroupsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'questionGroups',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      questionGroupsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'questionGroups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      questionGroupsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'questionGroups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      questionGroupsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'questionGroups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      questionGroupsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'questionGroups',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      questionGroupsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'questionGroups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      questionGroupsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'questionGroups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      questionGroupsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'questionGroups',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      questionGroupsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'questionGroups',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      questionGroupsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'questionGroups',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      questionGroupsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'questionGroups',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      sendingResultTypeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'sendingResultType',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      sendingResultTypeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'sendingResultType',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      sendingResultTypeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'sendingResultType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      sendingResultTypeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'sendingResultType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      sendingResultTypeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'sendingResultType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      sendingResultTypeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'sendingResultType',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      sendingResultTypeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'sendingResultType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      sendingResultTypeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'sendingResultType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      sendingResultTypeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'sendingResultType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      sendingResultTypeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'sendingResultType',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      sendingResultTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'sendingResultType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      sendingResultTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'sendingResultType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      statusIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'status',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      statusIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'status',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      statusEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      statusGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      statusLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      statusBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'status',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      statusStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      statusEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      statusContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      statusMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'status',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      statusIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'status',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      statusIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'status',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      surveyLinesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'surveyLines',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      surveyLinesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'surveyLines',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      surveyLinesEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'surveyLines',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      surveyLinesGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'surveyLines',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      surveyLinesLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'surveyLines',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      surveyLinesBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'surveyLines',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      surveyLinesStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'surveyLines',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      surveyLinesEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'surveyLines',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      surveyLinesContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'surveyLines',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      surveyLinesMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'surveyLines',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      surveyLinesIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'surveyLines',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      surveyLinesIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'surveyLines',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForNegativeReviewsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'thanksMessageForNegativeReviews',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForNegativeReviewsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'thanksMessageForNegativeReviews',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForNegativeReviewsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'thanksMessageForNegativeReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForNegativeReviewsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'thanksMessageForNegativeReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForNegativeReviewsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'thanksMessageForNegativeReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForNegativeReviewsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'thanksMessageForNegativeReviews',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForNegativeReviewsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'thanksMessageForNegativeReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForNegativeReviewsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'thanksMessageForNegativeReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForNegativeReviewsContains(String value,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'thanksMessageForNegativeReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForNegativeReviewsMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'thanksMessageForNegativeReviews',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForNegativeReviewsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'thanksMessageForNegativeReviews',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForNegativeReviewsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'thanksMessageForNegativeReviews',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForPositiveReviewsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'thanksMessageForPositiveReviews',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForPositiveReviewsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'thanksMessageForPositiveReviews',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForPositiveReviewsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'thanksMessageForPositiveReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForPositiveReviewsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'thanksMessageForPositiveReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForPositiveReviewsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'thanksMessageForPositiveReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForPositiveReviewsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'thanksMessageForPositiveReviews',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForPositiveReviewsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'thanksMessageForPositiveReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForPositiveReviewsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'thanksMessageForPositiveReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForPositiveReviewsContains(String value,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'thanksMessageForPositiveReviews',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForPositiveReviewsMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'thanksMessageForPositiveReviews',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForPositiveReviewsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'thanksMessageForPositiveReviews',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      thanksMessageForPositiveReviewsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'thanksMessageForPositiveReviews',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      updatedAtIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'updatedAt',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      updatedAtIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'updatedAt',
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      updatedAtEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      updatedAtGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      updatedAtLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QAfterFilterCondition>
      updatedAtBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'updatedAt',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }
}

extension RSDataSurveyModelQueryObject
    on QueryBuilder<RSDataSurveyModel, RSDataSurveyModel, QFilterCondition> {}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters

const RsDataHomePageDesignerModelSchema = Schema(
  name: r'RsDataHomePageDesignerModel',
  id: -5822371456046561604,
  properties: {
    r'createdAt': PropertySchema(
      id: 0,
      name: r'createdAt',
      type: IsarType.dateTime,
    ),
    r'hotelId': PropertySchema(
      id: 1,
      name: r'hotelId',
      type: IsarType.long,
    ),
    r'icibotId': PropertySchema(
      id: 2,
      name: r'icibotId',
      type: IsarType.long,
    ),
    r'imageUrl': PropertySchema(
      id: 3,
      name: r'imageUrl',
      type: IsarType.string,
    ),
    r'menuItemId': PropertySchema(
      id: 4,
      name: r'menuItemId',
      type: IsarType.long,
    ),
    r'menuSectionId': PropertySchema(
      id: 5,
      name: r'menuSectionId',
      type: IsarType.long,
    ),
    r'priority': PropertySchema(
      id: 6,
      name: r'priority',
      type: IsarType.long,
    ),
    r'title': PropertySchema(
      id: 7,
      name: r'title',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'type': PropertySchema(
      id: 8,
      name: r'type',
      type: IsarType.string,
    ),
    r'updatedAt': PropertySchema(
      id: 9,
      name: r'updatedAt',
      type: IsarType.dateTime,
    ),
    r'url': PropertySchema(
      id: 10,
      name: r'url',
      type: IsarType.string,
    )
  },
  estimateSize: _rsDataHomePageDesignerModelEstimateSize,
  serialize: _rsDataHomePageDesignerModelSerialize,
  deserialize: _rsDataHomePageDesignerModelDeserialize,
  deserializeProp: _rsDataHomePageDesignerModelDeserializeProp,
);

int _rsDataHomePageDesignerModelEstimateSize(
  RsDataHomePageDesignerModel object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final value = object.imageUrl;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.title;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.type;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.url;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  return bytesCount;
}

void _rsDataHomePageDesignerModelSerialize(
  RsDataHomePageDesignerModel object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeDateTime(offsets[0], object.createdAt);
  writer.writeLong(offsets[1], object.hotelId);
  writer.writeLong(offsets[2], object.icibotId);
  writer.writeString(offsets[3], object.imageUrl);
  writer.writeLong(offsets[4], object.menuItemId);
  writer.writeLong(offsets[5], object.menuSectionId);
  writer.writeLong(offsets[6], object.priority);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[7],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.title,
  );
  writer.writeString(offsets[8], object.type);
  writer.writeDateTime(offsets[9], object.updatedAt);
  writer.writeString(offsets[10], object.url);
}

RsDataHomePageDesignerModel _rsDataHomePageDesignerModelDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = RsDataHomePageDesignerModel(
    createdAt: reader.readDateTimeOrNull(offsets[0]),
    hotelId: reader.readLongOrNull(offsets[1]),
    icibotId: reader.readLongOrNull(offsets[2]),
    imageUrl: reader.readStringOrNull(offsets[3]),
    menuItemId: reader.readLongOrNull(offsets[4]),
    menuSectionId: reader.readLongOrNull(offsets[5]),
    priority: reader.readLongOrNull(offsets[6]),
    title: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[7],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    type: reader.readStringOrNull(offsets[8]),
    updatedAt: reader.readDateTimeOrNull(offsets[9]),
    url: reader.readStringOrNull(offsets[10]),
  );
  return object;
}

P _rsDataHomePageDesignerModelDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 1:
      return (reader.readLongOrNull(offset)) as P;
    case 2:
      return (reader.readLongOrNull(offset)) as P;
    case 3:
      return (reader.readStringOrNull(offset)) as P;
    case 4:
      return (reader.readLongOrNull(offset)) as P;
    case 5:
      return (reader.readLongOrNull(offset)) as P;
    case 6:
      return (reader.readLongOrNull(offset)) as P;
    case 7:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 8:
      return (reader.readStringOrNull(offset)) as P;
    case 9:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 10:
      return (reader.readStringOrNull(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension RsDataHomePageDesignerModelQueryFilter on QueryBuilder<
    RsDataHomePageDesignerModel,
    RsDataHomePageDesignerModel,
    QFilterCondition> {
  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> createdAtIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'createdAt',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> createdAtIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'createdAt',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> createdAtEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> createdAtGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> createdAtLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> createdAtBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'createdAt',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> hotelIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelId',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> hotelIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelId',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> hotelIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> hotelIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> hotelIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> hotelIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> icibotIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'icibotId',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> icibotIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'icibotId',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> icibotIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> icibotIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> icibotIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> icibotIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'icibotId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> imageUrlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'imageUrl',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> imageUrlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'imageUrl',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> imageUrlEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> imageUrlGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> imageUrlLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> imageUrlBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'imageUrl',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> imageUrlStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> imageUrlEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
          QAfterFilterCondition>
      imageUrlContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
          QAfterFilterCondition>
      imageUrlMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'imageUrl',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> imageUrlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'imageUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> imageUrlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'imageUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> menuItemIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> menuItemIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> menuItemIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> menuItemIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> menuItemIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> menuItemIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuItemId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> menuSectionIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuSectionId',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> menuSectionIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuSectionId',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> menuSectionIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuSectionId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> menuSectionIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuSectionId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> menuSectionIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuSectionId',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> menuSectionIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuSectionId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> priorityIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'priority',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> priorityIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'priority',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> priorityEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'priority',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> priorityGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'priority',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> priorityLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'priority',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> priorityBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'priority',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> titleIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'title',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> titleIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'title',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> titleLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> titleIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> titleIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> titleLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> titleLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> titleLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> typeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'type',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> typeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'type',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> typeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> typeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> typeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> typeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'type',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> typeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> typeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
          QAfterFilterCondition>
      typeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
          QAfterFilterCondition>
      typeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'type',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> typeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'type',
        value: '',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> typeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'type',
        value: '',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> updatedAtIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'updatedAt',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> updatedAtIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'updatedAt',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> updatedAtEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> updatedAtGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> updatedAtLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> updatedAtBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'updatedAt',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> urlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'url',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> urlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'url',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> urlEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> urlGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> urlLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> urlBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'url',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> urlStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> urlEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
          QAfterFilterCondition>
      urlContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
          QAfterFilterCondition>
      urlMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'url',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> urlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'url',
        value: '',
      ));
    });
  }

  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
      QAfterFilterCondition> urlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'url',
        value: '',
      ));
    });
  }
}

extension RsDataHomePageDesignerModelQueryObject on QueryBuilder<
    RsDataHomePageDesignerModel,
    RsDataHomePageDesignerModel,
    QFilterCondition> {
  QueryBuilder<RsDataHomePageDesignerModel, RsDataHomePageDesignerModel,
          QAfterFilterCondition>
      titleElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'title');
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters

const RSDataMenuItemTitleAndDescriptionModelSchema = Schema(
  name: r'RSDataMenuItemTitleAndDescriptionModel',
  id: 3734823778589225105,
  properties: {
    r'closingValues': PropertySchema(
      id: 0,
      name: r'closingValues',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'dateRequired': PropertySchema(
      id: 1,
      name: r'dateRequired',
      type: IsarType.bool,
    ),
    r'description': PropertySchema(
      id: 2,
      name: r'description',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'hotelId': PropertySchema(
      id: 3,
      name: r'hotelId',
      type: IsarType.long,
    ),
    r'icibotId': PropertySchema(
      id: 4,
      name: r'icibotId',
      type: IsarType.long,
    ),
    r'imageName': PropertySchema(
      id: 5,
      name: r'imageName',
      type: IsarType.string,
    ),
    r'imageUrl': PropertySchema(
      id: 6,
      name: r'imageUrl',
      type: IsarType.string,
    ),
    r'menuItemId': PropertySchema(
      id: 7,
      name: r'menuItemId',
      type: IsarType.long,
    ),
    r'reasonValues': PropertySchema(
      id: 8,
      name: r'reasonValues',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'responseTime': PropertySchema(
      id: 9,
      name: r'responseTime',
      type: IsarType.long,
    ),
    r'restrictionType': PropertySchema(
      id: 10,
      name: r'restrictionType',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'restrictionValue': PropertySchema(
      id: 11,
      name: r'restrictionValue',
      type: IsarType.long,
    ),
    r'selectValues': PropertySchema(
      id: 12,
      name: r'selectValues',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'taskTypeId': PropertySchema(
      id: 13,
      name: r'taskTypeId',
      type: IsarType.long,
    ),
    r'title': PropertySchema(
      id: 14,
      name: r'title',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    )
  },
  estimateSize: _rSDataMenuItemTitleAndDescriptionModelEstimateSize,
  serialize: _rSDataMenuItemTitleAndDescriptionModelSerialize,
  deserialize: _rSDataMenuItemTitleAndDescriptionModelDeserialize,
  deserializeProp: _rSDataMenuItemTitleAndDescriptionModelDeserializeProp,
);

int _rSDataMenuItemTitleAndDescriptionModelEstimateSize(
  RSDataMenuItemTitleAndDescriptionModel object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final list = object.closingValues;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.description;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.imageName;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.imageUrl;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.reasonValues;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.restrictionType;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.selectValues;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.title;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  return bytesCount;
}

void _rSDataMenuItemTitleAndDescriptionModelSerialize(
  RSDataMenuItemTitleAndDescriptionModel object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[0],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.closingValues,
  );
  writer.writeBool(offsets[1], object.dateRequired);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[2],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.description,
  );
  writer.writeLong(offsets[3], object.hotelId);
  writer.writeLong(offsets[4], object.icibotId);
  writer.writeString(offsets[5], object.imageName);
  writer.writeString(offsets[6], object.imageUrl);
  writer.writeLong(offsets[7], object.menuItemId);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[8],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.reasonValues,
  );
  writer.writeLong(offsets[9], object.responseTime);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[10],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.restrictionType,
  );
  writer.writeLong(offsets[11], object.restrictionValue);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[12],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.selectValues,
  );
  writer.writeLong(offsets[13], object.taskTypeId);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[14],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.title,
  );
}

RSDataMenuItemTitleAndDescriptionModel
    _rSDataMenuItemTitleAndDescriptionModelDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = RSDataMenuItemTitleAndDescriptionModel(
    closingValues: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[0],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    dateRequired: reader.readBoolOrNull(offsets[1]),
    description: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[2],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    hotelId: reader.readLongOrNull(offsets[3]),
    icibotId: reader.readLongOrNull(offsets[4]),
    imageName: reader.readStringOrNull(offsets[5]),
    imageUrl: reader.readStringOrNull(offsets[6]),
    menuItemId: reader.readLongOrNull(offsets[7]),
    reasonValues: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[8],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    responseTime: reader.readLongOrNull(offsets[9]),
    restrictionType: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[10],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    restrictionValue: reader.readLongOrNull(offsets[11]),
    selectValues: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[12],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    taskTypeId: reader.readLongOrNull(offsets[13]),
    title: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[14],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
  );
  return object;
}

P _rSDataMenuItemTitleAndDescriptionModelDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 1:
      return (reader.readBoolOrNull(offset)) as P;
    case 2:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 3:
      return (reader.readLongOrNull(offset)) as P;
    case 4:
      return (reader.readLongOrNull(offset)) as P;
    case 5:
      return (reader.readStringOrNull(offset)) as P;
    case 6:
      return (reader.readStringOrNull(offset)) as P;
    case 7:
      return (reader.readLongOrNull(offset)) as P;
    case 8:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 9:
      return (reader.readLongOrNull(offset)) as P;
    case 10:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 11:
      return (reader.readLongOrNull(offset)) as P;
    case 12:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 13:
      return (reader.readLongOrNull(offset)) as P;
    case 14:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension RSDataMenuItemTitleAndDescriptionModelQueryFilter on QueryBuilder<
    RSDataMenuItemTitleAndDescriptionModel,
    RSDataMenuItemTitleAndDescriptionModel,
    QFilterCondition> {
  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> closingValuesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'closingValues',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> closingValuesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'closingValues',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> closingValuesLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'closingValues',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> closingValuesIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'closingValues',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> closingValuesIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'closingValues',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> closingValuesLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'closingValues',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> closingValuesLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'closingValues',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> closingValuesLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'closingValues',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> dateRequiredIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'dateRequired',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> dateRequiredIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'dateRequired',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> dateRequiredEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'dateRequired',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> descriptionIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'description',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> descriptionIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'description',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> descriptionLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> descriptionIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> descriptionIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> descriptionLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> descriptionLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> descriptionLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> hotelIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> hotelIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> hotelIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> hotelIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> hotelIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> hotelIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> icibotIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'icibotId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> icibotIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'icibotId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> icibotIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> icibotIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> icibotIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'icibotId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> icibotIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'icibotId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageNameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'imageName',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageNameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'imageName',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageNameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'imageName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageNameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'imageName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageNameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'imageName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageNameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'imageName',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageNameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'imageName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageNameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'imageName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemTitleAndDescriptionModel,
          RSDataMenuItemTitleAndDescriptionModel, QAfterFilterCondition>
      imageNameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'imageName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemTitleAndDescriptionModel,
          RSDataMenuItemTitleAndDescriptionModel, QAfterFilterCondition>
      imageNameMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'imageName',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageNameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'imageName',
        value: '',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageNameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'imageName',
        value: '',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageUrlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'imageUrl',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageUrlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'imageUrl',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageUrlEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageUrlGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageUrlLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageUrlBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'imageUrl',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageUrlStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageUrlEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemTitleAndDescriptionModel,
          RSDataMenuItemTitleAndDescriptionModel, QAfterFilterCondition>
      imageUrlContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'imageUrl',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemTitleAndDescriptionModel,
          RSDataMenuItemTitleAndDescriptionModel, QAfterFilterCondition>
      imageUrlMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'imageUrl',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageUrlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'imageUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> imageUrlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'imageUrl',
        value: '',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> menuItemIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> menuItemIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> menuItemIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> menuItemIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> menuItemIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> menuItemIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuItemId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> reasonValuesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'reasonValues',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> reasonValuesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'reasonValues',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> reasonValuesLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'reasonValues',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> reasonValuesIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'reasonValues',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> reasonValuesIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'reasonValues',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> reasonValuesLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'reasonValues',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> reasonValuesLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'reasonValues',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> reasonValuesLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'reasonValues',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> responseTimeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'responseTime',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> responseTimeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'responseTime',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> responseTimeEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'responseTime',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> responseTimeGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'responseTime',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> responseTimeLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'responseTime',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> responseTimeBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'responseTime',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> restrictionTypeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'restrictionType',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> restrictionTypeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'restrictionType',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> restrictionTypeLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'restrictionType',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> restrictionTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'restrictionType',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> restrictionTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'restrictionType',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> restrictionTypeLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'restrictionType',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> restrictionTypeLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'restrictionType',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> restrictionTypeLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'restrictionType',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> restrictionValueIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'restrictionValue',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> restrictionValueIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'restrictionValue',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> restrictionValueEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'restrictionValue',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> restrictionValueGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'restrictionValue',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> restrictionValueLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'restrictionValue',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> restrictionValueBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'restrictionValue',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> selectValuesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'selectValues',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> selectValuesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'selectValues',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> selectValuesLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'selectValues',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> selectValuesIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'selectValues',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> selectValuesIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'selectValues',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> selectValuesLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'selectValues',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> selectValuesLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'selectValues',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> selectValuesLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'selectValues',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> taskTypeIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'taskTypeId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> taskTypeIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'taskTypeId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> taskTypeIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'taskTypeId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> taskTypeIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'taskTypeId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> taskTypeIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'taskTypeId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> taskTypeIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'taskTypeId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> titleIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'title',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> titleIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'title',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> titleLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> titleIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> titleIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> titleLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> titleLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemTitleAndDescriptionModel,
      RSDataMenuItemTitleAndDescriptionModel,
      QAfterFilterCondition> titleLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }
}

extension RSDataMenuItemTitleAndDescriptionModelQueryObject on QueryBuilder<
    RSDataMenuItemTitleAndDescriptionModel,
    RSDataMenuItemTitleAndDescriptionModel,
    QFilterCondition> {
  QueryBuilder<RSDataMenuItemTitleAndDescriptionModel,
          RSDataMenuItemTitleAndDescriptionModel, QAfterFilterCondition>
      closingValuesElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'closingValues');
    });
  }

  QueryBuilder<RSDataMenuItemTitleAndDescriptionModel,
          RSDataMenuItemTitleAndDescriptionModel, QAfterFilterCondition>
      descriptionElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'description');
    });
  }

  QueryBuilder<RSDataMenuItemTitleAndDescriptionModel,
          RSDataMenuItemTitleAndDescriptionModel, QAfterFilterCondition>
      reasonValuesElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'reasonValues');
    });
  }

  QueryBuilder<RSDataMenuItemTitleAndDescriptionModel,
          RSDataMenuItemTitleAndDescriptionModel, QAfterFilterCondition>
      restrictionTypeElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'restrictionType');
    });
  }

  QueryBuilder<RSDataMenuItemTitleAndDescriptionModel,
          RSDataMenuItemTitleAndDescriptionModel, QAfterFilterCondition>
      selectValuesElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'selectValues');
    });
  }

  QueryBuilder<RSDataMenuItemTitleAndDescriptionModel,
          RSDataMenuItemTitleAndDescriptionModel, QAfterFilterCondition>
      titleElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'title');
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters

const RSDataMenuItemBulletListModelSchema = Schema(
  name: r'RSDataMenuItemBulletListModel',
  id: -4897207407688462483,
  properties: {
    r'id': PropertySchema(
      id: 0,
      name: r'id',
      type: IsarType.long,
    ),
    r'menuItemId': PropertySchema(
      id: 1,
      name: r'menuItemId',
      type: IsarType.long,
    ),
    r'title': PropertySchema(
      id: 2,
      name: r'title',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    )
  },
  estimateSize: _rSDataMenuItemBulletListModelEstimateSize,
  serialize: _rSDataMenuItemBulletListModelSerialize,
  deserialize: _rSDataMenuItemBulletListModelDeserialize,
  deserializeProp: _rSDataMenuItemBulletListModelDeserializeProp,
);

int _rSDataMenuItemBulletListModelEstimateSize(
  RSDataMenuItemBulletListModel object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final list = object.title;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  return bytesCount;
}

void _rSDataMenuItemBulletListModelSerialize(
  RSDataMenuItemBulletListModel object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeLong(offsets[0], object.id);
  writer.writeLong(offsets[1], object.menuItemId);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[2],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.title,
  );
}

RSDataMenuItemBulletListModel _rSDataMenuItemBulletListModelDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = RSDataMenuItemBulletListModel(
    id: reader.readLongOrNull(offsets[0]),
    menuItemId: reader.readLongOrNull(offsets[1]),
    title: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[2],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
  );
  return object;
}

P _rSDataMenuItemBulletListModelDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readLongOrNull(offset)) as P;
    case 1:
      return (reader.readLongOrNull(offset)) as P;
    case 2:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension RSDataMenuItemBulletListModelQueryFilter on QueryBuilder<
    RSDataMenuItemBulletListModel,
    RSDataMenuItemBulletListModel,
    QFilterCondition> {
  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> idIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> idIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> idEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> idGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> idLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> idBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'id',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> menuItemIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> menuItemIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> menuItemIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> menuItemIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> menuItemIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> menuItemIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuItemId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> titleIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'title',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> titleIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'title',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> titleLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> titleIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> titleIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> titleLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> titleLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
      QAfterFilterCondition> titleLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }
}

extension RSDataMenuItemBulletListModelQueryObject on QueryBuilder<
    RSDataMenuItemBulletListModel,
    RSDataMenuItemBulletListModel,
    QFilterCondition> {
  QueryBuilder<RSDataMenuItemBulletListModel, RSDataMenuItemBulletListModel,
          QAfterFilterCondition>
      titleElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'title');
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters

const RSDataMenuItemCatalogGroupsModelSchema = Schema(
  name: r'RSDataMenuItemCatalogGroupsModel',
  id: 4933607273504698243,
  properties: {
    r'id': PropertySchema(
      id: 0,
      name: r'id',
      type: IsarType.long,
    ),
    r'images': PropertySchema(
      id: 1,
      name: r'images',
      type: IsarType.objectList,
      target: r'RSDataImagesModel',
    ),
    r'mainGroup': PropertySchema(
      id: 2,
      name: r'mainGroup',
      type: IsarType.string,
    ),
    r'maxPerPerson': PropertySchema(
      id: 3,
      name: r'maxPerPerson',
      type: IsarType.long,
    ),
    r'menuItemCatalogs': PropertySchema(
      id: 4,
      name: r'menuItemCatalogs',
      type: IsarType.objectList,
      target: r'RSDataMenuItemCatalogsModel',
    ),
    r'menuItemId': PropertySchema(
      id: 5,
      name: r'menuItemId',
      type: IsarType.long,
    ),
    r'name': PropertySchema(
      id: 6,
      name: r'name',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'priority': PropertySchema(
      id: 7,
      name: r'priority',
      type: IsarType.long,
    )
  },
  estimateSize: _rSDataMenuItemCatalogGroupsModelEstimateSize,
  serialize: _rSDataMenuItemCatalogGroupsModelSerialize,
  deserialize: _rSDataMenuItemCatalogGroupsModelDeserialize,
  deserializeProp: _rSDataMenuItemCatalogGroupsModelDeserializeProp,
);

int _rSDataMenuItemCatalogGroupsModelEstimateSize(
  RSDataMenuItemCatalogGroupsModel object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final list = object.images;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataImagesModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount +=
              RSDataImagesModelSchema.estimateSize(value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.mainGroup;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.menuItemCatalogs;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataMenuItemCatalogsModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataMenuItemCatalogsModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.name;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  return bytesCount;
}

void _rSDataMenuItemCatalogGroupsModelSerialize(
  RSDataMenuItemCatalogGroupsModel object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeLong(offsets[0], object.id);
  writer.writeObjectList<RSDataImagesModel>(
    offsets[1],
    allOffsets,
    RSDataImagesModelSchema.serialize,
    object.images,
  );
  writer.writeString(offsets[2], object.mainGroup);
  writer.writeLong(offsets[3], object.maxPerPerson);
  writer.writeObjectList<RSDataMenuItemCatalogsModel>(
    offsets[4],
    allOffsets,
    RSDataMenuItemCatalogsModelSchema.serialize,
    object.menuItemCatalogs,
  );
  writer.writeLong(offsets[5], object.menuItemId);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[6],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.name,
  );
  writer.writeLong(offsets[7], object.priority);
}

RSDataMenuItemCatalogGroupsModel _rSDataMenuItemCatalogGroupsModelDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = RSDataMenuItemCatalogGroupsModel(
    id: reader.readLongOrNull(offsets[0]),
    images: reader.readObjectList<RSDataImagesModel>(
      offsets[1],
      RSDataImagesModelSchema.deserialize,
      allOffsets,
      RSDataImagesModel(),
    ),
    mainGroup: reader.readStringOrNull(offsets[2]),
    maxPerPerson: reader.readLongOrNull(offsets[3]),
    menuItemCatalogs: reader.readObjectList<RSDataMenuItemCatalogsModel>(
      offsets[4],
      RSDataMenuItemCatalogsModelSchema.deserialize,
      allOffsets,
      RSDataMenuItemCatalogsModel(),
    ),
    menuItemId: reader.readLongOrNull(offsets[5]),
    name: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[6],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    priority: reader.readLongOrNull(offsets[7]),
  );
  return object;
}

P _rSDataMenuItemCatalogGroupsModelDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readLongOrNull(offset)) as P;
    case 1:
      return (reader.readObjectList<RSDataImagesModel>(
        offset,
        RSDataImagesModelSchema.deserialize,
        allOffsets,
        RSDataImagesModel(),
      )) as P;
    case 2:
      return (reader.readStringOrNull(offset)) as P;
    case 3:
      return (reader.readLongOrNull(offset)) as P;
    case 4:
      return (reader.readObjectList<RSDataMenuItemCatalogsModel>(
        offset,
        RSDataMenuItemCatalogsModelSchema.deserialize,
        allOffsets,
        RSDataMenuItemCatalogsModel(),
      )) as P;
    case 5:
      return (reader.readLongOrNull(offset)) as P;
    case 6:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 7:
      return (reader.readLongOrNull(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension RSDataMenuItemCatalogGroupsModelQueryFilter on QueryBuilder<
    RSDataMenuItemCatalogGroupsModel,
    RSDataMenuItemCatalogGroupsModel,
    QFilterCondition> {
  QueryBuilder<RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel, QAfterFilterCondition> idIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel, QAfterFilterCondition> idIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> idEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel, QAfterFilterCondition> idGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel, QAfterFilterCondition> idLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel, QAfterFilterCondition> idBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'id',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel, QAfterFilterCondition> imagesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'images',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> imagesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'images',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> imagesLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'images',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel, QAfterFilterCondition> imagesIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'images',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> imagesIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'images',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> imagesLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'images',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> imagesLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'images',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> imagesLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'images',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> mainGroupIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'mainGroup',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> mainGroupIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'mainGroup',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel, QAfterFilterCondition> mainGroupEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'mainGroup',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> mainGroupGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'mainGroup',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> mainGroupLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'mainGroup',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel, QAfterFilterCondition> mainGroupBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'mainGroup',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> mainGroupStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'mainGroup',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> mainGroupEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'mainGroup',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogGroupsModel,
          RSDataMenuItemCatalogGroupsModel, QAfterFilterCondition>
      mainGroupContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'mainGroup',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogGroupsModel,
          RSDataMenuItemCatalogGroupsModel, QAfterFilterCondition>
      mainGroupMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'mainGroup',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> mainGroupIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'mainGroup',
        value: '',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> mainGroupIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'mainGroup',
        value: '',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> maxPerPersonIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'maxPerPerson',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> maxPerPersonIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'maxPerPerson',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> maxPerPersonEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'maxPerPerson',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> maxPerPersonGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'maxPerPerson',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> maxPerPersonLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'maxPerPerson',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> maxPerPersonBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'maxPerPerson',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> menuItemCatalogsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemCatalogs',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> menuItemCatalogsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemCatalogs',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> menuItemCatalogsLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogs',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> menuItemCatalogsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogs',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> menuItemCatalogsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogs',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> menuItemCatalogsLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogs',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> menuItemCatalogsLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogs',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> menuItemCatalogsLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogs',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> menuItemIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> menuItemIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> menuItemIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> menuItemIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> menuItemIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> menuItemIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuItemId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel, QAfterFilterCondition> nameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel, QAfterFilterCondition> nameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> nameLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel, QAfterFilterCondition> nameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> nameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> nameLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> nameLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> nameLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> priorityIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'priority',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> priorityIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'priority',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> priorityEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'priority',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> priorityGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'priority',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel, QAfterFilterCondition> priorityLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'priority',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel, QAfterFilterCondition> priorityBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'priority',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }
}

extension RSDataMenuItemCatalogGroupsModelQueryObject on QueryBuilder<
    RSDataMenuItemCatalogGroupsModel,
    RSDataMenuItemCatalogGroupsModel,
    QFilterCondition> {
  QueryBuilder<
      RSDataMenuItemCatalogGroupsModel,
      RSDataMenuItemCatalogGroupsModel,
      QAfterFilterCondition> imagesElement(FilterQuery<RSDataImagesModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'images');
    });
  }

  QueryBuilder<RSDataMenuItemCatalogGroupsModel,
          RSDataMenuItemCatalogGroupsModel, QAfterFilterCondition>
      menuItemCatalogsElement(FilterQuery<RSDataMenuItemCatalogsModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'menuItemCatalogs');
    });
  }

  QueryBuilder<RSDataMenuItemCatalogGroupsModel,
          RSDataMenuItemCatalogGroupsModel, QAfterFilterCondition>
      nameElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'name');
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters

const RSDataImagesModelSchema = Schema(
  name: r'RSDataImagesModel',
  id: -7986720837992486208,
  properties: {
    r'fileName': PropertySchema(
      id: 0,
      name: r'fileName',
      type: IsarType.string,
    ),
    r'key': PropertySchema(
      id: 1,
      name: r'key',
      type: IsarType.string,
    ),
    r'lastModified': PropertySchema(
      id: 2,
      name: r'lastModified',
      type: IsarType.dateTime,
    ),
    r'sizeKB': PropertySchema(
      id: 3,
      name: r'sizeKB',
      type: IsarType.double,
    ),
    r'url': PropertySchema(
      id: 4,
      name: r'url',
      type: IsarType.string,
    )
  },
  estimateSize: _rSDataImagesModelEstimateSize,
  serialize: _rSDataImagesModelSerialize,
  deserialize: _rSDataImagesModelDeserialize,
  deserializeProp: _rSDataImagesModelDeserializeProp,
);

int _rSDataImagesModelEstimateSize(
  RSDataImagesModel object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final value = object.fileName;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.key;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.url;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  return bytesCount;
}

void _rSDataImagesModelSerialize(
  RSDataImagesModel object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeString(offsets[0], object.fileName);
  writer.writeString(offsets[1], object.key);
  writer.writeDateTime(offsets[2], object.lastModified);
  writer.writeDouble(offsets[3], object.sizeKB);
  writer.writeString(offsets[4], object.url);
}

RSDataImagesModel _rSDataImagesModelDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = RSDataImagesModel(
    fileName: reader.readStringOrNull(offsets[0]),
    key: reader.readStringOrNull(offsets[1]),
    lastModified: reader.readDateTimeOrNull(offsets[2]),
    sizeKB: reader.readDoubleOrNull(offsets[3]),
    url: reader.readStringOrNull(offsets[4]),
  );
  return object;
}

P _rSDataImagesModelDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readStringOrNull(offset)) as P;
    case 1:
      return (reader.readStringOrNull(offset)) as P;
    case 2:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 3:
      return (reader.readDoubleOrNull(offset)) as P;
    case 4:
      return (reader.readStringOrNull(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension RSDataImagesModelQueryFilter
    on QueryBuilder<RSDataImagesModel, RSDataImagesModel, QFilterCondition> {
  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      fileNameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'fileName',
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      fileNameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'fileName',
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      fileNameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'fileName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      fileNameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'fileName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      fileNameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'fileName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      fileNameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'fileName',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      fileNameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'fileName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      fileNameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'fileName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      fileNameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'fileName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      fileNameMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'fileName',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      fileNameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'fileName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      fileNameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'fileName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      keyIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'key',
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      keyIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'key',
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      keyEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'key',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      keyGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'key',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      keyLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'key',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      keyBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'key',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      keyStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'key',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      keyEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'key',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      keyContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'key',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      keyMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'key',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      keyIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'key',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      keyIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'key',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      lastModifiedIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'lastModified',
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      lastModifiedIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'lastModified',
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      lastModifiedEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastModified',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      lastModifiedGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastModified',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      lastModifiedLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastModified',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      lastModifiedBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastModified',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      sizeKBIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'sizeKB',
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      sizeKBIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'sizeKB',
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      sizeKBEqualTo(
    double? value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'sizeKB',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      sizeKBGreaterThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'sizeKB',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      sizeKBLessThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'sizeKB',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      sizeKBBetween(
    double? lower,
    double? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'sizeKB',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      urlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'url',
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      urlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'url',
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      urlEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      urlGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      urlLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      urlBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'url',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      urlStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      urlEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      urlContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      urlMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'url',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      urlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'url',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataImagesModel, RSDataImagesModel, QAfterFilterCondition>
      urlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'url',
        value: '',
      ));
    });
  }
}

extension RSDataImagesModelQueryObject
    on QueryBuilder<RSDataImagesModel, RSDataImagesModel, QFilterCondition> {}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters

const RSDataMenuItemCatalogsModelSchema = Schema(
  name: r'RSDataMenuItemCatalogsModel',
  id: -4358509589944524706,
  properties: {
    r'cannotBeSold': PropertySchema(
      id: 0,
      name: r'cannotBeSold',
      type: IsarType.bool,
    ),
    r'capacityType': PropertySchema(
      id: 1,
      name: r'capacityType',
      type: IsarType.string,
    ),
    r'description': PropertySchema(
      id: 2,
      name: r'description',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'endingDate': PropertySchema(
      id: 3,
      name: r'endingDate',
      type: IsarType.dateTime,
    ),
    r'expirePeriod': PropertySchema(
      id: 4,
      name: r'expirePeriod',
      type: IsarType.long,
    ),
    r'expirePeriodType': PropertySchema(
      id: 5,
      name: r'expirePeriodType',
      type: IsarType.string,
    ),
    r'id': PropertySchema(
      id: 6,
      name: r'id',
      type: IsarType.long,
    ),
    r'images': PropertySchema(
      id: 7,
      name: r'images',
      type: IsarType.objectList,
      target: r'RSDataImagesModel',
    ),
    r'inventory': PropertySchema(
      id: 8,
      name: r'inventory',
      type: IsarType.double,
    ),
    r'menuItemCatalogGroupId': PropertySchema(
      id: 9,
      name: r'menuItemCatalogGroupId',
      type: IsarType.long,
    ),
    r'menuItemCatalogModifierGroups': PropertySchema(
      id: 10,
      name: r'menuItemCatalogModifierGroups',
      type: IsarType.objectList,
      target: r'MenuItemCatalogModifierGroup',
    ),
    r'menuItemCatalogPrices': PropertySchema(
      id: 11,
      name: r'menuItemCatalogPrices',
      type: IsarType.objectList,
      target: r'RSDataMenuItemCatalogPricesModel',
    ),
    r'menuItemId': PropertySchema(
      id: 12,
      name: r'menuItemId',
      type: IsarType.long,
    ),
    r'name': PropertySchema(
      id: 13,
      name: r'name',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'priority': PropertySchema(
      id: 14,
      name: r'priority',
      type: IsarType.long,
    ),
    r'restrictedMenuItemCapacities': PropertySchema(
      id: 15,
      name: r'restrictedMenuItemCapacities',
      type: IsarType.stringList,
    ),
    r'rewardPoint': PropertySchema(
      id: 16,
      name: r'rewardPoint',
      type: IsarType.double,
    ),
    r'startingDate': PropertySchema(
      id: 17,
      name: r'startingDate',
      type: IsarType.dateTime,
    ),
    r'tags': PropertySchema(
      id: 18,
      name: r'tags',
      type: IsarType.objectList,
      target: r'RSDataTagsModel',
    ),
    r'termsAndConditions': PropertySchema(
      id: 19,
      name: r'termsAndConditions',
      type: IsarType.string,
    ),
    r'usageTerms': PropertySchema(
      id: 20,
      name: r'usageTerms',
      type: IsarType.string,
    ),
    r'vat': PropertySchema(
      id: 21,
      name: r'vat',
      type: IsarType.double,
    )
  },
  estimateSize: _rSDataMenuItemCatalogsModelEstimateSize,
  serialize: _rSDataMenuItemCatalogsModelSerialize,
  deserialize: _rSDataMenuItemCatalogsModelDeserialize,
  deserializeProp: _rSDataMenuItemCatalogsModelDeserializeProp,
);

int _rSDataMenuItemCatalogsModelEstimateSize(
  RSDataMenuItemCatalogsModel object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final value = object.capacityType;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.description;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.expirePeriodType;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.images;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataImagesModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount +=
              RSDataImagesModelSchema.estimateSize(value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.menuItemCatalogModifierGroups;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[MenuItemCatalogModifierGroup]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += MenuItemCatalogModifierGroupSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.menuItemCatalogPrices;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataMenuItemCatalogPricesModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataMenuItemCatalogPricesModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.name;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.restrictedMenuItemCapacities;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += value.length * 3;
        }
      }
    }
  }
  {
    final list = object.tags;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTagsModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount +=
              RSDataTagsModelSchema.estimateSize(value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.termsAndConditions;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.usageTerms;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  return bytesCount;
}

void _rSDataMenuItemCatalogsModelSerialize(
  RSDataMenuItemCatalogsModel object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeBool(offsets[0], object.cannotBeSold);
  writer.writeString(offsets[1], object.capacityType);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[2],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.description,
  );
  writer.writeDateTime(offsets[3], object.endingDate);
  writer.writeLong(offsets[4], object.expirePeriod);
  writer.writeString(offsets[5], object.expirePeriodType);
  writer.writeLong(offsets[6], object.id);
  writer.writeObjectList<RSDataImagesModel>(
    offsets[7],
    allOffsets,
    RSDataImagesModelSchema.serialize,
    object.images,
  );
  writer.writeDouble(offsets[8], object.inventory);
  writer.writeLong(offsets[9], object.menuItemCatalogGroupId);
  writer.writeObjectList<MenuItemCatalogModifierGroup>(
    offsets[10],
    allOffsets,
    MenuItemCatalogModifierGroupSchema.serialize,
    object.menuItemCatalogModifierGroups,
  );
  writer.writeObjectList<RSDataMenuItemCatalogPricesModel>(
    offsets[11],
    allOffsets,
    RSDataMenuItemCatalogPricesModelSchema.serialize,
    object.menuItemCatalogPrices,
  );
  writer.writeLong(offsets[12], object.menuItemId);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[13],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.name,
  );
  writer.writeLong(offsets[14], object.priority);
  writer.writeStringList(offsets[15], object.restrictedMenuItemCapacities);
  writer.writeDouble(offsets[16], object.rewardPoint);
  writer.writeDateTime(offsets[17], object.startingDate);
  writer.writeObjectList<RSDataTagsModel>(
    offsets[18],
    allOffsets,
    RSDataTagsModelSchema.serialize,
    object.tags,
  );
  writer.writeString(offsets[19], object.termsAndConditions);
  writer.writeString(offsets[20], object.usageTerms);
  writer.writeDouble(offsets[21], object.vat);
}

RSDataMenuItemCatalogsModel _rSDataMenuItemCatalogsModelDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = RSDataMenuItemCatalogsModel(
    cannotBeSold: reader.readBoolOrNull(offsets[0]),
    capacityType: reader.readStringOrNull(offsets[1]),
    description: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[2],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    endingDate: reader.readDateTimeOrNull(offsets[3]),
    expirePeriod: reader.readLongOrNull(offsets[4]),
    expirePeriodType: reader.readStringOrNull(offsets[5]),
    id: reader.readLongOrNull(offsets[6]),
    images: reader.readObjectList<RSDataImagesModel>(
      offsets[7],
      RSDataImagesModelSchema.deserialize,
      allOffsets,
      RSDataImagesModel(),
    ),
    inventory: reader.readDoubleOrNull(offsets[8]),
    menuItemCatalogGroupId: reader.readLongOrNull(offsets[9]),
    menuItemCatalogModifierGroups:
        reader.readObjectList<MenuItemCatalogModifierGroup>(
      offsets[10],
      MenuItemCatalogModifierGroupSchema.deserialize,
      allOffsets,
      MenuItemCatalogModifierGroup(),
    ),
    menuItemCatalogPrices:
        reader.readObjectList<RSDataMenuItemCatalogPricesModel>(
      offsets[11],
      RSDataMenuItemCatalogPricesModelSchema.deserialize,
      allOffsets,
      RSDataMenuItemCatalogPricesModel(),
    ),
    menuItemId: reader.readLongOrNull(offsets[12]),
    name: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[13],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    priority: reader.readLongOrNull(offsets[14]),
    restrictedMenuItemCapacities: reader.readStringList(offsets[15]),
    rewardPoint: reader.readDoubleOrNull(offsets[16]),
    startingDate: reader.readDateTimeOrNull(offsets[17]),
    tags: reader.readObjectList<RSDataTagsModel>(
      offsets[18],
      RSDataTagsModelSchema.deserialize,
      allOffsets,
      RSDataTagsModel(),
    ),
    termsAndConditions: reader.readStringOrNull(offsets[19]),
    usageTerms: reader.readStringOrNull(offsets[20]),
    vat: reader.readDoubleOrNull(offsets[21]),
  );
  return object;
}

P _rSDataMenuItemCatalogsModelDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readBoolOrNull(offset)) as P;
    case 1:
      return (reader.readStringOrNull(offset)) as P;
    case 2:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 3:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 4:
      return (reader.readLongOrNull(offset)) as P;
    case 5:
      return (reader.readStringOrNull(offset)) as P;
    case 6:
      return (reader.readLongOrNull(offset)) as P;
    case 7:
      return (reader.readObjectList<RSDataImagesModel>(
        offset,
        RSDataImagesModelSchema.deserialize,
        allOffsets,
        RSDataImagesModel(),
      )) as P;
    case 8:
      return (reader.readDoubleOrNull(offset)) as P;
    case 9:
      return (reader.readLongOrNull(offset)) as P;
    case 10:
      return (reader.readObjectList<MenuItemCatalogModifierGroup>(
        offset,
        MenuItemCatalogModifierGroupSchema.deserialize,
        allOffsets,
        MenuItemCatalogModifierGroup(),
      )) as P;
    case 11:
      return (reader.readObjectList<RSDataMenuItemCatalogPricesModel>(
        offset,
        RSDataMenuItemCatalogPricesModelSchema.deserialize,
        allOffsets,
        RSDataMenuItemCatalogPricesModel(),
      )) as P;
    case 12:
      return (reader.readLongOrNull(offset)) as P;
    case 13:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 14:
      return (reader.readLongOrNull(offset)) as P;
    case 15:
      return (reader.readStringList(offset)) as P;
    case 16:
      return (reader.readDoubleOrNull(offset)) as P;
    case 17:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 18:
      return (reader.readObjectList<RSDataTagsModel>(
        offset,
        RSDataTagsModelSchema.deserialize,
        allOffsets,
        RSDataTagsModel(),
      )) as P;
    case 19:
      return (reader.readStringOrNull(offset)) as P;
    case 20:
      return (reader.readStringOrNull(offset)) as P;
    case 21:
      return (reader.readDoubleOrNull(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension RSDataMenuItemCatalogsModelQueryFilter on QueryBuilder<
    RSDataMenuItemCatalogsModel,
    RSDataMenuItemCatalogsModel,
    QFilterCondition> {
  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> cannotBeSoldIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'cannotBeSold',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> cannotBeSoldIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'cannotBeSold',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> cannotBeSoldEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'cannotBeSold',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> capacityTypeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'capacityType',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> capacityTypeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'capacityType',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> capacityTypeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'capacityType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> capacityTypeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'capacityType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> capacityTypeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'capacityType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> capacityTypeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'capacityType',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> capacityTypeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'capacityType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> capacityTypeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'capacityType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
          QAfterFilterCondition>
      capacityTypeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'capacityType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
          QAfterFilterCondition>
      capacityTypeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'capacityType',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> capacityTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'capacityType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> capacityTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'capacityType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> descriptionIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'description',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> descriptionIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'description',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> descriptionLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> descriptionIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> descriptionIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> descriptionLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> descriptionLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> descriptionLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> endingDateIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'endingDate',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> endingDateIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'endingDate',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> endingDateEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'endingDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> endingDateGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'endingDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> endingDateLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'endingDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> endingDateBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'endingDate',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> expirePeriodIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'expirePeriod',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> expirePeriodIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'expirePeriod',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> expirePeriodEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'expirePeriod',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> expirePeriodGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'expirePeriod',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> expirePeriodLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'expirePeriod',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> expirePeriodBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'expirePeriod',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> expirePeriodTypeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'expirePeriodType',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> expirePeriodTypeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'expirePeriodType',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> expirePeriodTypeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'expirePeriodType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> expirePeriodTypeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'expirePeriodType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> expirePeriodTypeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'expirePeriodType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> expirePeriodTypeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'expirePeriodType',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> expirePeriodTypeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'expirePeriodType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> expirePeriodTypeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'expirePeriodType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
          QAfterFilterCondition>
      expirePeriodTypeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'expirePeriodType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
          QAfterFilterCondition>
      expirePeriodTypeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'expirePeriodType',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> expirePeriodTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'expirePeriodType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> expirePeriodTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'expirePeriodType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> idIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> idIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> idEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> idGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> idLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> idBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'id',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> imagesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'images',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> imagesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'images',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> imagesLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'images',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> imagesIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'images',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> imagesIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'images',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> imagesLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'images',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> imagesLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'images',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> imagesLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'images',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> inventoryIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'inventory',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> inventoryIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'inventory',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> inventoryEqualTo(
    double? value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'inventory',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> inventoryGreaterThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'inventory',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> inventoryLessThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'inventory',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> inventoryBetween(
    double? lower,
    double? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'inventory',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogGroupIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemCatalogGroupId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogGroupIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemCatalogGroupId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogGroupIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuItemCatalogGroupId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogGroupIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuItemCatalogGroupId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogGroupIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuItemCatalogGroupId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogGroupIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuItemCatalogGroupId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogModifierGroupsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemCatalogModifierGroups',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogModifierGroupsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemCatalogModifierGroups',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
          QAfterFilterCondition>
      menuItemCatalogModifierGroupsLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogModifierGroups',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogModifierGroupsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogModifierGroups',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogModifierGroupsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogModifierGroups',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogModifierGroupsLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogModifierGroups',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogModifierGroupsLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogModifierGroups',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogModifierGroupsLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogModifierGroups',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogPricesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemCatalogPrices',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogPricesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemCatalogPrices',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogPricesLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogPrices',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogPricesIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogPrices',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogPricesIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogPrices',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogPricesLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogPrices',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogPricesLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogPrices',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemCatalogPricesLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'menuItemCatalogPrices',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> menuItemIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuItemId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> nameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> nameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> nameLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> nameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> nameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> nameLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> nameLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> nameLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> priorityIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'priority',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> priorityIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'priority',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> priorityEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'priority',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> priorityGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'priority',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> priorityLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'priority',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> priorityBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'priority',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> restrictedMenuItemCapacitiesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'restrictedMenuItemCapacities',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> restrictedMenuItemCapacitiesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'restrictedMenuItemCapacities',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> restrictedMenuItemCapacitiesElementEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'restrictedMenuItemCapacities',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> restrictedMenuItemCapacitiesElementGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'restrictedMenuItemCapacities',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> restrictedMenuItemCapacitiesElementLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'restrictedMenuItemCapacities',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> restrictedMenuItemCapacitiesElementBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'restrictedMenuItemCapacities',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> restrictedMenuItemCapacitiesElementStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'restrictedMenuItemCapacities',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> restrictedMenuItemCapacitiesElementEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'restrictedMenuItemCapacities',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
          QAfterFilterCondition>
      restrictedMenuItemCapacitiesElementContains(String value,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'restrictedMenuItemCapacities',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
          QAfterFilterCondition>
      restrictedMenuItemCapacitiesElementMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'restrictedMenuItemCapacities',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> restrictedMenuItemCapacitiesElementIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'restrictedMenuItemCapacities',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> restrictedMenuItemCapacitiesElementIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'restrictedMenuItemCapacities',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
          QAfterFilterCondition>
      restrictedMenuItemCapacitiesLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'restrictedMenuItemCapacities',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> restrictedMenuItemCapacitiesIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'restrictedMenuItemCapacities',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> restrictedMenuItemCapacitiesIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'restrictedMenuItemCapacities',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> restrictedMenuItemCapacitiesLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'restrictedMenuItemCapacities',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> restrictedMenuItemCapacitiesLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'restrictedMenuItemCapacities',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> restrictedMenuItemCapacitiesLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'restrictedMenuItemCapacities',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> rewardPointIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'rewardPoint',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> rewardPointIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'rewardPoint',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> rewardPointEqualTo(
    double? value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'rewardPoint',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> rewardPointGreaterThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'rewardPoint',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> rewardPointLessThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'rewardPoint',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> rewardPointBetween(
    double? lower,
    double? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'rewardPoint',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> startingDateIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'startingDate',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> startingDateIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'startingDate',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> startingDateEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'startingDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> startingDateGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'startingDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> startingDateLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'startingDate',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> startingDateBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'startingDate',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> tagsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'tags',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> tagsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'tags',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> tagsLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'tags',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> tagsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'tags',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> tagsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'tags',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> tagsLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'tags',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> tagsLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'tags',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> tagsLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'tags',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> termsAndConditionsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'termsAndConditions',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> termsAndConditionsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'termsAndConditions',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> termsAndConditionsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'termsAndConditions',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> termsAndConditionsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'termsAndConditions',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> termsAndConditionsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'termsAndConditions',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> termsAndConditionsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'termsAndConditions',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> termsAndConditionsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'termsAndConditions',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> termsAndConditionsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'termsAndConditions',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
          QAfterFilterCondition>
      termsAndConditionsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'termsAndConditions',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
          QAfterFilterCondition>
      termsAndConditionsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'termsAndConditions',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> termsAndConditionsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'termsAndConditions',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> termsAndConditionsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'termsAndConditions',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> usageTermsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'usageTerms',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> usageTermsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'usageTerms',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> usageTermsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'usageTerms',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> usageTermsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'usageTerms',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> usageTermsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'usageTerms',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> usageTermsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'usageTerms',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> usageTermsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'usageTerms',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> usageTermsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'usageTerms',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
          QAfterFilterCondition>
      usageTermsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'usageTerms',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
          QAfterFilterCondition>
      usageTermsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'usageTerms',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> usageTermsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'usageTerms',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> usageTermsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'usageTerms',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> vatIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'vat',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> vatIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'vat',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> vatEqualTo(
    double? value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'vat',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> vatGreaterThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'vat',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> vatLessThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'vat',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> vatBetween(
    double? lower,
    double? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'vat',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }
}

extension RSDataMenuItemCatalogsModelQueryObject on QueryBuilder<
    RSDataMenuItemCatalogsModel,
    RSDataMenuItemCatalogsModel,
    QFilterCondition> {
  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
          QAfterFilterCondition>
      descriptionElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'description');
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> imagesElement(FilterQuery<RSDataImagesModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'images');
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
          QAfterFilterCondition>
      menuItemCatalogModifierGroupsElement(
          FilterQuery<MenuItemCatalogModifierGroup> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'menuItemCatalogModifierGroups');
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
          QAfterFilterCondition>
      menuItemCatalogPricesElement(
          FilterQuery<RSDataMenuItemCatalogPricesModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'menuItemCatalogPrices');
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
          QAfterFilterCondition>
      nameElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'name');
    });
  }

  QueryBuilder<RSDataMenuItemCatalogsModel, RSDataMenuItemCatalogsModel,
      QAfterFilterCondition> tagsElement(FilterQuery<RSDataTagsModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'tags');
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters

const RSDataMenuItemCatalogPricesModelSchema = Schema(
  name: r'RSDataMenuItemCatalogPricesModel',
  id: 8910518920116356464,
  properties: {
    r'activateOffer': PropertySchema(
      id: 0,
      name: r'activateOffer',
      type: IsarType.bool,
    ),
    r'canBePurchasedWithLoyaltyPoints': PropertySchema(
      id: 1,
      name: r'canBePurchasedWithLoyaltyPoints',
      type: IsarType.bool,
    ),
    r'createdAt': PropertySchema(
      id: 2,
      name: r'createdAt',
      type: IsarType.dateTime,
    ),
    r'createdBy': PropertySchema(
      id: 3,
      name: r'createdBy',
      type: IsarType.long,
    ),
    r'currencyCode': PropertySchema(
      id: 4,
      name: r'currencyCode',
      type: IsarType.string,
    ),
    r'id': PropertySchema(
      id: 5,
      name: r'id',
      type: IsarType.long,
    ),
    r'isModifier': PropertySchema(
      id: 6,
      name: r'isModifier',
      type: IsarType.bool,
    ),
    r'loyaltyPointsExchangeValue': PropertySchema(
      id: 7,
      name: r'loyaltyPointsExchangeValue',
      type: IsarType.double,
    ),
    r'maximumLimit': PropertySchema(
      id: 8,
      name: r'maximumLimit',
      type: IsarType.long,
    ),
    r'menuItemCatalogGroupId': PropertySchema(
      id: 9,
      name: r'menuItemCatalogGroupId',
      type: IsarType.long,
    ),
    r'menuItemCatalogId': PropertySchema(
      id: 10,
      name: r'menuItemCatalogId',
      type: IsarType.long,
    ),
    r'menuItemCatalogModifierGroupId': PropertySchema(
      id: 11,
      name: r'menuItemCatalogModifierGroupId',
      type: IsarType.long,
    ),
    r'menuItemCatalogModifierId': PropertySchema(
      id: 12,
      name: r'menuItemCatalogModifierId',
      type: IsarType.long,
    ),
    r'menuItemId': PropertySchema(
      id: 13,
      name: r'menuItemId',
      type: IsarType.long,
    ),
    r'offerPrice': PropertySchema(
      id: 14,
      name: r'offerPrice',
      type: IsarType.double,
    ),
    r'offerTitle': PropertySchema(
      id: 15,
      name: r'offerTitle',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'price': PropertySchema(
      id: 16,
      name: r'price',
      type: IsarType.double,
    ),
    r'priority': PropertySchema(
      id: 17,
      name: r'priority',
      type: IsarType.long,
    ),
    r'reservationBlockTimeType': PropertySchema(
      id: 18,
      name: r'reservationBlockTimeType',
      type: IsarType.string,
    ),
    r'reservationBlockTimeValue': PropertySchema(
      id: 19,
      name: r'reservationBlockTimeValue',
      type: IsarType.long,
    ),
    r'size': PropertySchema(
      id: 20,
      name: r'size',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'updatedAt': PropertySchema(
      id: 21,
      name: r'updatedAt',
      type: IsarType.dateTime,
    ),
    r'updatedBy': PropertySchema(
      id: 22,
      name: r'updatedBy',
      type: IsarType.long,
    )
  },
  estimateSize: _rSDataMenuItemCatalogPricesModelEstimateSize,
  serialize: _rSDataMenuItemCatalogPricesModelSerialize,
  deserialize: _rSDataMenuItemCatalogPricesModelDeserialize,
  deserializeProp: _rSDataMenuItemCatalogPricesModelDeserializeProp,
);

int _rSDataMenuItemCatalogPricesModelEstimateSize(
  RSDataMenuItemCatalogPricesModel object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final value = object.currencyCode;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.offerTitle;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.reservationBlockTimeType;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.size;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  return bytesCount;
}

void _rSDataMenuItemCatalogPricesModelSerialize(
  RSDataMenuItemCatalogPricesModel object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeBool(offsets[0], object.activateOffer);
  writer.writeBool(offsets[1], object.canBePurchasedWithLoyaltyPoints);
  writer.writeDateTime(offsets[2], object.createdAt);
  writer.writeLong(offsets[3], object.createdBy);
  writer.writeString(offsets[4], object.currencyCode);
  writer.writeLong(offsets[5], object.id);
  writer.writeBool(offsets[6], object.isModifier);
  writer.writeDouble(offsets[7], object.loyaltyPointsExchangeValue);
  writer.writeLong(offsets[8], object.maximumLimit);
  writer.writeLong(offsets[9], object.menuItemCatalogGroupId);
  writer.writeLong(offsets[10], object.menuItemCatalogId);
  writer.writeLong(offsets[11], object.menuItemCatalogModifierGroupId);
  writer.writeLong(offsets[12], object.menuItemCatalogModifierId);
  writer.writeLong(offsets[13], object.menuItemId);
  writer.writeDouble(offsets[14], object.offerPrice);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[15],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.offerTitle,
  );
  writer.writeDouble(offsets[16], object.price);
  writer.writeLong(offsets[17], object.priority);
  writer.writeString(offsets[18], object.reservationBlockTimeType);
  writer.writeLong(offsets[19], object.reservationBlockTimeValue);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[20],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.size,
  );
  writer.writeDateTime(offsets[21], object.updatedAt);
  writer.writeLong(offsets[22], object.updatedBy);
}

RSDataMenuItemCatalogPricesModel _rSDataMenuItemCatalogPricesModelDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = RSDataMenuItemCatalogPricesModel(
    activateOffer: reader.readBoolOrNull(offsets[0]),
    canBePurchasedWithLoyaltyPoints: reader.readBoolOrNull(offsets[1]),
    createdAt: reader.readDateTimeOrNull(offsets[2]),
    createdBy: reader.readLongOrNull(offsets[3]),
    currencyCode: reader.readStringOrNull(offsets[4]),
    id: reader.readLongOrNull(offsets[5]),
    isModifier: reader.readBoolOrNull(offsets[6]),
    loyaltyPointsExchangeValue: reader.readDoubleOrNull(offsets[7]),
    maximumLimit: reader.readLongOrNull(offsets[8]),
    menuItemCatalogGroupId: reader.readLongOrNull(offsets[9]),
    menuItemCatalogId: reader.readLongOrNull(offsets[10]),
    menuItemCatalogModifierGroupId: reader.readLongOrNull(offsets[11]),
    menuItemCatalogModifierId: reader.readLongOrNull(offsets[12]),
    menuItemId: reader.readLongOrNull(offsets[13]),
    offerPrice: reader.readDoubleOrNull(offsets[14]),
    offerTitle: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[15],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    price: reader.readDoubleOrNull(offsets[16]),
    priority: reader.readLongOrNull(offsets[17]),
    reservationBlockTimeType: reader.readStringOrNull(offsets[18]),
    reservationBlockTimeValue: reader.readLongOrNull(offsets[19]),
    size: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[20],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    updatedAt: reader.readDateTimeOrNull(offsets[21]),
    updatedBy: reader.readLongOrNull(offsets[22]),
  );
  return object;
}

P _rSDataMenuItemCatalogPricesModelDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readBoolOrNull(offset)) as P;
    case 1:
      return (reader.readBoolOrNull(offset)) as P;
    case 2:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 3:
      return (reader.readLongOrNull(offset)) as P;
    case 4:
      return (reader.readStringOrNull(offset)) as P;
    case 5:
      return (reader.readLongOrNull(offset)) as P;
    case 6:
      return (reader.readBoolOrNull(offset)) as P;
    case 7:
      return (reader.readDoubleOrNull(offset)) as P;
    case 8:
      return (reader.readLongOrNull(offset)) as P;
    case 9:
      return (reader.readLongOrNull(offset)) as P;
    case 10:
      return (reader.readLongOrNull(offset)) as P;
    case 11:
      return (reader.readLongOrNull(offset)) as P;
    case 12:
      return (reader.readLongOrNull(offset)) as P;
    case 13:
      return (reader.readLongOrNull(offset)) as P;
    case 14:
      return (reader.readDoubleOrNull(offset)) as P;
    case 15:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 16:
      return (reader.readDoubleOrNull(offset)) as P;
    case 17:
      return (reader.readLongOrNull(offset)) as P;
    case 18:
      return (reader.readStringOrNull(offset)) as P;
    case 19:
      return (reader.readLongOrNull(offset)) as P;
    case 20:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 21:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 22:
      return (reader.readLongOrNull(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension RSDataMenuItemCatalogPricesModelQueryFilter on QueryBuilder<
    RSDataMenuItemCatalogPricesModel,
    RSDataMenuItemCatalogPricesModel,
    QFilterCondition> {
  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> activateOfferIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'activateOffer',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> activateOfferIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'activateOffer',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> activateOfferEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'activateOffer',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> canBePurchasedWithLoyaltyPointsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'canBePurchasedWithLoyaltyPoints',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> canBePurchasedWithLoyaltyPointsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'canBePurchasedWithLoyaltyPoints',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
          RSDataMenuItemCatalogPricesModel, QAfterFilterCondition>
      canBePurchasedWithLoyaltyPointsEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'canBePurchasedWithLoyaltyPoints',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> createdAtIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'createdAt',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> createdAtIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'createdAt',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> createdAtEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> createdAtGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> createdAtLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel, QAfterFilterCondition> createdAtBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'createdAt',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> createdByIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'createdBy',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> createdByIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'createdBy',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> createdByEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'createdBy',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> createdByGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'createdBy',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> createdByLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'createdBy',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel, QAfterFilterCondition> createdByBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'createdBy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> currencyCodeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'currencyCode',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> currencyCodeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'currencyCode',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> currencyCodeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'currencyCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> currencyCodeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'currencyCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> currencyCodeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'currencyCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> currencyCodeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'currencyCode',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> currencyCodeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'currencyCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> currencyCodeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'currencyCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
          RSDataMenuItemCatalogPricesModel, QAfterFilterCondition>
      currencyCodeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'currencyCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
          RSDataMenuItemCatalogPricesModel, QAfterFilterCondition>
      currencyCodeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'currencyCode',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> currencyCodeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'currencyCode',
        value: '',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> currencyCodeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'currencyCode',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel, QAfterFilterCondition> idIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel, QAfterFilterCondition> idIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> idEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel, QAfterFilterCondition> idGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel, QAfterFilterCondition> idLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel, QAfterFilterCondition> idBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'id',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> isModifierIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'isModifier',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> isModifierIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'isModifier',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> isModifierEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isModifier',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> loyaltyPointsExchangeValueIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'loyaltyPointsExchangeValue',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> loyaltyPointsExchangeValueIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'loyaltyPointsExchangeValue',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> loyaltyPointsExchangeValueEqualTo(
    double? value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'loyaltyPointsExchangeValue',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> loyaltyPointsExchangeValueGreaterThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'loyaltyPointsExchangeValue',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> loyaltyPointsExchangeValueLessThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'loyaltyPointsExchangeValue',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> loyaltyPointsExchangeValueBetween(
    double? lower,
    double? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'loyaltyPointsExchangeValue',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> maximumLimitIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'maximumLimit',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> maximumLimitIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'maximumLimit',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> maximumLimitEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'maximumLimit',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> maximumLimitGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'maximumLimit',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> maximumLimitLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'maximumLimit',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> maximumLimitBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'maximumLimit',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogGroupIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemCatalogGroupId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogGroupIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemCatalogGroupId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogGroupIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuItemCatalogGroupId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogGroupIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuItemCatalogGroupId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogGroupIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuItemCatalogGroupId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogGroupIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuItemCatalogGroupId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemCatalogId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemCatalogId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuItemCatalogId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuItemCatalogId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuItemCatalogId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuItemCatalogId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogModifierGroupIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemCatalogModifierGroupId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogModifierGroupIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemCatalogModifierGroupId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogModifierGroupIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuItemCatalogModifierGroupId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogModifierGroupIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuItemCatalogModifierGroupId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogModifierGroupIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuItemCatalogModifierGroupId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogModifierGroupIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuItemCatalogModifierGroupId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogModifierIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemCatalogModifierId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogModifierIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemCatalogModifierId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogModifierIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuItemCatalogModifierId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogModifierIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuItemCatalogModifierId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogModifierIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuItemCatalogModifierId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemCatalogModifierIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuItemCatalogModifierId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> menuItemIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuItemId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> offerPriceIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'offerPrice',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> offerPriceIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'offerPrice',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> offerPriceEqualTo(
    double? value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'offerPrice',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> offerPriceGreaterThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'offerPrice',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> offerPriceLessThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'offerPrice',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> offerPriceBetween(
    double? lower,
    double? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'offerPrice',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> offerTitleIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'offerTitle',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> offerTitleIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'offerTitle',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> offerTitleLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'offerTitle',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> offerTitleIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'offerTitle',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> offerTitleIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'offerTitle',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> offerTitleLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'offerTitle',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> offerTitleLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'offerTitle',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> offerTitleLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'offerTitle',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel, QAfterFilterCondition> priceIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'price',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> priceIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'price',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel, QAfterFilterCondition> priceEqualTo(
    double? value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'price',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel, QAfterFilterCondition> priceGreaterThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'price',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel, QAfterFilterCondition> priceLessThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'price',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel, QAfterFilterCondition> priceBetween(
    double? lower,
    double? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'price',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> priorityIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'priority',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> priorityIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'priority',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> priorityEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'priority',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> priorityGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'priority',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel, QAfterFilterCondition> priorityLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'priority',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel, QAfterFilterCondition> priorityBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'priority',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> reservationBlockTimeTypeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'reservationBlockTimeType',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> reservationBlockTimeTypeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'reservationBlockTimeType',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> reservationBlockTimeTypeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'reservationBlockTimeType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> reservationBlockTimeTypeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'reservationBlockTimeType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> reservationBlockTimeTypeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'reservationBlockTimeType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> reservationBlockTimeTypeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'reservationBlockTimeType',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> reservationBlockTimeTypeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'reservationBlockTimeType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> reservationBlockTimeTypeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'reservationBlockTimeType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
          RSDataMenuItemCatalogPricesModel, QAfterFilterCondition>
      reservationBlockTimeTypeContains(String value,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'reservationBlockTimeType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
          RSDataMenuItemCatalogPricesModel, QAfterFilterCondition>
      reservationBlockTimeTypeMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'reservationBlockTimeType',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> reservationBlockTimeTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'reservationBlockTimeType',
        value: '',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> reservationBlockTimeTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'reservationBlockTimeType',
        value: '',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> reservationBlockTimeValueIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'reservationBlockTimeValue',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> reservationBlockTimeValueIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'reservationBlockTimeValue',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> reservationBlockTimeValueEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'reservationBlockTimeValue',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> reservationBlockTimeValueGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'reservationBlockTimeValue',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> reservationBlockTimeValueLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'reservationBlockTimeValue',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> reservationBlockTimeValueBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'reservationBlockTimeValue',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel, QAfterFilterCondition> sizeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'size',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel, QAfterFilterCondition> sizeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'size',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> sizeLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'size',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel, QAfterFilterCondition> sizeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'size',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> sizeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'size',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> sizeLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'size',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> sizeLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'size',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> sizeLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'size',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> updatedAtIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'updatedAt',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> updatedAtIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'updatedAt',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> updatedAtEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> updatedAtGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> updatedAtLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel, QAfterFilterCondition> updatedAtBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'updatedAt',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> updatedByIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'updatedBy',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> updatedByIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'updatedBy',
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> updatedByEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'updatedBy',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> updatedByGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'updatedBy',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel,
      QAfterFilterCondition> updatedByLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'updatedBy',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
      RSDataMenuItemCatalogPricesModel, QAfterFilterCondition> updatedByBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'updatedBy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }
}

extension RSDataMenuItemCatalogPricesModelQueryObject on QueryBuilder<
    RSDataMenuItemCatalogPricesModel,
    RSDataMenuItemCatalogPricesModel,
    QFilterCondition> {
  QueryBuilder<RSDataMenuItemCatalogPricesModel,
          RSDataMenuItemCatalogPricesModel, QAfterFilterCondition>
      offerTitleElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'offerTitle');
    });
  }

  QueryBuilder<RSDataMenuItemCatalogPricesModel,
          RSDataMenuItemCatalogPricesModel, QAfterFilterCondition>
      sizeElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'size');
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters

const RSDataTagsModelSchema = Schema(
  name: r'RSDataTagsModel',
  id: 380625014494029203,
  properties: {
    r'colorCode': PropertySchema(
      id: 0,
      name: r'colorCode',
      type: IsarType.string,
    ),
    r'comment': PropertySchema(
      id: 1,
      name: r'comment',
      type: IsarType.string,
    ),
    r'createdAt': PropertySchema(
      id: 2,
      name: r'createdAt',
      type: IsarType.dateTime,
    ),
    r'createdBy': PropertySchema(
      id: 3,
      name: r'createdBy',
      type: IsarType.long,
    ),
    r'hotelId': PropertySchema(
      id: 4,
      name: r'hotelId',
      type: IsarType.long,
    ),
    r'id': PropertySchema(
      id: 5,
      name: r'id',
      type: IsarType.long,
    ),
    r'menuItemId': PropertySchema(
      id: 6,
      name: r'menuItemId',
      type: IsarType.long,
    ),
    r'menuSectionId': PropertySchema(
      id: 7,
      name: r'menuSectionId',
      type: IsarType.long,
    ),
    r'menuTagCategoryId': PropertySchema(
      id: 8,
      name: r'menuTagCategoryId',
      type: IsarType.long,
    ),
    r'menuTagCategoryName': PropertySchema(
      id: 9,
      name: r'menuTagCategoryName',
      type: IsarType.string,
    ),
    r'menuTagTemplateId': PropertySchema(
      id: 10,
      name: r'menuTagTemplateId',
      type: IsarType.long,
    ),
    r'name': PropertySchema(
      id: 11,
      name: r'name',
      type: IsarType.string,
    ),
    r'tableName': PropertySchema(
      id: 12,
      name: r'tableName',
      type: IsarType.string,
    ),
    r'tableRecordId': PropertySchema(
      id: 13,
      name: r'tableRecordId',
      type: IsarType.long,
    ),
    r'type': PropertySchema(
      id: 14,
      name: r'type',
      type: IsarType.string,
    ),
    r'updatedAt': PropertySchema(
      id: 15,
      name: r'updatedAt',
      type: IsarType.dateTime,
    ),
    r'updatedBy': PropertySchema(
      id: 16,
      name: r'updatedBy',
      type: IsarType.long,
    )
  },
  estimateSize: _rSDataTagsModelEstimateSize,
  serialize: _rSDataTagsModelSerialize,
  deserialize: _rSDataTagsModelDeserialize,
  deserializeProp: _rSDataTagsModelDeserializeProp,
);

int _rSDataTagsModelEstimateSize(
  RSDataTagsModel object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final value = object.colorCode;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.comment;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.menuTagCategoryName;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.name;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.tableName;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.type;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  return bytesCount;
}

void _rSDataTagsModelSerialize(
  RSDataTagsModel object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeString(offsets[0], object.colorCode);
  writer.writeString(offsets[1], object.comment);
  writer.writeDateTime(offsets[2], object.createdAt);
  writer.writeLong(offsets[3], object.createdBy);
  writer.writeLong(offsets[4], object.hotelId);
  writer.writeLong(offsets[5], object.id);
  writer.writeLong(offsets[6], object.menuItemId);
  writer.writeLong(offsets[7], object.menuSectionId);
  writer.writeLong(offsets[8], object.menuTagCategoryId);
  writer.writeString(offsets[9], object.menuTagCategoryName);
  writer.writeLong(offsets[10], object.menuTagTemplateId);
  writer.writeString(offsets[11], object.name);
  writer.writeString(offsets[12], object.tableName);
  writer.writeLong(offsets[13], object.tableRecordId);
  writer.writeString(offsets[14], object.type);
  writer.writeDateTime(offsets[15], object.updatedAt);
  writer.writeLong(offsets[16], object.updatedBy);
}

RSDataTagsModel _rSDataTagsModelDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = RSDataTagsModel(
    colorCode: reader.readStringOrNull(offsets[0]),
    comment: reader.readStringOrNull(offsets[1]),
    createdAt: reader.readDateTimeOrNull(offsets[2]),
    createdBy: reader.readLongOrNull(offsets[3]),
    hotelId: reader.readLongOrNull(offsets[4]),
    id: reader.readLongOrNull(offsets[5]),
    menuItemId: reader.readLongOrNull(offsets[6]),
    menuSectionId: reader.readLongOrNull(offsets[7]),
    menuTagCategoryId: reader.readLongOrNull(offsets[8]),
    menuTagCategoryName: reader.readStringOrNull(offsets[9]),
    menuTagTemplateId: reader.readLongOrNull(offsets[10]),
    name: reader.readStringOrNull(offsets[11]),
    tableName: reader.readStringOrNull(offsets[12]),
    tableRecordId: reader.readLongOrNull(offsets[13]),
    type: reader.readStringOrNull(offsets[14]),
    updatedAt: reader.readDateTimeOrNull(offsets[15]),
    updatedBy: reader.readLongOrNull(offsets[16]),
  );
  return object;
}

P _rSDataTagsModelDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readStringOrNull(offset)) as P;
    case 1:
      return (reader.readStringOrNull(offset)) as P;
    case 2:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 3:
      return (reader.readLongOrNull(offset)) as P;
    case 4:
      return (reader.readLongOrNull(offset)) as P;
    case 5:
      return (reader.readLongOrNull(offset)) as P;
    case 6:
      return (reader.readLongOrNull(offset)) as P;
    case 7:
      return (reader.readLongOrNull(offset)) as P;
    case 8:
      return (reader.readLongOrNull(offset)) as P;
    case 9:
      return (reader.readStringOrNull(offset)) as P;
    case 10:
      return (reader.readLongOrNull(offset)) as P;
    case 11:
      return (reader.readStringOrNull(offset)) as P;
    case 12:
      return (reader.readStringOrNull(offset)) as P;
    case 13:
      return (reader.readLongOrNull(offset)) as P;
    case 14:
      return (reader.readStringOrNull(offset)) as P;
    case 15:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 16:
      return (reader.readLongOrNull(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension RSDataTagsModelQueryFilter
    on QueryBuilder<RSDataTagsModel, RSDataTagsModel, QFilterCondition> {
  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      colorCodeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'colorCode',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      colorCodeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'colorCode',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      colorCodeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'colorCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      colorCodeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'colorCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      colorCodeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'colorCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      colorCodeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'colorCode',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      colorCodeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'colorCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      colorCodeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'colorCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      colorCodeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'colorCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      colorCodeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'colorCode',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      colorCodeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'colorCode',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      colorCodeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'colorCode',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      commentIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'comment',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      commentIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'comment',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      commentEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'comment',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      commentGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'comment',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      commentLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'comment',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      commentBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'comment',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      commentStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'comment',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      commentEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'comment',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      commentContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'comment',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      commentMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'comment',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      commentIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'comment',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      commentIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'comment',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      createdAtIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'createdAt',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      createdAtIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'createdAt',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      createdAtEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      createdAtGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      createdAtLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      createdAtBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'createdAt',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      createdByIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'createdBy',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      createdByIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'createdBy',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      createdByEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'createdBy',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      createdByGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'createdBy',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      createdByLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'createdBy',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      createdByBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'createdBy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      hotelIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelId',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      hotelIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelId',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      hotelIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      hotelIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      hotelIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      hotelIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      idIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      idIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      idEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      idGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      idLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      idBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'id',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuItemIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuItemIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuItemIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuItemIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuItemIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuItemIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuItemId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuSectionIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuSectionId',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuSectionIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuSectionId',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuSectionIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuSectionId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuSectionIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuSectionId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuSectionIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuSectionId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuSectionIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuSectionId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagCategoryIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuTagCategoryId',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagCategoryIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuTagCategoryId',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagCategoryIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuTagCategoryId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagCategoryIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuTagCategoryId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagCategoryIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuTagCategoryId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagCategoryIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuTagCategoryId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagCategoryNameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuTagCategoryName',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagCategoryNameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuTagCategoryName',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagCategoryNameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuTagCategoryName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagCategoryNameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuTagCategoryName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagCategoryNameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuTagCategoryName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagCategoryNameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuTagCategoryName',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagCategoryNameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'menuTagCategoryName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagCategoryNameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'menuTagCategoryName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagCategoryNameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'menuTagCategoryName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagCategoryNameMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'menuTagCategoryName',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagCategoryNameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuTagCategoryName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagCategoryNameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'menuTagCategoryName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagTemplateIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuTagTemplateId',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagTemplateIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuTagTemplateId',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagTemplateIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuTagTemplateId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagTemplateIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuTagTemplateId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagTemplateIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuTagTemplateId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      menuTagTemplateIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuTagTemplateId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      nameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      nameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      nameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      nameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      nameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      nameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'name',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      nameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      nameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      nameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      nameMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'name',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      nameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'name',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      nameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'name',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      tableNameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'tableName',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      tableNameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'tableName',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      tableNameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'tableName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      tableNameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'tableName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      tableNameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'tableName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      tableNameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'tableName',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      tableNameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'tableName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      tableNameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'tableName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      tableNameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'tableName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      tableNameMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'tableName',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      tableNameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'tableName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      tableNameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'tableName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      tableRecordIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'tableRecordId',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      tableRecordIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'tableRecordId',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      tableRecordIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'tableRecordId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      tableRecordIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'tableRecordId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      tableRecordIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'tableRecordId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      tableRecordIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'tableRecordId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      typeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'type',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      typeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'type',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      typeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      typeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      typeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      typeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'type',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      typeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      typeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      typeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      typeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'type',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      typeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'type',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      typeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'type',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      updatedAtIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'updatedAt',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      updatedAtIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'updatedAt',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      updatedAtEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      updatedAtGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      updatedAtLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      updatedAtBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'updatedAt',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      updatedByIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'updatedBy',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      updatedByIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'updatedBy',
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      updatedByEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'updatedBy',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      updatedByGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'updatedBy',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      updatedByLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'updatedBy',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataTagsModel, RSDataTagsModel, QAfterFilterCondition>
      updatedByBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'updatedBy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }
}

extension RSDataTagsModelQueryObject
    on QueryBuilder<RSDataTagsModel, RSDataTagsModel, QFilterCondition> {}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters

const RSDataMenuItemBooksModelSchema = Schema(
  name: r'RSDataMenuItemBooksModel',
  id: -7817774947382176581,
  properties: {
    r'bookableInAdvanceDays': PropertySchema(
      id: 0,
      name: r'bookableInAdvanceDays',
      type: IsarType.long,
    ),
    r'callToActionText': PropertySchema(
      id: 1,
      name: r'callToActionText',
      type: IsarType.string,
    ),
    r'commentsText': PropertySchema(
      id: 2,
      name: r'commentsText',
      type: IsarType.string,
    ),
    r'friday': PropertySchema(
      id: 3,
      name: r'friday',
      type: IsarType.bool,
    ),
    r'id': PropertySchema(
      id: 4,
      name: r'id',
      type: IsarType.long,
    ),
    r'isNoReservationAfterThisTime': PropertySchema(
      id: 5,
      name: r'isNoReservationAfterThisTime',
      type: IsarType.bool,
    ),
    r'menuItemId': PropertySchema(
      id: 6,
      name: r'menuItemId',
      type: IsarType.long,
    ),
    r'minimumTimeInAdvanceMinute': PropertySchema(
      id: 7,
      name: r'minimumTimeInAdvanceMinute',
      type: IsarType.long,
    ),
    r'minimumTimeInAdvanceType': PropertySchema(
      id: 8,
      name: r'minimumTimeInAdvanceType',
      type: IsarType.string,
    ),
    r'minimumTimeInAdvanceValue': PropertySchema(
      id: 9,
      name: r'minimumTimeInAdvanceValue',
      type: IsarType.long,
    ),
    r'monday': PropertySchema(
      id: 10,
      name: r'monday',
      type: IsarType.bool,
    ),
    r'noReservationAfterThisTime': PropertySchema(
      id: 11,
      name: r'noReservationAfterThisTime',
      type: IsarType.dateTime,
    ),
    r'reservationCustomUnitName': PropertySchema(
      id: 12,
      name: r'reservationCustomUnitName',
      type: IsarType.string,
    ),
    r'reservationUnitCustom': PropertySchema(
      id: 13,
      name: r'reservationUnitCustom',
      type: IsarType.bool,
    ),
    r'responceForConfirmedService': PropertySchema(
      id: 14,
      name: r'responceForConfirmedService',
      type: IsarType.string,
    ),
    r'responseForPendingService': PropertySchema(
      id: 15,
      name: r'responseForPendingService',
      type: IsarType.string,
    ),
    r'saturday': PropertySchema(
      id: 16,
      name: r'saturday',
      type: IsarType.bool,
    ),
    r'showAdvancedOptions': PropertySchema(
      id: 17,
      name: r'showAdvancedOptions',
      type: IsarType.bool,
    ),
    r'sunday': PropertySchema(
      id: 18,
      name: r'sunday',
      type: IsarType.bool,
    ),
    r'thursday': PropertySchema(
      id: 19,
      name: r'thursday',
      type: IsarType.bool,
    ),
    r'tuesday': PropertySchema(
      id: 20,
      name: r'tuesday',
      type: IsarType.bool,
    ),
    r'wednesday': PropertySchema(
      id: 21,
      name: r'wednesday',
      type: IsarType.bool,
    )
  },
  estimateSize: _rSDataMenuItemBooksModelEstimateSize,
  serialize: _rSDataMenuItemBooksModelSerialize,
  deserialize: _rSDataMenuItemBooksModelDeserialize,
  deserializeProp: _rSDataMenuItemBooksModelDeserializeProp,
);

int _rSDataMenuItemBooksModelEstimateSize(
  RSDataMenuItemBooksModel object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final value = object.callToActionText;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.commentsText;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.minimumTimeInAdvanceType;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.reservationCustomUnitName;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.responceForConfirmedService;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.responseForPendingService;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  return bytesCount;
}

void _rSDataMenuItemBooksModelSerialize(
  RSDataMenuItemBooksModel object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeLong(offsets[0], object.bookableInAdvanceDays);
  writer.writeString(offsets[1], object.callToActionText);
  writer.writeString(offsets[2], object.commentsText);
  writer.writeBool(offsets[3], object.friday);
  writer.writeLong(offsets[4], object.id);
  writer.writeBool(offsets[5], object.isNoReservationAfterThisTime);
  writer.writeLong(offsets[6], object.menuItemId);
  writer.writeLong(offsets[7], object.minimumTimeInAdvanceMinute);
  writer.writeString(offsets[8], object.minimumTimeInAdvanceType);
  writer.writeLong(offsets[9], object.minimumTimeInAdvanceValue);
  writer.writeBool(offsets[10], object.monday);
  writer.writeDateTime(offsets[11], object.noReservationAfterThisTime);
  writer.writeString(offsets[12], object.reservationCustomUnitName);
  writer.writeBool(offsets[13], object.reservationUnitCustom);
  writer.writeString(offsets[14], object.responceForConfirmedService);
  writer.writeString(offsets[15], object.responseForPendingService);
  writer.writeBool(offsets[16], object.saturday);
  writer.writeBool(offsets[17], object.showAdvancedOptions);
  writer.writeBool(offsets[18], object.sunday);
  writer.writeBool(offsets[19], object.thursday);
  writer.writeBool(offsets[20], object.tuesday);
  writer.writeBool(offsets[21], object.wednesday);
}

RSDataMenuItemBooksModel _rSDataMenuItemBooksModelDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = RSDataMenuItemBooksModel(
    bookableInAdvanceDays: reader.readLongOrNull(offsets[0]),
    callToActionText: reader.readStringOrNull(offsets[1]),
    commentsText: reader.readStringOrNull(offsets[2]),
    friday: reader.readBoolOrNull(offsets[3]),
    id: reader.readLongOrNull(offsets[4]),
    isNoReservationAfterThisTime: reader.readBoolOrNull(offsets[5]),
    menuItemId: reader.readLongOrNull(offsets[6]),
    minimumTimeInAdvanceMinute: reader.readLongOrNull(offsets[7]),
    minimumTimeInAdvanceType: reader.readStringOrNull(offsets[8]),
    minimumTimeInAdvanceValue: reader.readLongOrNull(offsets[9]),
    monday: reader.readBoolOrNull(offsets[10]),
    noReservationAfterThisTime: reader.readDateTimeOrNull(offsets[11]),
    reservationCustomUnitName: reader.readStringOrNull(offsets[12]),
    reservationUnitCustom: reader.readBoolOrNull(offsets[13]),
    responceForConfirmedService: reader.readStringOrNull(offsets[14]),
    responseForPendingService: reader.readStringOrNull(offsets[15]),
    saturday: reader.readBoolOrNull(offsets[16]),
    showAdvancedOptions: reader.readBoolOrNull(offsets[17]),
    sunday: reader.readBoolOrNull(offsets[18]),
    thursday: reader.readBoolOrNull(offsets[19]),
    tuesday: reader.readBoolOrNull(offsets[20]),
    wednesday: reader.readBoolOrNull(offsets[21]),
  );
  return object;
}

P _rSDataMenuItemBooksModelDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readLongOrNull(offset)) as P;
    case 1:
      return (reader.readStringOrNull(offset)) as P;
    case 2:
      return (reader.readStringOrNull(offset)) as P;
    case 3:
      return (reader.readBoolOrNull(offset)) as P;
    case 4:
      return (reader.readLongOrNull(offset)) as P;
    case 5:
      return (reader.readBoolOrNull(offset)) as P;
    case 6:
      return (reader.readLongOrNull(offset)) as P;
    case 7:
      return (reader.readLongOrNull(offset)) as P;
    case 8:
      return (reader.readStringOrNull(offset)) as P;
    case 9:
      return (reader.readLongOrNull(offset)) as P;
    case 10:
      return (reader.readBoolOrNull(offset)) as P;
    case 11:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 12:
      return (reader.readStringOrNull(offset)) as P;
    case 13:
      return (reader.readBoolOrNull(offset)) as P;
    case 14:
      return (reader.readStringOrNull(offset)) as P;
    case 15:
      return (reader.readStringOrNull(offset)) as P;
    case 16:
      return (reader.readBoolOrNull(offset)) as P;
    case 17:
      return (reader.readBoolOrNull(offset)) as P;
    case 18:
      return (reader.readBoolOrNull(offset)) as P;
    case 19:
      return (reader.readBoolOrNull(offset)) as P;
    case 20:
      return (reader.readBoolOrNull(offset)) as P;
    case 21:
      return (reader.readBoolOrNull(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension RSDataMenuItemBooksModelQueryFilter on QueryBuilder<
    RSDataMenuItemBooksModel, RSDataMenuItemBooksModel, QFilterCondition> {
  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> bookableInAdvanceDaysIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'bookableInAdvanceDays',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> bookableInAdvanceDaysIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'bookableInAdvanceDays',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> bookableInAdvanceDaysEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'bookableInAdvanceDays',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> bookableInAdvanceDaysGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'bookableInAdvanceDays',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> bookableInAdvanceDaysLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'bookableInAdvanceDays',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> bookableInAdvanceDaysBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'bookableInAdvanceDays',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> callToActionTextIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'callToActionText',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> callToActionTextIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'callToActionText',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> callToActionTextEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'callToActionText',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> callToActionTextGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'callToActionText',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> callToActionTextLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'callToActionText',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> callToActionTextBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'callToActionText',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> callToActionTextStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'callToActionText',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> callToActionTextEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'callToActionText',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
          QAfterFilterCondition>
      callToActionTextContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'callToActionText',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
          QAfterFilterCondition>
      callToActionTextMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'callToActionText',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> callToActionTextIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'callToActionText',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> callToActionTextIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'callToActionText',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> commentsTextIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'commentsText',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> commentsTextIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'commentsText',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> commentsTextEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'commentsText',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> commentsTextGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'commentsText',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> commentsTextLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'commentsText',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> commentsTextBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'commentsText',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> commentsTextStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'commentsText',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> commentsTextEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'commentsText',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
          QAfterFilterCondition>
      commentsTextContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'commentsText',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
          QAfterFilterCondition>
      commentsTextMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'commentsText',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> commentsTextIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'commentsText',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> commentsTextIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'commentsText',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> fridayIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'friday',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> fridayIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'friday',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> fridayEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'friday',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> idIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> idIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> idEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> idGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> idLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> idBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'id',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> isNoReservationAfterThisTimeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'isNoReservationAfterThisTime',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> isNoReservationAfterThisTimeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'isNoReservationAfterThisTime',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> isNoReservationAfterThisTimeEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isNoReservationAfterThisTime',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> menuItemIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> menuItemIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> menuItemIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> menuItemIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> menuItemIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> menuItemIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuItemId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceMinuteIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'minimumTimeInAdvanceMinute',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceMinuteIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'minimumTimeInAdvanceMinute',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceMinuteEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'minimumTimeInAdvanceMinute',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceMinuteGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'minimumTimeInAdvanceMinute',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceMinuteLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'minimumTimeInAdvanceMinute',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceMinuteBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'minimumTimeInAdvanceMinute',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceTypeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'minimumTimeInAdvanceType',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceTypeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'minimumTimeInAdvanceType',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceTypeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'minimumTimeInAdvanceType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceTypeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'minimumTimeInAdvanceType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceTypeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'minimumTimeInAdvanceType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceTypeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'minimumTimeInAdvanceType',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceTypeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'minimumTimeInAdvanceType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceTypeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'minimumTimeInAdvanceType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
          QAfterFilterCondition>
      minimumTimeInAdvanceTypeContains(String value,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'minimumTimeInAdvanceType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
          QAfterFilterCondition>
      minimumTimeInAdvanceTypeMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'minimumTimeInAdvanceType',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'minimumTimeInAdvanceType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'minimumTimeInAdvanceType',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceValueIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'minimumTimeInAdvanceValue',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceValueIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'minimumTimeInAdvanceValue',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceValueEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'minimumTimeInAdvanceValue',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceValueGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'minimumTimeInAdvanceValue',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceValueLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'minimumTimeInAdvanceValue',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> minimumTimeInAdvanceValueBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'minimumTimeInAdvanceValue',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> mondayIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'monday',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> mondayIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'monday',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> mondayEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'monday',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> noReservationAfterThisTimeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'noReservationAfterThisTime',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> noReservationAfterThisTimeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'noReservationAfterThisTime',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
          QAfterFilterCondition>
      noReservationAfterThisTimeEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'noReservationAfterThisTime',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> noReservationAfterThisTimeGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'noReservationAfterThisTime',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> noReservationAfterThisTimeLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'noReservationAfterThisTime',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> noReservationAfterThisTimeBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'noReservationAfterThisTime',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> reservationCustomUnitNameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'reservationCustomUnitName',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> reservationCustomUnitNameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'reservationCustomUnitName',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> reservationCustomUnitNameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'reservationCustomUnitName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> reservationCustomUnitNameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'reservationCustomUnitName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> reservationCustomUnitNameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'reservationCustomUnitName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> reservationCustomUnitNameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'reservationCustomUnitName',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> reservationCustomUnitNameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'reservationCustomUnitName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> reservationCustomUnitNameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'reservationCustomUnitName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
          QAfterFilterCondition>
      reservationCustomUnitNameContains(String value,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'reservationCustomUnitName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
          QAfterFilterCondition>
      reservationCustomUnitNameMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'reservationCustomUnitName',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> reservationCustomUnitNameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'reservationCustomUnitName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> reservationCustomUnitNameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'reservationCustomUnitName',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> reservationUnitCustomIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'reservationUnitCustom',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> reservationUnitCustomIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'reservationUnitCustom',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> reservationUnitCustomEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'reservationUnitCustom',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responceForConfirmedServiceIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'responceForConfirmedService',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responceForConfirmedServiceIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'responceForConfirmedService',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responceForConfirmedServiceEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'responceForConfirmedService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responceForConfirmedServiceGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'responceForConfirmedService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responceForConfirmedServiceLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'responceForConfirmedService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responceForConfirmedServiceBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'responceForConfirmedService',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responceForConfirmedServiceStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'responceForConfirmedService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responceForConfirmedServiceEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'responceForConfirmedService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
          QAfterFilterCondition>
      responceForConfirmedServiceContains(String value,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'responceForConfirmedService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
          QAfterFilterCondition>
      responceForConfirmedServiceMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'responceForConfirmedService',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responceForConfirmedServiceIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'responceForConfirmedService',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responceForConfirmedServiceIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'responceForConfirmedService',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responseForPendingServiceIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'responseForPendingService',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responseForPendingServiceIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'responseForPendingService',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responseForPendingServiceEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'responseForPendingService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responseForPendingServiceGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'responseForPendingService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responseForPendingServiceLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'responseForPendingService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responseForPendingServiceBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'responseForPendingService',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responseForPendingServiceStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'responseForPendingService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responseForPendingServiceEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'responseForPendingService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
          QAfterFilterCondition>
      responseForPendingServiceContains(String value,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'responseForPendingService',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
          QAfterFilterCondition>
      responseForPendingServiceMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'responseForPendingService',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responseForPendingServiceIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'responseForPendingService',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> responseForPendingServiceIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'responseForPendingService',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> saturdayIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'saturday',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> saturdayIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'saturday',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> saturdayEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'saturday',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> showAdvancedOptionsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showAdvancedOptions',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> showAdvancedOptionsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showAdvancedOptions',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> showAdvancedOptionsEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showAdvancedOptions',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> sundayIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'sunday',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> sundayIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'sunday',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> sundayEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'sunday',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> thursdayIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'thursday',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> thursdayIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'thursday',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> thursdayEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'thursday',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> tuesdayIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'tuesday',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> tuesdayIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'tuesday',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> tuesdayEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'tuesday',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> wednesdayIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'wednesday',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> wednesdayIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'wednesday',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBooksModel, RSDataMenuItemBooksModel,
      QAfterFilterCondition> wednesdayEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'wednesday',
        value: value,
      ));
    });
  }
}

extension RSDataMenuItemBooksModelQueryObject on QueryBuilder<
    RSDataMenuItemBooksModel, RSDataMenuItemBooksModel, QFilterCondition> {}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters

const RSDataMenuItemBookDetailsModelSchema = Schema(
  name: r'RSDataMenuItemBookDetailsModel',
  id: 59589649486578917,
  properties: {
    r'acceptOnlyInternalReservation': PropertySchema(
      id: 0,
      name: r'acceptOnlyInternalReservation',
      type: IsarType.bool,
    ),
    r'activateOffer': PropertySchema(
      id: 1,
      name: r'activateOffer',
      type: IsarType.bool,
    ),
    r'babyPrice': PropertySchema(
      id: 2,
      name: r'babyPrice',
      type: IsarType.double,
    ),
    r'bookDetailResGroup': PropertySchema(
      id: 3,
      name: r'bookDetailResGroup',
      type: IsarType.objectList,
      target: r'RSDataBookDetailReservationGroupModel',
    ),
    r'bookable': PropertySchema(
      id: 4,
      name: r'bookable',
      type: IsarType.bool,
    ),
    r'childPrice': PropertySchema(
      id: 5,
      name: r'childPrice',
      type: IsarType.double,
    ),
    r'currencyCode': PropertySchema(
      id: 6,
      name: r'currencyCode',
      type: IsarType.string,
    ),
    r'endTime': PropertySchema(
      id: 7,
      name: r'endTime',
      type: IsarType.dateTime,
    ),
    r'id': PropertySchema(
      id: 8,
      name: r'id',
      type: IsarType.long,
    ),
    r'interval': PropertySchema(
      id: 9,
      name: r'interval',
      type: IsarType.long,
    ),
    r'isChildAccept': PropertySchema(
      id: 10,
      name: r'isChildAccept',
      type: IsarType.bool,
    ),
    r'limit': PropertySchema(
      id: 11,
      name: r'limit',
      type: IsarType.long,
    ),
    r'maximumNumberOfPeoplePerReservation': PropertySchema(
      id: 12,
      name: r'maximumNumberOfPeoplePerReservation',
      type: IsarType.long,
    ),
    r'menuItemBookId': PropertySchema(
      id: 13,
      name: r'menuItemBookId',
      type: IsarType.long,
    ),
    r'menuItemId': PropertySchema(
      id: 14,
      name: r'menuItemId',
      type: IsarType.long,
    ),
    r'name': PropertySchema(
      id: 15,
      name: r'name',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'offerPrice': PropertySchema(
      id: 16,
      name: r'offerPrice',
      type: IsarType.double,
    ),
    r'offerTitle': PropertySchema(
      id: 17,
      name: r'offerTitle',
      type: IsarType.string,
    ),
    r'price': PropertySchema(
      id: 18,
      name: r'price',
      type: IsarType.double,
    ),
    r'startTime': PropertySchema(
      id: 19,
      name: r'startTime',
      type: IsarType.dateTime,
    ),
    r'viewCount': PropertySchema(
      id: 20,
      name: r'viewCount',
      type: IsarType.long,
    )
  },
  estimateSize: _rSDataMenuItemBookDetailsModelEstimateSize,
  serialize: _rSDataMenuItemBookDetailsModelSerialize,
  deserialize: _rSDataMenuItemBookDetailsModelDeserialize,
  deserializeProp: _rSDataMenuItemBookDetailsModelDeserializeProp,
);

int _rSDataMenuItemBookDetailsModelEstimateSize(
  RSDataMenuItemBookDetailsModel object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final list = object.bookDetailResGroup;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataBookDetailReservationGroupModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount +=
              RSDataBookDetailReservationGroupModelSchema.estimateSize(
                  value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.currencyCode;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final list = object.name;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final value = object.offerTitle;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  return bytesCount;
}

void _rSDataMenuItemBookDetailsModelSerialize(
  RSDataMenuItemBookDetailsModel object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeBool(offsets[0], object.acceptOnlyInternalReservation);
  writer.writeBool(offsets[1], object.activateOffer);
  writer.writeDouble(offsets[2], object.babyPrice);
  writer.writeObjectList<RSDataBookDetailReservationGroupModel>(
    offsets[3],
    allOffsets,
    RSDataBookDetailReservationGroupModelSchema.serialize,
    object.bookDetailResGroup,
  );
  writer.writeBool(offsets[4], object.bookable);
  writer.writeDouble(offsets[5], object.childPrice);
  writer.writeString(offsets[6], object.currencyCode);
  writer.writeDateTime(offsets[7], object.endTime);
  writer.writeLong(offsets[8], object.id);
  writer.writeLong(offsets[9], object.interval);
  writer.writeBool(offsets[10], object.isChildAccept);
  writer.writeLong(offsets[11], object.limit);
  writer.writeLong(offsets[12], object.maximumNumberOfPeoplePerReservation);
  writer.writeLong(offsets[13], object.menuItemBookId);
  writer.writeLong(offsets[14], object.menuItemId);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[15],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.name,
  );
  writer.writeDouble(offsets[16], object.offerPrice);
  writer.writeString(offsets[17], object.offerTitle);
  writer.writeDouble(offsets[18], object.price);
  writer.writeDateTime(offsets[19], object.startTime);
  writer.writeLong(offsets[20], object.viewCount);
}

RSDataMenuItemBookDetailsModel _rSDataMenuItemBookDetailsModelDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = RSDataMenuItemBookDetailsModel(
    acceptOnlyInternalReservation: reader.readBoolOrNull(offsets[0]),
    activateOffer: reader.readBoolOrNull(offsets[1]),
    babyPrice: reader.readDoubleOrNull(offsets[2]),
    bookDetailResGroup:
        reader.readObjectList<RSDataBookDetailReservationGroupModel>(
      offsets[3],
      RSDataBookDetailReservationGroupModelSchema.deserialize,
      allOffsets,
      RSDataBookDetailReservationGroupModel(),
    ),
    bookable: reader.readBoolOrNull(offsets[4]),
    childPrice: reader.readDoubleOrNull(offsets[5]),
    currencyCode: reader.readStringOrNull(offsets[6]),
    endTime: reader.readDateTimeOrNull(offsets[7]),
    id: reader.readLongOrNull(offsets[8]),
    interval: reader.readLongOrNull(offsets[9]),
    isChildAccept: reader.readBoolOrNull(offsets[10]),
    limit: reader.readLongOrNull(offsets[11]),
    maximumNumberOfPeoplePerReservation: reader.readLongOrNull(offsets[12]),
    menuItemBookId: reader.readLongOrNull(offsets[13]),
    menuItemId: reader.readLongOrNull(offsets[14]),
    name: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[15],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    offerPrice: reader.readDoubleOrNull(offsets[16]),
    offerTitle: reader.readStringOrNull(offsets[17]),
    price: reader.readDoubleOrNull(offsets[18]),
    startTime: reader.readDateTimeOrNull(offsets[19]),
    viewCount: reader.readLongOrNull(offsets[20]),
  );
  return object;
}

P _rSDataMenuItemBookDetailsModelDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readBoolOrNull(offset)) as P;
    case 1:
      return (reader.readBoolOrNull(offset)) as P;
    case 2:
      return (reader.readDoubleOrNull(offset)) as P;
    case 3:
      return (reader.readObjectList<RSDataBookDetailReservationGroupModel>(
        offset,
        RSDataBookDetailReservationGroupModelSchema.deserialize,
        allOffsets,
        RSDataBookDetailReservationGroupModel(),
      )) as P;
    case 4:
      return (reader.readBoolOrNull(offset)) as P;
    case 5:
      return (reader.readDoubleOrNull(offset)) as P;
    case 6:
      return (reader.readStringOrNull(offset)) as P;
    case 7:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 8:
      return (reader.readLongOrNull(offset)) as P;
    case 9:
      return (reader.readLongOrNull(offset)) as P;
    case 10:
      return (reader.readBoolOrNull(offset)) as P;
    case 11:
      return (reader.readLongOrNull(offset)) as P;
    case 12:
      return (reader.readLongOrNull(offset)) as P;
    case 13:
      return (reader.readLongOrNull(offset)) as P;
    case 14:
      return (reader.readLongOrNull(offset)) as P;
    case 15:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 16:
      return (reader.readDoubleOrNull(offset)) as P;
    case 17:
      return (reader.readStringOrNull(offset)) as P;
    case 18:
      return (reader.readDoubleOrNull(offset)) as P;
    case 19:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 20:
      return (reader.readLongOrNull(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension RSDataMenuItemBookDetailsModelQueryFilter on QueryBuilder<
    RSDataMenuItemBookDetailsModel,
    RSDataMenuItemBookDetailsModel,
    QFilterCondition> {
  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> acceptOnlyInternalReservationIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'acceptOnlyInternalReservation',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> acceptOnlyInternalReservationIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'acceptOnlyInternalReservation',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> acceptOnlyInternalReservationEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'acceptOnlyInternalReservation',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> activateOfferIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'activateOffer',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> activateOfferIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'activateOffer',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> activateOfferEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'activateOffer',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> babyPriceIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'babyPrice',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> babyPriceIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'babyPrice',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> babyPriceEqualTo(
    double? value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'babyPrice',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> babyPriceGreaterThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'babyPrice',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> babyPriceLessThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'babyPrice',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> babyPriceBetween(
    double? lower,
    double? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'babyPrice',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> bookDetailResGroupIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'bookDetailResGroup',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> bookDetailResGroupIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'bookDetailResGroup',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> bookDetailResGroupLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'bookDetailResGroup',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> bookDetailResGroupIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'bookDetailResGroup',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> bookDetailResGroupIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'bookDetailResGroup',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> bookDetailResGroupLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'bookDetailResGroup',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> bookDetailResGroupLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'bookDetailResGroup',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> bookDetailResGroupLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'bookDetailResGroup',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> bookableIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'bookable',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> bookableIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'bookable',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> bookableEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'bookable',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> childPriceIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'childPrice',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> childPriceIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'childPrice',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> childPriceEqualTo(
    double? value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'childPrice',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> childPriceGreaterThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'childPrice',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> childPriceLessThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'childPrice',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> childPriceBetween(
    double? lower,
    double? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'childPrice',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> currencyCodeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'currencyCode',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> currencyCodeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'currencyCode',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> currencyCodeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'currencyCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> currencyCodeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'currencyCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> currencyCodeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'currencyCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> currencyCodeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'currencyCode',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> currencyCodeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'currencyCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> currencyCodeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'currencyCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
          QAfterFilterCondition>
      currencyCodeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'currencyCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
          QAfterFilterCondition>
      currencyCodeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'currencyCode',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> currencyCodeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'currencyCode',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> currencyCodeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'currencyCode',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> endTimeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'endTime',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> endTimeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'endTime',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> endTimeEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'endTime',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> endTimeGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'endTime',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> endTimeLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'endTime',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> endTimeBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'endTime',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> idIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> idIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> idEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> idGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> idLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> idBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'id',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> intervalIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'interval',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> intervalIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'interval',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> intervalEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'interval',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> intervalGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'interval',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> intervalLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'interval',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> intervalBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'interval',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> isChildAcceptIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'isChildAccept',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> isChildAcceptIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'isChildAccept',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> isChildAcceptEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isChildAccept',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> limitIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'limit',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> limitIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'limit',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> limitEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'limit',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> limitGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'limit',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> limitLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'limit',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> limitBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'limit',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> maximumNumberOfPeoplePerReservationIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'maximumNumberOfPeoplePerReservation',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> maximumNumberOfPeoplePerReservationIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'maximumNumberOfPeoplePerReservation',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
          QAfterFilterCondition>
      maximumNumberOfPeoplePerReservationEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'maximumNumberOfPeoplePerReservation',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> maximumNumberOfPeoplePerReservationGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'maximumNumberOfPeoplePerReservation',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> maximumNumberOfPeoplePerReservationLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'maximumNumberOfPeoplePerReservation',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> maximumNumberOfPeoplePerReservationBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'maximumNumberOfPeoplePerReservation',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> menuItemBookIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemBookId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> menuItemBookIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemBookId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> menuItemBookIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuItemBookId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> menuItemBookIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuItemBookId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> menuItemBookIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuItemBookId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> menuItemBookIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuItemBookId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> menuItemIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> menuItemIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> menuItemIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> menuItemIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> menuItemIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> menuItemIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuItemId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> nameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> nameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> nameLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> nameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> nameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> nameLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> nameLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> nameLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> offerPriceIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'offerPrice',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> offerPriceIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'offerPrice',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> offerPriceEqualTo(
    double? value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'offerPrice',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> offerPriceGreaterThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'offerPrice',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> offerPriceLessThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'offerPrice',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> offerPriceBetween(
    double? lower,
    double? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'offerPrice',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> offerTitleIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'offerTitle',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> offerTitleIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'offerTitle',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> offerTitleEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'offerTitle',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> offerTitleGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'offerTitle',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> offerTitleLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'offerTitle',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> offerTitleBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'offerTitle',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> offerTitleStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'offerTitle',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> offerTitleEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'offerTitle',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
          QAfterFilterCondition>
      offerTitleContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'offerTitle',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
          QAfterFilterCondition>
      offerTitleMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'offerTitle',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> offerTitleIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'offerTitle',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> offerTitleIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'offerTitle',
        value: '',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> priceIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'price',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> priceIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'price',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> priceEqualTo(
    double? value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'price',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> priceGreaterThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'price',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> priceLessThan(
    double? value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'price',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> priceBetween(
    double? lower,
    double? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'price',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> startTimeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'startTime',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> startTimeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'startTime',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> startTimeEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'startTime',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> startTimeGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'startTime',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> startTimeLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'startTime',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> startTimeBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'startTime',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> viewCountIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'viewCount',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> viewCountIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'viewCount',
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> viewCountEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'viewCount',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> viewCountGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'viewCount',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> viewCountLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'viewCount',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
      QAfterFilterCondition> viewCountBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'viewCount',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }
}

extension RSDataMenuItemBookDetailsModelQueryObject on QueryBuilder<
    RSDataMenuItemBookDetailsModel,
    RSDataMenuItemBookDetailsModel,
    QFilterCondition> {
  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
          QAfterFilterCondition>
      bookDetailResGroupElement(
          FilterQuery<RSDataBookDetailReservationGroupModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'bookDetailResGroup');
    });
  }

  QueryBuilder<RSDataMenuItemBookDetailsModel, RSDataMenuItemBookDetailsModel,
          QAfterFilterCondition>
      nameElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'name');
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters

const RSDataBookDetailReservationGroupModelSchema = Schema(
  name: r'RSDataBookDetailReservationGroupModel',
  id: -684059191329124851,
  properties: {
    r'bookDetailId': PropertySchema(
      id: 0,
      name: r'bookDetailId',
      type: IsarType.long,
    ),
    r'defaultTime': PropertySchema(
      id: 1,
      name: r'defaultTime',
      type: IsarType.dateTime,
    ),
    r'description': PropertySchema(
      id: 2,
      name: r'description',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'id': PropertySchema(
      id: 3,
      name: r'id',
      type: IsarType.long,
    ),
    r'limitCorrectionValue': PropertySchema(
      id: 4,
      name: r'limitCorrectionValue',
      type: IsarType.long,
    ),
    r'menuItemId': PropertySchema(
      id: 5,
      name: r'menuItemId',
      type: IsarType.long,
    ),
    r'title': PropertySchema(
      id: 6,
      name: r'title',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    )
  },
  estimateSize: _rSDataBookDetailReservationGroupModelEstimateSize,
  serialize: _rSDataBookDetailReservationGroupModelSerialize,
  deserialize: _rSDataBookDetailReservationGroupModelDeserialize,
  deserializeProp: _rSDataBookDetailReservationGroupModelDeserializeProp,
);

int _rSDataBookDetailReservationGroupModelEstimateSize(
  RSDataBookDetailReservationGroupModel object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final list = object.description;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.title;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  return bytesCount;
}

void _rSDataBookDetailReservationGroupModelSerialize(
  RSDataBookDetailReservationGroupModel object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeLong(offsets[0], object.bookDetailId);
  writer.writeDateTime(offsets[1], object.defaultTime);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[2],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.description,
  );
  writer.writeLong(offsets[3], object.id);
  writer.writeLong(offsets[4], object.limitCorrectionValue);
  writer.writeLong(offsets[5], object.menuItemId);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[6],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.title,
  );
}

RSDataBookDetailReservationGroupModel
    _rSDataBookDetailReservationGroupModelDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = RSDataBookDetailReservationGroupModel(
    bookDetailId: reader.readLongOrNull(offsets[0]),
    defaultTime: reader.readDateTimeOrNull(offsets[1]),
    description: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[2],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    id: reader.readLongOrNull(offsets[3]),
    limitCorrectionValue: reader.readLongOrNull(offsets[4]),
    menuItemId: reader.readLongOrNull(offsets[5]),
    title: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[6],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
  );
  return object;
}

P _rSDataBookDetailReservationGroupModelDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readLongOrNull(offset)) as P;
    case 1:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 2:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 3:
      return (reader.readLongOrNull(offset)) as P;
    case 4:
      return (reader.readLongOrNull(offset)) as P;
    case 5:
      return (reader.readLongOrNull(offset)) as P;
    case 6:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension RSDataBookDetailReservationGroupModelQueryFilter on QueryBuilder<
    RSDataBookDetailReservationGroupModel,
    RSDataBookDetailReservationGroupModel,
    QFilterCondition> {
  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> bookDetailIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'bookDetailId',
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> bookDetailIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'bookDetailId',
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> bookDetailIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'bookDetailId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> bookDetailIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'bookDetailId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> bookDetailIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'bookDetailId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> bookDetailIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'bookDetailId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> defaultTimeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'defaultTime',
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> defaultTimeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'defaultTime',
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> defaultTimeEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'defaultTime',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> defaultTimeGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'defaultTime',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> defaultTimeLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'defaultTime',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> defaultTimeBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'defaultTime',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> descriptionIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'description',
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> descriptionIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'description',
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> descriptionLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> descriptionIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> descriptionIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> descriptionLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> descriptionLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> descriptionLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'description',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel, QAfterFilterCondition> idIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> idIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> idEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> idGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel, QAfterFilterCondition> idLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel, QAfterFilterCondition> idBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'id',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> limitCorrectionValueIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'limitCorrectionValue',
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> limitCorrectionValueIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'limitCorrectionValue',
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> limitCorrectionValueEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'limitCorrectionValue',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> limitCorrectionValueGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'limitCorrectionValue',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> limitCorrectionValueLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'limitCorrectionValue',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> limitCorrectionValueBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'limitCorrectionValue',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> menuItemIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> menuItemIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemId',
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> menuItemIdEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> menuItemIdGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> menuItemIdLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuItemId',
        value: value,
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> menuItemIdBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuItemId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> titleIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'title',
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> titleIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'title',
      ));
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> titleLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> titleIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> titleIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> titleLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> titleLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<
      RSDataBookDetailReservationGroupModel,
      RSDataBookDetailReservationGroupModel,
      QAfterFilterCondition> titleLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'title',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }
}

extension RSDataBookDetailReservationGroupModelQueryObject on QueryBuilder<
    RSDataBookDetailReservationGroupModel,
    RSDataBookDetailReservationGroupModel,
    QFilterCondition> {
  QueryBuilder<RSDataBookDetailReservationGroupModel,
          RSDataBookDetailReservationGroupModel, QAfterFilterCondition>
      descriptionElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'description');
    });
  }

  QueryBuilder<RSDataBookDetailReservationGroupModel,
          RSDataBookDetailReservationGroupModel, QAfterFilterCondition>
      titleElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'title');
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters

const MenuItemCatalogModifierGroupSchema = Schema(
  name: r'MenuItemCatalogModifierGroup',
  id: -8969952422398413221,
  properties: {
    r'createdAt': PropertySchema(
      id: 0,
      name: r'createdAt',
      type: IsarType.dateTime,
    ),
    r'createdBy': PropertySchema(
      id: 1,
      name: r'createdBy',
      type: IsarType.long,
    ),
    r'expand': PropertySchema(
      id: 2,
      name: r'expand',
      type: IsarType.bool,
    ),
    r'hotelID': PropertySchema(
      id: 3,
      name: r'hotelID',
      type: IsarType.long,
    ),
    r'id': PropertySchema(
      id: 4,
      name: r'id',
      type: IsarType.long,
    ),
    r'mandatory': PropertySchema(
      id: 5,
      name: r'mandatory',
      type: IsarType.bool,
    ),
    r'maximumItem': PropertySchema(
      id: 6,
      name: r'maximumItem',
      type: IsarType.long,
    ),
    r'menuItemCatalogGroupID': PropertySchema(
      id: 7,
      name: r'menuItemCatalogGroupID',
      type: IsarType.long,
    ),
    r'menuSectionID': PropertySchema(
      id: 8,
      name: r'menuSectionID',
      type: IsarType.long,
    ),
    r'name': PropertySchema(
      id: 9,
      name: r'name',
      type: IsarType.objectList,
      target: r'RSDataTitleLanguageModel',
    ),
    r'prices': PropertySchema(
      id: 10,
      name: r'prices',
      type: IsarType.objectList,
      target: r'RSDataMenuItemCatalogPricesModel',
    ),
    r'updatedAt': PropertySchema(
      id: 11,
      name: r'updatedAt',
      type: IsarType.dateTime,
    ),
    r'updatedBy': PropertySchema(
      id: 12,
      name: r'updatedBy',
      type: IsarType.long,
    )
  },
  estimateSize: _menuItemCatalogModifierGroupEstimateSize,
  serialize: _menuItemCatalogModifierGroupSerialize,
  deserialize: _menuItemCatalogModifierGroupDeserialize,
  deserializeProp: _menuItemCatalogModifierGroupDeserializeProp,
);

int _menuItemCatalogModifierGroupEstimateSize(
  MenuItemCatalogModifierGroup object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final list = object.name;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataTitleLanguageModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataTitleLanguageModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  {
    final list = object.prices;
    if (list != null) {
      bytesCount += 3 + list.length * 3;
      {
        final offsets = allOffsets[RSDataMenuItemCatalogPricesModel]!;
        for (var i = 0; i < list.length; i++) {
          final value = list[i];
          bytesCount += RSDataMenuItemCatalogPricesModelSchema.estimateSize(
              value, offsets, allOffsets);
        }
      }
    }
  }
  return bytesCount;
}

void _menuItemCatalogModifierGroupSerialize(
  MenuItemCatalogModifierGroup object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeDateTime(offsets[0], object.createdAt);
  writer.writeLong(offsets[1], object.createdBy);
  writer.writeBool(offsets[2], object.expand);
  writer.writeLong(offsets[3], object.hotelID);
  writer.writeLong(offsets[4], object.id);
  writer.writeBool(offsets[5], object.mandatory);
  writer.writeLong(offsets[6], object.maximumItem);
  writer.writeLong(offsets[7], object.menuItemCatalogGroupID);
  writer.writeLong(offsets[8], object.menuSectionID);
  writer.writeObjectList<RSDataTitleLanguageModel>(
    offsets[9],
    allOffsets,
    RSDataTitleLanguageModelSchema.serialize,
    object.name,
  );
  writer.writeObjectList<RSDataMenuItemCatalogPricesModel>(
    offsets[10],
    allOffsets,
    RSDataMenuItemCatalogPricesModelSchema.serialize,
    object.prices,
  );
  writer.writeDateTime(offsets[11], object.updatedAt);
  writer.writeLong(offsets[12], object.updatedBy);
}

MenuItemCatalogModifierGroup _menuItemCatalogModifierGroupDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = MenuItemCatalogModifierGroup(
    createdAt: reader.readDateTimeOrNull(offsets[0]),
    createdBy: reader.readLongOrNull(offsets[1]),
    expand: reader.readBoolOrNull(offsets[2]),
    hotelID: reader.readLongOrNull(offsets[3]),
    id: reader.readLongOrNull(offsets[4]),
    mandatory: reader.readBoolOrNull(offsets[5]),
    maximumItem: reader.readLongOrNull(offsets[6]),
    menuItemCatalogGroupID: reader.readLongOrNull(offsets[7]),
    menuSectionID: reader.readLongOrNull(offsets[8]),
    name: reader.readObjectList<RSDataTitleLanguageModel>(
      offsets[9],
      RSDataTitleLanguageModelSchema.deserialize,
      allOffsets,
      RSDataTitleLanguageModel(),
    ),
    prices: reader.readObjectList<RSDataMenuItemCatalogPricesModel>(
      offsets[10],
      RSDataMenuItemCatalogPricesModelSchema.deserialize,
      allOffsets,
      RSDataMenuItemCatalogPricesModel(),
    ),
    updatedAt: reader.readDateTimeOrNull(offsets[11]),
    updatedBy: reader.readLongOrNull(offsets[12]),
  );
  return object;
}

P _menuItemCatalogModifierGroupDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 1:
      return (reader.readLongOrNull(offset)) as P;
    case 2:
      return (reader.readBoolOrNull(offset)) as P;
    case 3:
      return (reader.readLongOrNull(offset)) as P;
    case 4:
      return (reader.readLongOrNull(offset)) as P;
    case 5:
      return (reader.readBoolOrNull(offset)) as P;
    case 6:
      return (reader.readLongOrNull(offset)) as P;
    case 7:
      return (reader.readLongOrNull(offset)) as P;
    case 8:
      return (reader.readLongOrNull(offset)) as P;
    case 9:
      return (reader.readObjectList<RSDataTitleLanguageModel>(
        offset,
        RSDataTitleLanguageModelSchema.deserialize,
        allOffsets,
        RSDataTitleLanguageModel(),
      )) as P;
    case 10:
      return (reader.readObjectList<RSDataMenuItemCatalogPricesModel>(
        offset,
        RSDataMenuItemCatalogPricesModelSchema.deserialize,
        allOffsets,
        RSDataMenuItemCatalogPricesModel(),
      )) as P;
    case 11:
      return (reader.readDateTimeOrNull(offset)) as P;
    case 12:
      return (reader.readLongOrNull(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension MenuItemCatalogModifierGroupQueryFilter on QueryBuilder<
    MenuItemCatalogModifierGroup,
    MenuItemCatalogModifierGroup,
    QFilterCondition> {
  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> createdAtIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'createdAt',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> createdAtIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'createdAt',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> createdAtEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> createdAtGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> createdAtLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'createdAt',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> createdAtBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'createdAt',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> createdByIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'createdBy',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> createdByIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'createdBy',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> createdByEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'createdBy',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> createdByGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'createdBy',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> createdByLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'createdBy',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> createdByBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'createdBy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> expandIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'expand',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> expandIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'expand',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> expandEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'expand',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> hotelIDIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'hotelID',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> hotelIDIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'hotelID',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> hotelIDEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'hotelID',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> hotelIDGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'hotelID',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> hotelIDLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'hotelID',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> hotelIDBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'hotelID',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> idIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> idIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> idEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> idGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> idLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> idBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'id',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> mandatoryIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'mandatory',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> mandatoryIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'mandatory',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> mandatoryEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'mandatory',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> maximumItemIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'maximumItem',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> maximumItemIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'maximumItem',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> maximumItemEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'maximumItem',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> maximumItemGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'maximumItem',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> maximumItemLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'maximumItem',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> maximumItemBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'maximumItem',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> menuItemCatalogGroupIDIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuItemCatalogGroupID',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> menuItemCatalogGroupIDIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuItemCatalogGroupID',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> menuItemCatalogGroupIDEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuItemCatalogGroupID',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> menuItemCatalogGroupIDGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuItemCatalogGroupID',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> menuItemCatalogGroupIDLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuItemCatalogGroupID',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> menuItemCatalogGroupIDBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuItemCatalogGroupID',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> menuSectionIDIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'menuSectionID',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> menuSectionIDIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'menuSectionID',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> menuSectionIDEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'menuSectionID',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> menuSectionIDGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'menuSectionID',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> menuSectionIDLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'menuSectionID',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> menuSectionIDBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'menuSectionID',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> nameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> nameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> nameLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> nameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> nameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> nameLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> nameLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> nameLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'name',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> pricesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'prices',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> pricesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'prices',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> pricesLengthEqualTo(int length) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'prices',
        length,
        true,
        length,
        true,
      );
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> pricesIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'prices',
        0,
        true,
        0,
        true,
      );
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> pricesIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'prices',
        0,
        false,
        999999,
        true,
      );
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> pricesLengthLessThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'prices',
        0,
        true,
        length,
        include,
      );
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> pricesLengthGreaterThan(
    int length, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'prices',
        length,
        include,
        999999,
        true,
      );
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> pricesLengthBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.listLength(
        r'prices',
        lower,
        includeLower,
        upper,
        includeUpper,
      );
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> updatedAtIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'updatedAt',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> updatedAtIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'updatedAt',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> updatedAtEqualTo(DateTime? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> updatedAtGreaterThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> updatedAtLessThan(
    DateTime? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'updatedAt',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> updatedAtBetween(
    DateTime? lower,
    DateTime? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'updatedAt',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> updatedByIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'updatedBy',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> updatedByIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'updatedBy',
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> updatedByEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'updatedBy',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> updatedByGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'updatedBy',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> updatedByLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'updatedBy',
        value: value,
      ));
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
      QAfterFilterCondition> updatedByBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'updatedBy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }
}

extension MenuItemCatalogModifierGroupQueryObject on QueryBuilder<
    MenuItemCatalogModifierGroup,
    MenuItemCatalogModifierGroup,
    QFilterCondition> {
  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
          QAfterFilterCondition>
      nameElement(FilterQuery<RSDataTitleLanguageModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'name');
    });
  }

  QueryBuilder<MenuItemCatalogModifierGroup, MenuItemCatalogModifierGroup,
          QAfterFilterCondition>
      pricesElement(FilterQuery<RSDataMenuItemCatalogPricesModel> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'prices');
    });
  }
}
